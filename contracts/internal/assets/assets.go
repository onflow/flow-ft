// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../src/contracts/CustodialDeposit.cdc (3.533kB)
// ../src/contracts/FlowToken.cdc (7.507kB)
// ../src/contracts/FungibleToken.cdc (7.298kB)
// ../src/contracts/TokenForwarding.cdc (1.954kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _custodialdepositCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x50\xa0\xb0\x03\xdb\x5a\xb4\x45\x0f\x81\xbb\xe8\x6b\x03\xec\x6d\xd1\x4d\xd3\x33\x2d\x8d\x24\x22\x32\x29\x90\x23\x3f\x1a\xe4\xbf\x17\x43\x52\x12\x29\xdb\xdb\xb4\xeb\x43\xec\x48\x9c\x6f\xbe\xf9\xe6\xc5\xfc\xee\x2e\xcb\xbe\x81\xc7\x06\xe1\xb7\xde\x92\x2e\xa5\x68\xe1\x77\xec\xb4\x95\x04\x78\x12\xfb\xae\x45\x28\xb4\x22\x23\x0a\xca\xb2\x5f\xd4\xc5\x43\xa8\xb4\x01\x51\x14\xd8\x91\x54\x35\x94\xde\xd6\x42\x65\xf4\x1e\x84\x3a\x43\x6f\xd1\x64\x56\x03\x35\x82\x40\x40\x31\xba\xb1\x68\x0e\xb2\x60\xa4\xbe\x2d\xa1\x30\x58\x4a\x02\xe2\x83\x28\x1d\xa4\xee\x15\x6d\xb2\xec\xb1\x91\x16\xa4\x05\x31\x39\x97\xfc\x77\x8f\x8a\x04\x49\xad\x40\x57\x20\x22\xfe\x06\x0b\x94\x07\x34\x13\xf1\x0b\xdf\x01\x1d\x8e\x92\x1a\x06\xd6\x55\xb5\x2e\x1a\x21\x15\x88\xae\x83\x42\x28\xa6\xcd\x64\x7c\x64\x59\x1a\x16\x9e\x08\x8d\x9a\x60\x98\xdb\x14\x41\x83\xfb\x10\x06\x18\x6c\xf1\x20\x14\x65\x2c\xc2\xe8\x74\x74\x96\x65\x77\x79\x96\xc9\x7d\xa7\x0d\xc1\x43\xaf\x6a\xb9\x6b\xf1\x51\x3f\xa3\xf2\x7e\xde\x9d\xde\x7d\x37\xbe\x6e\xf5\x31\x7d\xf5\x7d\x96\x75\xfd\x6e\x4a\xc4\x28\xc0\x90\xbf\x97\x2c\x03\x00\xc8\x73\xf8\x70\x40\x45\x3e\x03\xd2\x02\xee\x25\x11\x96\x70\x6c\x50\x39\x9a\x23\x84\xb4\x1c\x85\x20\x2c\x9d\x25\xc3\xa3\x33\xfd\xa8\x24\x49\xd1\xca\xbf\xb1\x5c\x48\xff\xfb\x73\xdf\x75\xed\xf9\x1e\xfe\x7c\x90\xa7\x1f\x7f\x58\xbe\xc9\x17\xf3\xb7\x20\x0c\x3a\xe1\x4b\x23\x8e\x21\x1c\x01\x4f\xa2\x6f\x69\xe6\xf5\xaf\x70\x68\x21\xf6\x2c\xdc\xff\xf5\x15\x92\x87\xa5\x4b\xe8\x55\x4f\x8f\xa2\xae\xb1\x0c\xc2\xcd\xdc\xad\x80\x44\x7d\x0f\x9f\xc9\x48\x55\x07\xdf\x6c\x69\xd0\xea\xde\x14\x08\x52\x11\x9a\x4a\x14\x38\x74\xce\xa7\x7e\xd7\xca\x02\x5e\xdc\xd1\xe1\x78\xd5\x2b\x06\x8a\xdc\x70\xe4\xf7\xf0\x73\x92\xf8\x8d\x63\x37\x73\xc9\x10\xaf\x57\x1c\x07\xa0\x3f\xc2\xff\xf7\x69\x0d\x6d\x3e\x19\x7d\x90\x25\x9a\xd5\x05\xaf\x91\x58\x9e\xc3\x83\xc4\xd6\x29\xd3\x68\xfe\x6e\x10\x0e\x4c\xc1\xab\xca\xcf\xac\x7b\x18\xf4\x74\x4f\x3b\xd4\xdc\x85\x41\xd7\x24\xca\x16\xc9\xdb\x73\x60\x43\xc9\xfa\xa0\x12\xaf\x89\x12\xd1\x8b\x84\x59\xaf\x0a\xd7\xdf\xce\xe9\xd8\x82\x21\x83\x2c\xbb\xef\x32\x4b\xda\x60\x19\xe5\x35\xd8\x73\x53\x72\x4d\xf8\xd1\xe1\xf2\xec\xfa\xdd\x85\x23\x6a\x37\xb9\xf8\xb7\x9b\x50\x57\x28\x7c\x5d\xd6\xa2\xf4\xf3\x87\x89\xdc\x28\x33\x46\xdc\xec\x44\x2b\x54\x81\x01\x83\x44\x48\xfb\xf0\xb1\xd8\x56\x1b\x27\xec\xa6\x4c\x88\x6c\xd7\xfc\x3d\x1d\x7e\x4d\x64\x1e\xda\xec\x4d\x0a\x93\x78\x46\xa7\x15\x17\x74\xcd\x03\xcb\x11\x04\xe1\x1e\x0a\x53\xf7\x3c\x72\xe7\x0a\x0f\x2e\x42\x6d\x04\x1b\xd7\xd5\x2c\xae\x53\x66\x13\x1b\x7d\xa4\x30\x64\x38\x95\x0a\x8f\x40\xc8\x23\x4e\x98\x73\x48\xec\xd0\xcf\xbd\xc5\xb1\x30\x93\xda\x69\x10\xf6\x5a\xe1\x79\x3c\xb9\x43\xde\x3d\x64\x84\xb2\x15\x1a\x83\xe5\x86\xbd\x18\xa4\xde\x28\x5f\xbe\x0a\x8f\xed\x39\x06\x09\x73\x6e\x70\xa9\xc7\x41\x88\xa7\xc0\xa0\x10\x6d\x8b\x25\x58\x0d\x92\xdc\x4a\xd8\x45\xa3\x24\x86\xc2\xd6\xe2\xb1\x41\x83\x9b\x2f\x55\xd1\xf1\xc6\x30\xbb\x5e\x4b\xd7\xaa\xe7\x62\x1c\xfa\xef\xb4\x50\x7c\xd0\xb0\x5d\x47\x15\x73\xe1\x7a\x6e\x98\x16\x4d\x8d\xf4\xab\xaf\xc6\x1b\x65\x13\x0b\x1b\xea\x96\x77\xf0\xcd\x5e\x1c\x24\x98\x80\x17\xcb\x21\xfe\x59\xa0\x81\x7e\x44\x7e\x37\xa3\x12\x71\xe5\x4d\xe4\xd6\xd1\xd3\xf5\x89\x33\xef\xc1\x09\x15\xb6\x6b\x18\x0d\xaf\x41\x97\x68\xc9\xe8\xf3\x62\x0e\x11\x9e\x47\x50\x91\x75\x84\xc1\xf7\x06\x6b\x17\x7c\x6c\xe9\x62\x97\xe3\x06\x9d\x4d\xed\xc5\x8d\x71\x19\x7b\xe6\xa9\x3a\x08\xfd\x13\xa4\xba\x64\x49\x74\xc3\xb5\xc9\x8a\x03\x2e\x12\xe6\xdb\xb5\x2f\xf9\xf9\xd6\x88\x05\xdc\xae\x1d\xf6\x72\x95\x58\x92\xbe\x87\x9c\x13\x2b\x6a\xcc\xcb\xd4\x7a\x3c\xb8\xbc\x41\xa4\x95\xea\x79\xfb\xed\x4b\xb2\x81\x5e\xdf\xa7\xd4\xf2\xce\x3d\x9e\x63\xfb\xc3\x33\x2e\xc2\xd4\x48\xff\x8d\x8f\x6b\x9e\x2f\xdc\x60\x82\x92\xc9\x9e\xcd\x73\x77\x29\xe6\x93\x9c\x3e\x3f\x25\xd3\xb1\x25\x95\xa5\xb8\xf4\x67\xba\x8e\x6b\x7a\xc0\xe3\x61\xe9\xda\xc3\xf2\x40\xe1\xab\x66\xb8\x0f\x86\x50\x56\x7c\x71\xa1\x06\x0d\x68\x03\x4a\xd3\xb8\xe8\x2e\x80\x5a\x83\xa2\x3c\x03\x9e\xa4\x25\xcb\x48\x01\x21\x1b\x9b\x62\x39\x5b\xf2\x8f\x3a\x2a\xc0\x6b\x6c\x57\xe9\x72\x7e\xc6\x8b\x6e\x06\xdd\xf3\xd5\x75\xf0\xe5\xc2\xe1\x4b\xb2\xa4\xc4\x56\x1b\x90\x15\x28\x1d\x6e\x11\xd2\x06\x90\x55\x50\x2f\x88\x87\xfb\x8e\xce\xfe\x4c\xd4\xcf\x95\xab\x74\x6f\xf0\x34\xf4\x69\x5a\x4e\x5a\x94\xdb\x79\xab\xbc\x0f\xbb\x70\x2c\x8a\x6a\x78\x7f\x7b\x0c\xfc\x6b\x3f\x6e\xd7\x11\x8f\x68\x54\xba\x71\x3f\x43\x64\xd6\x0a\x8f\x1f\x38\xa8\x81\xf7\xc4\xd1\x07\x3e\xbd\x5c\x5c\x59\xed\x6f\xa0\x93\x38\x58\x5e\x8c\x9d\xd7\xec\x9f\x00\x00\x00\xff\xff\x01\xf1\xcd\x08\xcd\x0d\x00\x00"

func custodialdepositCdcBytes() ([]byte, error) {
	return bindataRead(
		_custodialdepositCdc,
		"CustodialDeposit.cdc",
	)
}

func custodialdepositCdc() (*asset, error) {
	bytes, err := custodialdepositCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CustodialDeposit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x8f, 0x1d, 0xd1, 0xe0, 0xbd, 0x34, 0x85, 0x2e, 0x3e, 0x2d, 0xd9, 0xde, 0xcf, 0xbc, 0xf5, 0xd8, 0x7f, 0xd5, 0x71, 0xd7, 0xba, 0x2c, 0x43, 0xbf, 0xad, 0xaf, 0xbc, 0xfb, 0x8, 0xd4, 0x3b}}
	return a, nil
}

var _flowtokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdf\x73\x1b\xb7\xf1\x7f\xe7\x5f\xb1\xdf\x7c\x67\x1a\xca\xa1\x28\xa6\xd3\xe9\x83\x46\x4e\x2c\xb7\xf6\x8c\x1f\xd2\xe9\xa4\x6e\xfb\x2a\xdc\xdd\x52\x44\x74\x07\x70\x00\x1c\x29\xc6\xe3\xff\xbd\xb3\x58\x00\x07\x40\x24\x25\xb5\x09\x1f\x6c\xf1\x0e\xd8\x5f\xd8\xfd\xec\x07\xcb\xab\x37\x6f\x66\xb3\xff\x87\x8f\xbd\xde\x7f\xd6\x0f\xa8\x00\x1f\xc5\xb0\xed\x11\x5a\xad\x9c\x11\xad\x9b\xcd\x3e\x6f\xa4\x05\x69\x41\x4c\x2f\x25\xfd\x3b\xa0\x72\xc2\x49\xad\x40\xaf\xc1\x6d\xd0\x0b\x81\x8f\xa3\xba\x97\x4d\x8f\xc0\xe2\xac\x13\xaa\x13\xa6\x5b\xce\x3e\x59\x50\xda\xc1\x56\x18\x17\x37\xc4\x97\x0b\x68\x46\x07\xbf\x8c\xd6\x81\xdd\xe8\xbd\x85\x8d\xde\xc3\xa0\xad\x03\x47\x42\xec\xcc\x6e\xf4\xd8\x77\x93\xda\x6a\xb7\x54\x6d\x3f\x76\x52\xdd\x4f\x66\x28\x74\x7b\x6d\x1e\x58\x00\x48\x67\xb1\x5f\x2f\xc9\x17\xcc\x7c\x8d\x3e\x82\x56\xfd\x01\x14\x62\x67\xc1\x69\x68\x10\x3a\xdc\xf6\xfa\x80\x1d\x48\x05\x5a\x21\x88\xb6\xd5\xa3\x72\x4b\x2f\xc0\xaf\xce\xfd\x48\x72\xdc\x46\x38\xd8\x7b\x5b\x1b\x32\x50\x1b\x16\x81\xa2\xdd\xc0\x68\xd1\x7c\x6b\xa3\xa8\x99\xb4\x7e\xef\xbf\xc4\xd8\x3b\xd0\xcd\x2f\xd8\xba\x05\x34\xd8\xeb\x3d\x9b\x59\xc5\xb8\xd3\xc8\x01\x24\x33\xc9\x4a\x83\x1d\xae\xa5\x42\x2f\x45\x2a\x87\x66\x2d\x5a\xb4\x6c\x83\x30\x38\x13\xbd\x41\xd1\x1d\x80\x97\x79\x3b\x7c\x78\xca\x03\x4a\x3b\x67\xb3\x37\x57\xb3\x99\x1c\xb6\xda\xb8\xb4\x88\xd7\xac\x8d\x1e\x60\xf5\xb8\xfa\xe3\x6c\xb6\x1d\x9b\xc9\xdd\x14\xc9\xeb\x6a\xc3\x97\xd9\x0c\x00\xe0\xea\x0a\x3e\x6b\x27\x7a\xb0\xe3\x76\xdb\x1f\x28\x5c\x6b\x3a\x1c\x3e\x55\x1f\x98\x47\x69\x1d\xaa\x16\xfd\x7a\x12\xbe\x13\x06\x1c\x6d\xfa\x87\xdf\x73\x0d\xff\xfc\x28\x1f\xff\xfc\xa7\x24\xf0\xc3\x8e\xcf\x5f\x38\xca\x49\x1c\xa4\x73\xd8\xc1\x7e\x83\xaa\x3c\x0a\x69\xa1\x35\x28\x1c\x76\x49\x34\xfa\xad\x85\xa5\x9f\x94\x74\x52\xf4\xf2\x57\xec\xe6\x92\xff\x2e\xf5\x5e\xbc\x48\x31\xfb\x23\x0c\xc2\x5e\xba\x4d\x67\xc4\x3e\x04\x4d\xf0\xf9\x56\x26\xfc\x3b\x2c\x9a\x8b\x81\x52\x21\xea\x5a\xf8\x3d\xd7\x70\xdb\x75\x06\xad\xfd\xf1\xb5\xba\x3b\xdc\x6a\x2b\x1d\xa7\xc7\x71\xcd\x7f\xe5\x25\x4f\x14\x3b\xfd\x4a\xb5\x0a\xf7\xb9\xea\x81\xd2\xa8\x8e\xf4\x4f\x52\xd5\x9a\x5e\xef\x92\x75\x86\x0a\xb1\x12\xfd\x7e\x34\xea\xbf\x11\x2d\x60\xc0\x3d\x5b\x6b\xc0\xa0\xd5\xa3\x69\xf1\x74\xae\xfc\xe4\x17\xfe\x85\xdf\xcd\x45\xdf\xeb\x3d\x76\xb7\x27\xd4\x4e\xf1\xbe\xba\x4a\xa6\xc4\xc2\x67\x30\xf0\x20\x2a\x15\x21\x57\x8b\x54\x0e\x1e\x4a\x26\x18\xe0\x12\x95\xbc\x5a\xdc\x63\xaa\xa2\x0d\xc2\x7a\x54\x2d\x21\x81\x8d\x85\xcc\x5b\x84\xea\xe0\x5e\xef\xd0\x50\x89\x37\x2c\x6c\x6b\xd0\x3f\xdf\x12\x84\xb6\x5a\x75\xd2\x6f\x8c\xd2\xa4\xaa\xca\x35\x56\xcf\xc1\xc7\xbc\x15\x7d\x8f\xdd\x32\xd7\xdd\x6e\xb0\x7d\xb0\xb0\x11\xdb\x2d\x05\xd1\x81\x19\x95\x93\x03\xfa\x9d\xb8\x43\x03\x22\xd9\xe7\xa3\x59\x88\x88\x92\x7e\x0e\xf1\xa6\xf7\x8a\x5d\x6f\x30\x46\x3e\x7a\x45\x05\x8c\x8f\x27\xa0\x95\x6c\x8c\xd2\x38\x3d\x22\xb4\x2d\xc0\x6a\x7a\x6d\xfc\x69\x2a\x0d\x7b\x71\x80\xb5\x26\xc3\x06\xd1\xcb\x56\xea\xd1\xf2\x41\x38\x1d\x54\x72\x00\x53\x54\xf4\x18\x94\x4a\x05\x42\x9a\x25\xdc\x82\xdd\x62\x2b\x45\x1f\xd2\x60\xca\x97\xb2\x53\xb0\x09\x4e\xfb\xb4\x8a\xd2\xa6\xfa\x28\xa2\x40\xa9\x95\xc4\x78\xfd\x15\x74\x2e\xff\x6e\xf4\x4e\x76\x68\x16\xd5\xf3\x9f\xb1\x45\xb9\x7b\xfa\xfc\xbd\xe8\x7d\x32\x05\xc8\x0d\xea\x37\xba\xef\xb8\xbf\x34\xe1\xbd\x5e\x83\xf0\x01\xb0\xb1\xa9\xc6\xe5\x11\x75\xc3\xca\x12\x71\x53\xca\x44\x9c\x2c\x84\x52\x26\x44\x6f\x7c\x50\xe9\xfc\x29\x31\xd2\x5e\xda\x38\xaf\x24\x5f\xc0\x97\xf4\x9e\x3e\xbe\x37\x47\x91\x6f\xa3\xf0\xb4\xe4\x6b\x61\x49\x04\xd8\xec\x59\xfe\xfa\x63\xcc\x42\xce\x17\xf1\x10\x6b\xce\xe1\x3d\xa5\xa9\xaf\x5d\x10\xfe\xa1\x30\xf7\x23\x35\xd8\x7c\x3f\x95\x4d\x54\x11\x7b\x29\xef\xf1\x78\x9e\xea\x6e\x99\x6f\xfa\xe4\x42\x4a\x59\x10\x7c\xf2\x48\x6d\x54\x98\x43\x28\xd2\x88\x45\xa3\xe5\x4c\xa1\xe3\xc9\x05\x90\xd8\x41\x2b\x3c\xa4\x95\x0d\x7a\x3a\x63\x84\xb2\x6b\x34\x06\xbb\x25\x69\x31\xe8\x46\xa3\xf8\x60\x15\xee\xfb\x43\x2e\x24\x16\x52\x50\xa9\x8b\x72\xf2\x72\xb9\x2c\xa9\x52\xa4\xf3\x35\xd8\x64\x4d\x23\x17\x85\xbd\xc5\x3d\x15\xd3\xf2\x58\x98\x29\x61\xd6\xa3\x4a\x71\xaa\x81\xf8\x1a\xde\x95\x39\xca\x16\x9d\x3d\xf4\xe2\xeb\x65\x88\x79\xb1\x81\x70\xfc\x69\xe7\xe4\xff\x63\xe7\xf4\x52\xf4\x5e\xa1\xf9\x71\x29\xb8\x9d\x5d\x14\x42\x38\x80\x70\x73\x99\x43\xc0\x94\x9f\x2c\xed\xe2\x44\xea\x85\x50\xbd\x26\xf3\x0a\x7a\x57\xa5\x9d\xcf\x35\xd1\x75\xb6\x28\x34\x67\x53\x75\x85\x23\xcc\x2a\x98\xbe\x7a\xf7\xec\xf1\x2c\x24\x96\xce\x4d\x8a\x36\x87\xe6\xc9\x64\x99\x14\xb2\x31\x0d\xb6\x62\xb4\x38\xe5\x72\x51\x5e\x64\x63\x96\xbf\x94\xa9\x68\xa2\xee\x80\x68\xbe\x27\xf8\xad\xdf\x4e\xd6\x6e\x44\xe1\x48\x83\x4c\xb0\xed\x38\x60\xe7\x5d\xf5\xe8\xbc\xd6\xbe\xc3\x84\xd4\x0b\xcd\x7d\xf9\x24\xb5\x42\xa8\xe7\x7c\xac\xc7\xd2\xa9\x06\x91\x1e\x1d\xec\xbc\x7f\x37\x97\x81\x7b\xd9\xff\x83\x77\x89\xa2\x2e\x4b\x57\x9f\x4b\xc1\xef\x58\xd8\xb2\x06\xa3\x94\x89\x35\x93\x2a\x96\x33\xa1\x7a\x36\x1b\x8b\x3d\xf0\x16\x56\xcb\x55\xf1\x3e\x1e\xe0\xae\x30\x3d\x4b\xca\xb0\x60\x5e\x07\x63\xf2\x3a\xa3\xd2\xf0\xf6\xc4\xf3\xcb\xc2\xf5\x4c\x4f\xa6\x2d\xe1\xcb\x87\x61\xeb\x0e\xc7\xa8\x4e\x99\xff\x25\x1e\x72\xe2\x11\x5e\x80\xc8\xf3\xf9\x57\x34\x3a\xf5\x73\xd5\x25\x7c\x93\x13\x7e\x89\xbe\x27\x24\x0c\x38\x46\x5d\xd9\x77\xf1\x81\x2e\x8b\xf4\x92\x1a\xb6\x4d\xe4\x23\x17\xe6\x19\x97\x17\xc2\x62\x13\x34\xd6\x2c\xcb\x5f\xf2\x4c\xc7\xdc\xc0\xd7\x0f\xbf\x4f\xc2\xf8\xc6\x16\x1a\xbe\xa0\xbb\x93\xbf\x7f\xf9\x86\x1c\x53\xd5\x06\xf2\x10\xda\x2b\xb8\xc3\x16\x9f\xb4\x7e\x4a\xed\x3a\x8c\xf3\xe7\xf1\xf2\x19\xd4\x5a\x2d\x57\x17\xd5\x59\x11\x63\xb9\x55\x1d\xd1\xe4\x13\x24\x2c\x62\x12\xa3\x95\x37\x59\x74\x03\x71\x1f\xf6\xd6\x42\xeb\xef\xb1\xa9\x55\x51\x9b\x62\x8e\xe3\xa3\xdb\x90\x45\x2f\x61\x39\x99\x29\x15\x49\xa1\xa3\x09\xcd\x95\x62\xc7\xac\x3f\xf2\xbc\x48\xd2\x4b\x48\x4b\x14\x0b\x32\xe2\x72\x94\x97\x17\x9a\x68\xdb\xe7\x92\xf5\x9c\x03\x6f\x5a\x6e\x33\xe7\x16\x1e\xa6\xc9\xaa\x21\xe6\xa5\xaf\x1f\xe0\x02\x5a\xd4\x04\x22\x6b\xd3\xc3\x89\x44\x3e\xd7\x57\x27\x6b\x8f\x75\xd6\x12\xd0\xaa\xc2\x27\xe6\x5f\x3e\xa1\x4f\x08\xf2\x0f\x41\xcc\x7c\x75\x71\x0d\xdf\x70\xb8\xc2\xcd\x8d\xeb\xa9\x41\xb8\xf7\x19\x66\x28\x0e\xca\x97\xe7\x37\xa7\xa4\xdd\x04\xc4\xac\xa2\x7f\x42\x6e\x8f\xd6\xb2\x50\x7f\xea\xe1\x44\x59\x54\xa9\xe2\xeb\xff\x80\x64\xdf\x1d\x23\x0e\x4f\xad\x84\x63\xa6\x9f\x61\x1d\xc5\x45\xb6\xe6\x08\x2f\x28\xd0\xf3\xb4\x82\x2a\xe9\x15\xc9\x59\x32\x8b\x92\x52\x2c\xc0\x8e\x8d\xbf\x2f\xd9\x9c\x49\xe4\xc2\x12\x8d\x75\xd9\x64\x66\x41\x4f\x54\x6c\x27\xd9\x60\x6a\x51\xd5\xab\xc1\xe6\x00\x06\x07\xbd\x8b\xd3\xb6\x50\xb6\x5e\x6c\x9a\xe6\x1c\xa5\x8d\x1e\x7c\x26\xfe\x1a\xd2\x88\x47\x66\xc2\xfa\x30\xb8\xb3\x7c\x73\x0a\xd4\xef\xcb\x0b\x68\x8b\x88\x89\x72\x9a\x06\x1c\xef\xce\x29\x69\x8a\x11\xc5\xf9\x0c\xe0\xac\xf9\x1b\xee\xf9\xa2\xf9\xa2\x34\x48\x0d\x36\xc3\x1b\x6e\xb6\xd5\x74\xe3\x5c\x44\x2b\xc5\x27\x26\x1c\xd7\xf0\xae\x04\xf1\x27\xbe\x9e\x9d\x93\x14\x5f\xcf\xd7\x4d\xa6\xe6\x85\x52\xb2\x40\xfa\xab\xe6\x71\x0f\x8e\xdd\x3d\x6a\x44\x28\xbe\x9f\x24\x41\x7e\x32\x9b\x2e\xc3\xc6\x8f\x18\xf2\x39\xc5\x12\x6e\xfb\x1e\xd6\x12\xe9\xfe\x2d\xab\x99\x24\x81\x61\x14\xd4\xe4\x72\x3a\xba\x49\xf3\xcc\x99\xca\x98\x08\x36\xcf\xdc\xfd\x4c\x3c\x1b\xbc\xeb\x35\xec\x37\xc2\x4d\x34\xa7\x1e\x13\x73\xd3\xee\x74\xd4\x9d\xd9\x5a\x8f\x63\xc8\x15\x35\x0e\x0d\xdd\x26\x84\x41\x10\xa6\x91\x8e\x48\x7f\xb1\xd0\x47\x35\x0f\x20\xdd\x34\xca\x69\x40\x8e\xc0\xde\xf3\xd8\xf3\x82\xf2\x27\x30\xe4\xe3\x5f\xe2\xf9\xf7\xab\x15\xb1\xdf\x5c\x0b\xa7\x53\x36\xea\xf2\xfc\xb1\x86\xae\x8c\x3a\x78\xd2\x27\x76\x48\xf4\x51\xaa\x62\x86\x56\xe5\x7f\x01\x0a\xc7\x31\xbb\xb6\xf1\xa2\xb4\x3e\xfe\x20\x40\xfa\xe6\x37\x97\x5e\x18\xb3\xfe\xab\xa0\xf7\x6a\x1d\x21\x86\x71\xe9\x98\x6f\x82\x2a\xb1\x97\x2d\xb4\x62\x2b\x1a\xd9\x4b\x77\x88\xb1\x0b\x3f\x1e\x64\xf3\x03\x3f\x30\xc3\xc7\xad\xb6\x68\x6b\x1a\x75\x17\x58\xe8\x1d\x0c\xe8\x36\x9a\x2e\x5b\x46\x8f\xf7\x1c\xae\xbb\x38\x3b\xba\xcb\xa6\xfd\x47\xa2\x52\x38\xd6\x4b\xf5\x70\xf3\x87\x0a\x26\xbf\x1c\x9f\x49\x7d\xfd\x61\x5e\xd4\xd7\x15\x7b\x35\x45\x20\x0d\xaf\x8a\x65\x4e\x98\x7b\x74\x27\x23\x96\xd6\xfe\xce\xa1\x0b\x47\x7e\x17\x73\x37\x8f\xdc\xfb\xf8\xee\xb7\x0d\x5c\x10\xfb\x6c\xdc\xc2\xba\xdf\x34\x6c\xd4\x22\x72\x38\x4f\x44\x7d\xba\x33\x71\xfd\xc4\x6b\x4f\x5d\x47\x54\x3c\x43\x26\x60\x2a\xa1\x33\xf0\xfd\xfd\x2a\xdd\x52\x4e\xd5\x50\x26\xf3\x54\x25\x65\x0a\x4a\xef\x3e\x50\x17\x22\x9c\x9c\x46\xff\xfc\x4b\x62\xba\x4e\x24\x10\x26\xae\x91\x21\x6f\x92\xe2\x1b\xd9\x4b\x7f\x1c\x3a\x8e\x0e\x5f\x67\xd4\x28\xfe\x13\x00\x00\xff\xff\x88\x77\x5b\xc3\x53\x1d\x00\x00"

func flowtokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenCdc,
		"FlowToken.cdc",
	)
}

func flowtokenCdc() (*asset, error) {
	bytes, err := flowtokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0xff, 0x63, 0x1c, 0x17, 0xfb, 0xd1, 0xbb, 0xe3, 0x7b, 0xc6, 0xfe, 0xc8, 0x74, 0x9e, 0xef, 0x83, 0xb9, 0x84, 0xa6, 0x33, 0xbf, 0x22, 0xf4, 0x85, 0xb3, 0x1f, 0x1a, 0xb6, 0x8, 0xa0, 0x21}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x4d\x73\xdc\xb8\x11\xbd\xf3\x57\x74\xd9\x07\xcb\xce\x58\xda\x43\x2a\x07\x57\x79\x13\xbb\xd6\xaa\xf2\x25\x49\x25\x4a\xf6\x3a\x18\xb2\x39\x83\x15\x08\x70\x01\x70\x46\xb4\xcb\xff\x3d\xd5\x8d\x0f\x82\x1c\x4a\x1a\x55\xd6\x17\x6b\x48\xa0\xd1\xdd\x78\xfd\xfa\x01\xbc\x79\xf7\xae\xaa\x5e\xc3\xdd\x01\xe1\x56\x99\x13\xdc\x0e\x7a\x2f\x77\x0a\xe1\xce\xdc\xa3\x06\xe7\x85\x6e\x84\x6d\xaa\xea\xf5\x6b\xd8\xa6\x97\xfc\x6e\x0b\xb5\xd1\xde\x8a\xda\x83\xd4\x1e\x6d\x2b\x6a\xac\x2a\x32\x94\x7f\x82\x3f\x08\x0f\x42\x29\x68\x93\x59\xcf\x66\xd3\x4c\x07\x27\x33\xa8\x06\x0e\xe2\x48\xaf\xe8\x79\x6b\x6c\x07\xde\x5c\x57\x5f\x5b\x10\x30\x38\xb4\x0e\x4e\x42\x7b\x47\xef\x1b\xec\x95\x19\x41\x80\xc6\xd3\xc2\xd4\x06\xfc\x01\xa5\xcd\xbf\xab\x60\x59\x23\x36\x34\x53\x76\xbd\xc2\x0e\xb5\xa7\x61\x30\x0b\x64\xf2\xf7\x9a\xfd\x2f\x8c\x2c\xdc\x6b\x8d\xa2\x1c\x51\x40\x64\xc5\x0e\x0a\x1d\x08\xdd\x80\x16\x9d\xd4\xfb\x8a\xc3\xf5\xb3\x0c\xb8\x1e\x6b\xd9\x4a\x74\xd7\x21\x85\xff\x15\x83\xf2\x5b\xb0\xe8\xcc\x60\x29\x61\x5f\x44\x7d\x00\x51\xd7\x66\x60\xdf\x84\x07\x73\xd2\x2e\x04\x97\xd2\x93\x82\x60\x3f\x04\x39\x4c\xfb\x52\x63\x65\x5a\x5e\x8e\x8d\x66\x9b\xe0\xbc\xb1\xd8\x80\xd4\x31\x25\xc9\x3a\x3d\x17\xfb\x18\xe5\x72\xd2\x41\x38\xe8\xd0\x1f\x4c\xe3\x20\xc7\x61\x4e\x1a\x2d\x47\x68\xfc\x01\x6d\xdc\x8e\x5a\x68\xa8\x85\x52\x31\xa4\x7f\x5a\x73\x94\x0d\xda\xed\x06\xb6\xff\xc2\x1a\xe5\x91\xff\xa6\x59\xdb\xcf\x42\x91\xa3\x53\xc0\x53\x6a\x1c\xbb\xe1\xca\x27\xd0\x60\xad\x84\x45\xe8\x2d\xbe\xaf\x8d\x6e\xa4\x97\x46\x87\x14\xf7\xc6\xf9\xf2\x19\xfb\x68\xd1\x79\x2b\x6b\x5f\x91\xb3\xf8\x80\xf5\x40\x2f\x21\xa6\xa5\x1d\x74\x1d\x06\x87\x54\x84\x90\x43\xf8\x23\xd0\x3a\x0e\x7b\x61\x85\x47\xd8\x61\x2d\x06\xf2\xc5\xc3\x5e\x1e\xd1\xf1\x70\x8a\x96\xff\x10\x3b\xa9\xa4\x1f\x69\x0b\xdc\x41\x58\xac\x04\x58\x6c\xd1\xa2\xae\x19\x17\x21\xcd\x21\xa1\x61\x0b\xb5\x1a\x01\x1f\x7a\xe3\xa2\xa9\x56\xa2\x6a\xdc\xe4\x51\x25\x35\x18\x8d\x60\x2c\x74\xc6\x62\xf2\x78\x4a\xc5\x75\x55\x7d\xa5\xd2\x71\x26\x3a\x14\x52\xbf\xf0\xa6\x13\xf7\x08\xf5\xe0\xbc\xe9\x72\x86\x63\x6a\x32\xe0\x29\x37\xf3\x2c\x53\x21\x19\x38\x0a\x2b\xcd\x40\xa3\xa5\xde\x3b\x38\x49\x7f\x60\xf3\x01\x79\xd7\xd5\xad\xb1\x80\x0f\x82\xcc\x6c\x40\x40\x2b\x86\x1a\x3d\xef\xfd\x0e\x27\xeb\xd8\xc0\x6e\x4c\x75\xcb\x35\xc0\xe9\x80\x04\x8a\x59\x71\x7d\x1e\x61\x70\x52\xef\x0b\x5f\x69\x6b\x27\xd7\x36\x31\x4c\xd3\x2e\x4a\x34\x13\x46\x45\x0e\x38\xd4\x0d\xcf\xb4\x01\x6e\xa9\x5a\x7a\x44\xfb\xde\x9b\xf7\xf4\xff\x86\x23\x32\x83\xa7\xaa\xa1\x35\x89\x04\x68\x21\xe6\x06\x0a\x56\x40\x8d\x64\x55\x81\xc2\x66\x8f\x16\x5c\x27\xac\xcf\x4b\x5d\xc3\x9d\x09\x2b\x45\xeb\xde\x80\xd0\x53\x1d\x6c\xaa\x40\x4f\xb1\x46\x1d\xa5\x64\xe4\x45\x1b\x2b\x4e\x45\x2a\xa1\xb5\xa6\x2b\x31\xc2\x54\x15\x4a\x88\x81\xdb\x60\x6f\x9c\xf4\x19\x1d\x60\xf4\x6c\xa5\x37\x2e\x61\x8b\x18\x92\x32\xef\x31\xd8\xb7\x42\xbb\x16\xed\x75\x55\xbd\xbb\xa9\xaa\x9b\x1b\xe6\xf1\x4e\x48\xbd\xe4\xf1\x62\x17\x6e\x6e\xe0\x1f\x6c\xfa\x71\x4e\x96\x4a\xcd\x08\x53\xba\x82\xe2\x6f\x6e\xaa\x7e\xd8\xad\x90\xff\x62\xcb\xbe\x57\x15\x00\x40\x74\xca\x1b\x2f\x14\xe8\xa1\xdb\xa1\x65\xb4\x87\xd4\x48\x0d\xf8\x20\x9d\xa7\x4a\xba\x4e\xe3\xbf\x7a\x90\x0e\x86\x3e\x96\x56\x01\x36\x4b\x8f\x50\xbb\xc1\xc6\xde\x12\xcc\xba\xa1\xef\xd5\x98\xa6\x3b\x2f\x46\x47\xa4\x37\x70\x69\x13\x4e\x82\xad\x46\x78\xe4\x41\xe4\xff\x51\xd8\x30\xfb\xdf\x3c\xf9\x03\xfc\xe7\x56\x3e\xfc\xe5\xcf\xd9\xe9\x2f\x47\x4c\x84\x2c\x1d\x60\x27\x3d\x61\xfd\x44\x1b\x47\x3e\x4d\xe1\x3b\xa8\x2d\x0a\x8f\x4d\x36\x8d\x3c\x75\x96\x8d\xaf\x5a\x7a\x29\x94\xfc\x86\xcd\x95\x0c\x7f\xcf\xd7\x7d\x7b\xd1\xc2\x21\x69\xc4\x5c\x09\x67\x3a\xa0\x4b\x04\x84\x2c\x5c\xf8\x35\x0e\xba\x12\x1d\x35\x80\xb4\xd6\x86\xe7\x7c\x80\x4f\x4d\x63\xd1\xb9\xbf\xbe\x74\xed\x88\xd7\xd0\x93\xd6\x57\xfe\x25\x0c\x39\x5b\xd8\x9b\xb5\x65\x13\x59\xc4\xdf\x19\x07\x73\x1d\x81\xc4\x31\x75\x24\x54\x8b\xbf\x0f\xd2\x32\x2a\x1c\xb4\xc6\xe6\x84\x10\x07\xc5\xf9\x8b\xf2\x9b\x70\xc4\x74\x30\xf6\x19\x71\x69\xc2\xaf\x08\x8d\xd1\x6f\xf2\x52\xf3\x55\x8c\x86\xed\x2e\xf5\xb3\x03\x5a\xdc\xa4\x79\x45\xf7\x50\x28\x88\xad\x4d\x1f\x71\xd2\x1b\xe7\x64\x24\x6c\xd3\x06\xa8\xd0\xf2\x91\xb4\xfb\x18\xb9\xcb\x3e\x53\xa4\xc1\x09\x8d\x35\x3a\x27\xac\x54\x63\x54\x00\x4c\x21\xe6\xa4\x21\xba\x31\xf3\x9f\x92\x7f\xde\x65\x27\x22\x8e\xf5\x18\xd7\x49\xe9\x2a\x9e\x95\xaf\x6f\x13\x15\xb1\x3f\x6e\xd8\x45\x6a\x58\xa6\x94\x05\x42\xe2\xa7\xd2\x40\x60\x67\x3f\x58\xc2\xcc\x52\x6b\xe4\x5e\x63\xb1\x33\x47\x6c\x72\xcf\x59\x77\xe6\xae\xe8\xe5\x6f\xb8\xb2\xd1\x39\x50\x78\x44\x45\x30\xed\x87\x9d\x92\xf5\x06\x76\x43\xe2\x2a\x47\xe9\x13\x94\xdc\x9d\xc2\xae\x34\x95\x76\x8a\x1b\xf4\xa4\x70\xb8\xa9\x78\x63\x19\x18\xec\x57\xce\xe3\x5c\x43\x95\xb6\x6a\x56\x62\x5c\xcb\x6a\x64\x36\x0f\xcb\x27\x57\x9f\x0a\x27\x2c\xdb\x89\x11\xf6\x56\x68\x1f\xe5\x55\x5c\x24\x87\x48\x9d\x35\x01\x86\xc2\x91\xc7\xc4\x60\xd9\x85\x3e\xab\x01\xda\xa8\xd0\x8a\x04\xab\xd4\xa8\x3c\xeb\x99\x74\xa3\x82\x65\xdb\xa5\x15\xc6\x69\x82\x49\x0e\xdd\x1f\xac\x19\xf6\xd4\x26\xb3\xd6\xb9\x2c\xa2\x20\x5a\x38\x2c\xca\xc9\x33\x41\xf1\xe6\x5d\x1a\x13\xd9\x5b\x0d\x67\x16\x43\x69\xed\xc5\xe1\x50\x19\xb5\x83\xce\x05\xb2\xa0\xb0\xb7\x1f\xe0\x6f\x01\xcd\xdf\xf3\x14\x9e\x66\xdc\xf2\x51\xf4\x60\x6b\xd1\x45\xcd\xdf\x46\x9f\x03\xc4\xa8\x38\xe0\x28\xd4\x80\x67\xd3\xc2\x94\xeb\x58\xe6\xf0\xf1\x23\x44\x2f\xce\x46\xd2\xbf\x57\x89\xe7\x85\x8a\xe3\xa0\x1b\x9c\x27\x9d\x46\x2b\x39\xd1\x21\x88\x90\xa2\x64\x31\xea\xcd\xa9\x8b\x70\x4c\xaf\x66\xe6\x7f\x54\xf3\xbf\x7e\x64\xbe\x4e\x2a\xff\xff\xe1\xeb\xd8\x44\xce\xe9\x5a\xea\x65\xdb\x7f\x96\xae\xa5\xae\xd5\xd0\x20\x29\xba\x74\x40\x08\x2e\xd4\x07\xac\xef\xe7\x91\x47\x06\x48\x36\x4e\xc8\xa7\x4b\xda\x15\xd2\xd9\x97\xc8\xec\x10\x7b\x90\xd9\x55\xc1\x05\x8d\x49\x63\xd6\x25\xf5\x06\x94\xbc\xa7\x13\xa1\x92\x7c\xba\xea\x48\x96\x08\xdd\x64\xdd\xc2\x5a\x93\x9e\x93\x56\x91\x2d\xa3\xd4\x43\xaf\xc2\x79\x00\x9e\xa5\xfa\xb4\x2d\x0b\xaa\x8f\x99\xbe\x88\xe9\xa3\xbc\x27\x32\x0b\xed\x3d\x69\xd3\x10\x42\x39\x71\x7d\x9f\xa6\x7a\x1b\x7b\x7c\xaa\xbe\xa2\xe1\xab\x20\x45\x42\x4d\xbd\x5d\x16\x95\xc5\x95\x9a\xa2\x19\xb9\x34\x7e\x8e\x75\x79\xf5\xd3\xdb\x47\x8a\x23\x4a\x91\x0c\x80\x54\x1a\x01\x7e\x47\xbc\x14\xf4\xf1\x28\xfb\x34\xe6\x49\x16\x0a\xa9\x03\x82\x26\xb5\xc0\xc7\x3f\x28\x4f\xeb\x69\x3e\xf5\xc9\xa2\x50\x88\xef\x48\x6d\x69\x3c\x85\x71\x6f\x82\xe4\x8a\x12\x73\x53\x42\x39\x99\x60\x75\x9e\xe5\x25\xd4\xc6\x5a\xac\xbd\x1a\x2f\x81\x4c\x0c\x6a\x81\x98\x49\xb0\x2f\xf8\x22\x72\xf9\x1b\xb7\xc4\x43\x52\xd4\x71\xfc\x5c\x4d\xd3\x3f\xf2\xf0\x6a\xf1\xf6\x6c\xbb\xd7\x39\xd4\xa1\x6a\x4b\x2a\x4c\x56\xd6\xb7\xfb\xf3\x62\x9b\xcb\xd4\x24\xc0\x86\x47\xc9\xd0\xa5\x00\x28\xf7\xad\x3c\xda\x14\x2d\x66\x89\x80\xe9\x06\xc2\x9b\xc7\x4e\xad\x4b\x56\xbb\xe3\x13\x61\xad\x84\x15\xe9\x32\x83\x79\xad\xb6\x7c\xec\x1b\x7b\x56\x25\x62\xed\x00\xd6\xa1\xd0\x73\x5e\xc2\x23\xda\x71\x79\x18\xcc\x33\xe7\x17\x05\x6e\x79\xd2\x8b\x36\x38\x93\x0d\xb6\x52\x63\xe9\x49\xe8\x82\x66\xf7\x1b\x46\x4b\x99\x0b\xc3\x65\x40\xee\x74\x97\x5d\x10\x15\xf7\x42\x45\x69\x44\x66\xe7\x6c\xba\x7c\x8d\x42\x6f\xa6\xab\x94\xc7\x50\xce\x0e\x7e\xc8\x02\x78\x93\xf9\x71\x53\xc0\xfe\x05\xa8\x7f\x39\xe8\xa3\xd1\xe9\x76\x24\x6c\x5f\x4c\x68\xb8\xea\x9a\x44\xa4\xfc\x36\x97\x2e\xe9\xf2\xd4\x9c\x1c\x69\x3f\x8a\x22\xe9\xd3\x05\x82\x93\xa3\xc7\x85\x0a\x7f\xba\xfa\x56\xcf\x03\x85\xd6\xdf\x06\x2d\xb1\x9d\xd4\x3e\xdb\x77\x79\xd5\xd4\xbb\x20\x49\xad\x24\xf7\x8f\x25\x34\x72\x17\x4c\x96\xb1\x99\x31\x18\xfc\x31\xfa\x6b\xb5\x55\xcc\xa8\xe3\xe7\x67\x54\xd4\xa7\x20\x9d\x26\x4d\x94\x28\x44\x05\x81\x29\x34\x18\x0b\xf8\xfb\x20\x54\xf8\xb5\x22\xa8\x9e\x94\x51\xf0\xa4\x4e\xa4\x63\x09\xa7\x89\x74\xbb\x50\xd3\x6d\xd0\x76\x87\xad\xb1\xb8\x65\x8d\x82\x3e\xee\x84\x1a\xf2\xa2\x8b\x3e\xb3\x66\x3c\xde\xe7\xee\x70\x2f\xb5\x26\x14\x2d\xae\x48\xa7\xcb\xd3\x95\xd9\xcf\x33\x32\x3b\x78\x55\x3e\x7e\x0b\xef\x9f\xce\xf6\xdf\x53\x87\x3b\x6b\xcc\x7c\x25\x16\xe5\xcf\x94\xd9\xde\xe2\x91\xef\x2b\x0b\xf4\xbd\x4c\xc3\xae\x68\x22\xf0\xe2\x1e\xcf\x10\x2b\xe8\x49\x2f\xac\xe8\xd0\xc7\xeb\x6f\xd1\x34\x73\xf1\x53\x94\x41\xa4\xb9\x05\x12\xe2\x25\xfc\xa3\x25\xf9\x22\x1d\x74\x61\x63\x5c\xdb\x86\x3f\xa5\xc7\xa5\x6c\x7a\x4c\x2b\x3d\xbd\x29\x6e\xe8\x9e\xdd\x8d\xe9\x6e\xe8\x45\x27\x8a\xa0\x6f\xbe\x74\xbd\x1f\xd7\xda\xec\x27\x3d\x86\xbb\xd6\xf4\xe9\x61\x7e\xd2\xe6\x8b\x51\xb6\x10\x3f\x0d\x95\xbd\x69\x76\xb3\x72\x10\x93\xcb\x1f\x3f\xc2\x4f\xcb\xe6\x41\x3b\xb2\xf4\xe5\x6a\x8d\x73\x56\xb6\xe4\xfc\xd0\x36\x49\x53\x78\x45\x8d\x40\xe3\x49\x8d\x49\xcb\x45\x27\x39\xc1\xfc\x61\xe7\x1b\x5a\x73\xae\x49\x52\xa6\x7e\xc4\xfb\x5d\xe9\xa6\xfe\x5d\xca\x04\xe9\xe0\x37\x36\x85\x96\x21\x19\x0e\xcc\x43\xf9\xd9\xec\xec\xcb\x57\x15\xba\xf5\x52\x46\x88\x9d\x39\xe2\x26\xdf\x95\x9c\x8f\xe0\x4f\x40\xda\x30\x30\x82\x6d\x6c\xc8\x96\xd1\xc5\x1d\x55\xa4\x9c\xce\xf0\x47\x88\xe5\xad\xf1\x2f\x43\xd7\x8d\xf0\xfd\x47\x05\xff\x0b\x00\x00\xff\xff\xc6\x72\x1e\xe7\x82\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x44, 0xba, 0xe4, 0xa7, 0x45, 0x70, 0x84, 0xd3, 0x34, 0x8c, 0x59, 0xb7, 0x19, 0x8d, 0xb9, 0x63, 0x5b, 0x2d, 0xc7, 0x8c, 0xa2, 0xfa, 0xc8, 0xd, 0x16, 0x7e, 0x96, 0x2d, 0xad, 0xec, 0xfd}}
	return a, nil
}

var _tokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xe3\x38\x14\xbf\xfb\x53\x3c\x69\xa5\xa5\x45\x90\xa2\xd5\x6a\x0f\x88\x15\xbb\xda\x1d\x8e\x73\x40\xcc\xcc\x71\xf4\x6a\xbf\x34\xa6\xa9\x1d\xd9\x2f\x0d\x15\xe2\xbb\x8f\x9e\x93\xb8\x09\x94\x19\xb8\x90\xa4\xf6\xef\xdf\xfb\xd9\xab\xf3\x73\xa5\x7e\x83\xbb\xd6\x6d\xec\xba\x26\x78\xf0\x5b\x72\x70\xe7\x43\x87\xc1\x58\xb7\x81\xff\xbc\xe3\x80\x9a\x95\x7a\xa8\x6c\x04\x3d\xbc\x42\xac\x7c\x17\xa1\xf2\x1d\xa0\x03\xd4\xda\xb7\x8e\x41\xfb\xb6\x36\x10\x89\xa1\x6d\x00\x41\xb7\x91\xfd\x2e\x83\xf7\xd8\xf7\xa4\xc9\xee\x29\x28\xf6\x80\x75\xed\x3b\xe0\x8a\x76\xc0\x1e\xca\x9e\x15\x58\xd6\x45\xf9\x82\x60\x6c\x59\x52\x20\xc7\x99\xa3\xab\xc8\xd1\x9e\x82\x6c\x3b\x40\xe8\xd1\x86\x3d\x85\xa8\xa4\x03\x68\x74\xd0\xb4\xeb\xda\xc6\x0a\x58\x64\x0f\x86\x28\x40\xa0\xe8\xdb\xa0\x09\x30\x02\x66\x31\xa0\xb1\xc1\xb5\xad\x2d\x1f\xe0\xb1\x8d\x0c\xb5\xdd\x12\x20\x7c\xc5\xb6\xe6\x0b\x85\xce\x08\x1d\x44\x72\x82\x61\x3c\x45\x77\xc6\x40\x7b\x72\xe0\x88\x44\x32\x6c\x9d\xef\xc0\x32\xd8\x78\x14\x5d\x28\xf5\xad\x22\x37\x8d\xa8\x43\xc7\xc9\x9b\x0e\x84\x2c\x1c\x59\xdb\x45\x6f\x49\x63\x5d\x27\xb6\x7e\xc5\x67\xea\xf2\x0a\x55\xb6\x4e\xb3\xf5\x82\x68\xa0\x09\x7e\x6f\x0d\x09\x69\x67\xb9\x4a\x7b\xb2\xa1\x40\x49\x82\x26\xe0\x0a\xb9\x47\x16\xee\x49\xd0\x8a\x2b\xb2\xe1\x18\x77\xa1\xd4\xf9\x4a\x29\xbb\x6b\x7c\xe0\x57\x53\x2b\x83\xdf\xc1\xd5\xd3\xd5\x1f\x4a\x35\xed\xfa\x58\x83\xf4\xeb\xa4\x2e\xcf\x4a\x01\x00\xac\x56\xf0\x69\x2f\x53\x4b\xe4\x36\x02\xed\x2c\x33\x99\x34\xbd\x91\x11\x03\x81\xa1\xc6\x47\xcb\x7d\x84\x62\x80\x31\x6c\x88\xc7\xb9\x86\x84\x26\x8c\x94\xe0\xc6\x24\xcc\xff\xfd\xbe\x05\xee\x24\xd5\x6b\xf8\x72\x67\x9f\xfe\xfa\xf3\x22\xe9\xbc\x86\x7f\x8d\x09\x14\xe3\xed\x52\xe5\xfd\x79\xee\x39\xcc\xeb\xb9\xc5\x22\x47\x37\x78\x18\x7c\xa4\xda\xdb\x28\xca\x03\x25\x89\x53\xcd\xc9\x48\x67\xeb\x1a\xd6\xa9\x1e\x5c\xcc\xf7\x12\xf0\xa1\x21\xb0\xce\x58\x8d\x4c\x71\x08\x24\x65\x82\xd3\x21\xf9\xf4\x3a\x31\xdd\x43\xe4\x47\xd4\x9a\x62\x5c\x44\xaa\xcb\x25\xec\x51\x06\xac\x6d\x63\x49\xcc\xff\xfe\x7c\xda\xc9\xcb\xcc\xc8\x20\xfb\x14\xf8\x6a\x25\x59\xf4\xcd\xea\xeb\x82\x5b\x8a\x63\xff\xc1\xaf\x1f\x49\x73\x3a\x31\x0e\x30\x6c\xda\x5d\x3a\x90\xce\x8c\x4d\x8a\x53\x24\xcb\xe3\x2c\xb3\xc4\xb3\x38\x20\xb5\x51\x4a\x92\x8e\x12\xfb\x40\xe6\x98\xc0\x29\x59\x32\xb7\xb2\x75\xa3\xf2\x45\x3f\xdc\x7f\xe6\x66\x13\xf0\x12\x9e\xf3\x2e\xf9\x93\xba\xbd\x5f\x16\xc1\x29\xd6\x58\xa3\xd3\x34\x56\x46\x82\x2d\x7c\xe7\x28\xdc\x16\xd8\xd7\x67\x39\x83\x4c\x0b\xb2\xa3\x62\xae\xe9\xe6\x52\xfe\x1f\x37\xcc\x93\xd7\x15\xba\x0d\xdd\x8f\x7b\x87\xf7\x38\xcf\x08\x7c\x99\x3e\x94\xf9\xaa\x1a\x52\x1c\x8e\xb9\x39\x2e\xfd\x59\x56\xaf\xb8\x16\xdf\xc1\x51\x77\xff\x81\xae\xbc\x8e\x70\xee\x17\xfe\x9e\xe1\x9c\x32\x6a\x9d\xe5\xc5\x47\x5a\xf9\x4b\xa6\xb7\x46\x5f\xd4\x84\x4c\x12\x7d\x73\x35\x0e\x9f\xa4\xb4\x8e\xba\xd9\x85\x3f\x9e\xb1\x7c\x49\xbe\x93\xe8\x90\x66\x4e\xf2\x0d\xc7\xc7\xdc\x49\x43\x33\xfb\xd1\x69\x20\x6e\x83\x83\x9b\xcb\xe1\xe2\x3f\x89\x9a\x1f\x97\x83\xe1\x17\xf5\x23\x00\x00\xff\xff\xb4\xb9\x1f\xb9\xa2\x07\x00\x00"

func tokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_tokenforwardingCdc,
		"TokenForwarding.cdc",
	)
}

func tokenforwardingCdc() (*asset, error) {
	bytes, err := tokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x6b, 0xd6, 0xf9, 0x4b, 0x43, 0x71, 0xdf, 0x55, 0x17, 0x52, 0x92, 0x48, 0x1, 0xb8, 0x4d, 0x9e, 0x80, 0x93, 0x35, 0xaf, 0x87, 0xe0, 0xbe, 0xe, 0x4e, 0xee, 0xb, 0x76, 0x9, 0x36, 0x5d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"CustodialDeposit.cdc": custodialdepositCdc,
	"FlowToken.cdc":        flowtokenCdc,
	"FungibleToken.cdc":    fungibletokenCdc,
	"TokenForwarding.cdc":  tokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"CustodialDeposit.cdc": &bintree{custodialdepositCdc, map[string]*bintree{}},
	"FlowToken.cdc":        &bintree{flowtokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc":    &bintree{fungibletokenCdc, map[string]*bintree{}},
	"TokenForwarding.cdc":  &bintree{tokenforwardingCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
