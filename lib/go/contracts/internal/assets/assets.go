// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleToken.cdc (7.43kB)
// ../../../contracts/FungibleToken.cdc (7.341kB)
// ../../../contracts/utilityContracts/PrivateReceiverForwarder.cdc (2.599kB)
// ../../../contracts/utilityContracts/TokenForwarding.cdc (2.351kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x4b\x6f\x1b\x37\x10\xbe\xfb\x57\x4c\x73\x68\x65\xc4\x96\x5d\xa0\xe8\xc1\x70\x1e\x76\x63\x17\x41\x5b\xb7\xc8\xa3\xbd\x9a\xbb\x3b\x92\x58\xef\x92\x02\xc9\x95\xac\x18\xfe\xef\x05\x87\xe4\x2e\x49\xed\xca\x76\xdc\xe4\x92\x48\xe2\x3c\x38\xfc\xe6\x9b\x8f\x0c\x6f\x96\x52\x19\xb8\x6c\xc5\x9c\x17\x35\x7e\x92\x37\x28\x60\xa6\x64\x03\xc7\xb7\x97\x9f\xaf\x7e\x7d\x7f\xfe\xfb\xc5\xa7\x3f\x7f\xbb\xb8\x3a\x7b\xf7\xee\xc3\xc5\xc7\x8f\x7b\x7b\xcb\xb6\x80\x52\x0a\xa3\x58\x69\xe0\xe2\x96\x35\x4b\x6f\x76\x92\x79\xb9\xdb\xdb\x03\x00\x38\x3a\x3a\x82\x4f\xd2\xb0\x1a\x74\xbb\x5c\xd6\x1b\x90\xb3\xc4\x4c\x03\x17\x80\xb7\x5c\x1b\x14\x25\x92\x89\x0d\xb1\x62\x0a\x8c\x35\xfb\x48\x56\x27\xf0\xf9\x92\xdf\xfe\xfc\x53\xec\xd3\x1a\xbf\x17\xdc\x70\x56\xf3\x2f\x58\x85\x5f\xfa\x15\x0b\x04\x5c\xa1\x30\x60\x16\xcc\x00\xd7\x80\x0d\x37\x06\x2b\x58\x2f\x50\x80\x59\x60\xbf\x11\xae\xa1\x54\xc8\x8c\x77\x63\x33\x70\xa6\x5b\x61\x26\xdc\xfd\x3b\xcd\x6b\x3f\x4f\xec\x1f\x6e\x16\x95\x62\x6b\xf1\xe4\xb4\x5c\x51\x98\x42\x58\x07\x1f\xee\x44\x18\xfc\xcd\xda\xda\x0c\x26\xd8\x85\x9b\xb0\x46\xb6\xc2\x84\xbc\x0e\xc8\xf4\x04\xce\xaa\x4a\xa1\xd6\x6f\xb6\xf2\x7c\x87\x4b\xa9\xb9\xf9\x8a\xf2\xf5\x79\x56\xc1\x07\x18\xb9\x33\xcb\x2e\xd8\x56\x96\x46\xee\xc8\xf1\x0f\x2e\xbe\x22\x41\x81\xeb\x38\xc9\xa6\x77\x92\xa7\xe5\xfc\x67\x39\x6d\x65\x71\xde\x2a\xf1\xcc\x32\x69\xa3\xe4\x66\x24\x09\xe7\x7e\x3c\x09\x4a\x52\xfd\x12\x81\xf4\x09\x59\x30\xaa\x06\x95\x40\x81\x42\x2d\x5b\x55\xe2\x38\xe8\x93\x58\x13\x56\xd7\x72\x8d\xd5\xd9\x58\x66\x94\xf9\xf3\x32\x2b\xc8\xc5\x23\x32\x4b\x62\x4d\xa2\x24\x7a\xd0\xc5\xc1\x2f\x58\xb9\x80\x56\xa3\x02\x6d\xa4\x42\x0d\x4c\x00\x17\xda\x30\x51\xa2\x25\x22\x29\xea\x0d\x11\x01\x99\x5b\x26\x32\x0b\xe4\x6e\x35\x9b\x63\xb2\x89\x59\x2b\x4a\xc3\xa5\x23\xac\xde\x86\x89\x0a\xe6\x72\x85\xf6\xf4\xa0\x70\xde\x96\x0a\xe9\xfb\xa5\xd4\xc6\x72\x4c\xc5\xc9\xb0\x73\xc7\x45\xc6\x95\x81\x90\x36\x04\x94\x92\xd5\x35\x56\xd3\x24\x7a\xb9\xc0\xf2\x46\xc3\x82\x2d\x97\xb6\x6a\x06\x54\x2b\x0c\x6f\x90\x4c\x71\x85\x0a\x58\x97\x21\x95\x2f\xf5\xd1\xf9\xfa\xe0\x4b\x6c\x57\x08\xb7\xff\x02\x43\xb1\xc3\xce\x2c\x2d\xe2\xad\xb1\x15\x4a\x58\x92\x4e\xd0\xa6\xd9\xb9\x73\xb8\x9e\x71\x41\xc6\x07\xa0\xa5\xfd\x5d\xd1\x09\x0a\x09\x6b\xb6\x81\x99\xb4\xb9\x35\xac\xe6\x25\x97\xad\x76\xc7\x61\xa4\x8f\xe9\xaa\xd8\x97\x46\xb6\x3e\x2c\x17\xc0\xb8\x9a\xc2\x19\xe8\x25\x96\x9c\xd5\x1e\x95\x3d\x48\x04\x62\xa5\xad\xa7\xa2\xcf\xc1\x48\x42\x79\xe7\xae\x27\x81\xb4\x14\x16\x51\x9d\x23\x4a\x21\x1b\x5f\xd3\xbf\x94\x5c\xf1\x0a\xd5\x41\xf6\xfd\x07\x2c\x91\xaf\xb6\xbf\x3f\x67\x35\xa1\xca\x8f\xbd\xf8\xec\x68\x8e\x41\xe1\x17\xb8\xdd\x69\x58\x75\x88\x8d\x67\x9e\x5f\x95\xce\x3b\xe7\x0c\x78\x37\x85\xe8\x58\x82\x43\x0b\x86\xb0\x15\x2a\xaa\x85\x80\xc5\x46\x67\x6b\x0d\x27\x99\xe7\x7d\xb8\xeb\x7e\xb7\x7f\x34\xd6\xb3\x69\x70\xf9\x2a\x38\xef\x96\xdc\xa7\xdb\x0a\xa3\x29\xfe\x32\x59\x70\x19\xb0\xe8\x30\xc3\x6e\x5c\xf3\x39\x7a\x03\xe6\x3e\xa8\x79\xdb\xa0\x30\x89\xa1\xed\x9b\xe0\x5d\x3b\x6b\x6f\x44\x43\xb0\x6b\xbc\xe9\x68\xe8\xf7\xc6\x63\x4b\x7b\x76\x31\x68\x55\x0e\x53\x1b\xdf\xb2\x81\x88\x5a\xed\x10\xb3\x90\x75\x95\x78\xb0\x41\x1a\x29\x70\xd3\x2d\x2d\x90\x8b\x39\x18\xc5\x84\x9e\xa1\x52\x58\x4d\x6d\x18\x85\xa6\x55\x42\xd3\x7a\x81\xeb\x7a\x93\x78\x09\x4d\xe5\x83\xca\xa4\xb5\xc8\xb1\x6b\x52\xdb\x34\xdc\x50\x3f\x16\xd1\x30\x4d\x7c\x61\xad\x71\x6d\x1b\x6b\x78\xdb\x16\x3d\xb3\x56\x74\x85\xcb\xc7\xc8\x09\xbc\x4d\xd1\xea\x72\xda\x89\x80\xe4\xe3\xa1\x3f\x84\xc4\xc0\x12\xf9\xa8\xfe\x70\x7f\x07\xfd\x41\xce\xe4\x5a\xa0\x7a\x33\x65\x6e\xce\xef\x27\xbe\x5c\x29\xe1\xf4\x30\xa6\x85\x1e\xb3\xce\xdb\xfe\x18\x1c\x7d\xd1\x9e\x86\x46\x7f\x30\xb2\xf8\x17\xcb\x1c\x92\x04\x43\x56\x55\x3a\x71\xc3\x8d\xee\xba\xce\x9f\x67\xd2\xd5\x08\xb4\x45\xfd\x08\x84\x72\x0d\x7e\xae\x5a\x4f\x5e\x1a\x90\x0b\x6d\xc3\xbb\xd4\x0a\x2c\x59\xab\xb1\x07\x7d\xda\x83\x36\xe5\x08\xdc\x16\xc6\xa8\x42\x26\x9e\xf5\x88\x80\xc8\xf6\x87\x3e\xf7\x05\x4b\xf7\x55\x20\x0a\x8b\x4c\xdd\x36\x58\xd1\xd6\x89\xc4\x67\x92\x86\x91\x87\xa5\x17\x2f\xbb\x01\xe8\x0f\x62\xe2\x4e\x7d\x08\x74\x39\xef\xd4\x68\x1c\x15\xc2\xe9\xa1\xd7\xb9\xfa\x3b\x78\x1b\x5f\x11\xa6\xe9\xde\x1f\xc2\xea\x4b\xe7\x6f\x9a\x53\x58\x06\xd9\x6d\x31\x9a\x98\x39\x4d\xfa\x20\x6e\x13\x1b\x78\x05\xc7\xd3\xe3\xe4\xf7\x70\xb2\x29\xdb\x47\xf0\xf5\x0b\x26\x79\x5d\x92\x02\x44\x37\x21\x78\x35\xfe\xd3\x61\x52\x88\x28\x5a\x14\xb3\x67\xa6\x8b\x66\x69\x36\xc3\xba\x29\xed\x97\x94\x4d\x1d\x34\x2d\xd3\x00\x8b\xe1\xff\x05\x95\xec\x75\x81\xa8\x3a\x76\xe4\x3d\xf9\xb1\xba\xb6\x3c\xea\x49\xd0\x0e\x77\x52\x03\x4d\xab\x1d\x19\xba\xc9\x18\x74\x4c\xe2\x8d\x04\x1c\x79\x71\x7e\x3b\x62\xcd\x45\x9b\xfd\x42\xaa\xca\x89\x0c\xea\x31\xf7\x7b\xef\xad\x2c\x69\x9e\x38\xe5\xc0\x8a\x9a\x9a\x59\xb9\xb9\x1e\x10\xac\xbb\x39\x4d\x8d\x04\x66\xb3\xc4\x6d\x09\x61\x21\x9f\x17\x73\x62\xd9\x36\xe7\xd7\x07\xe8\xed\x78\x7a\xbc\x1f\x1f\x52\x22\x4f\xce\xaa\x86\x0b\xae\x8d\x62\x46\xaa\x5c\x5f\x38\x7f\x57\xb8\x76\xea\xe8\x91\x0c\xd8\x9d\x68\x74\x4c\x83\x77\x84\x9d\xcd\x9e\xc5\x1e\xb9\x28\x9c\xc0\x5b\xaf\xdc\xee\xb6\x5b\x71\xe7\x4d\x23\xf9\xb8\x7b\x5c\x0c\x67\x30\xe2\xe0\x7e\xa4\x84\xee\x72\xf1\xec\x12\x66\x97\x99\xc7\x95\xd0\xc5\x26\xec\xb8\x7f\x0e\x55\x2b\xbf\xfd\xec\xaa\x48\x70\x38\xce\x02\x11\x62\x86\x6e\x08\x61\x30\xba\x91\x49\x4d\xc0\x2c\x12\x43\xff\xb8\x1b\x84\x1d\x3a\x41\x75\x3f\x4e\x6d\x77\x60\xd8\xd2\xc9\x5e\xe7\xd9\xc6\x73\xb7\xe6\x70\xdf\x08\xa8\x4c\x87\x66\x27\xf4\x21\xd2\xcf\x83\x18\x4c\x43\x59\x3b\x37\x02\x1e\x79\xd4\xd6\x40\x47\x9b\x3b\x20\x65\x60\x13\x6b\x02\xb3\x99\xe8\x85\xeb\x60\x4b\xcf\x46\x3a\xb1\x19\xe3\xc2\x9d\x30\xe9\x53\x1e\x50\x76\xdb\xa3\x32\xc3\x8e\xbd\x8e\xa6\xdf\xd8\x3f\xbe\xda\xaf\x2d\xf9\x9c\xc0\x0b\x57\x31\xff\x4c\xe2\x18\xb9\x40\x98\x13\x98\x94\xad\x83\x20\x86\x7f\x31\xe6\xe7\xd4\x4f\xe1\xec\x00\x46\xfc\xd6\xa8\xb5\x73\x6a\x6b\x11\x0e\xd5\xb9\x4a\x43\xdc\x3f\x7b\x2a\xbe\x1c\xd2\xae\xdb\xb9\xc2\xd0\x06\x1e\x14\xbe\xd9\xdb\x51\xae\x53\xe1\x59\xd2\x96\xee\x6d\xc3\xac\x3a\xa4\xdd\xf3\xed\x24\x9f\xc7\x79\x20\xa2\xbd\xe7\xf3\x80\x25\xbf\x87\x39\xa0\xa3\xb8\x54\x86\xb6\x4a\x3c\xa9\x31\xbd\x76\xea\xb5\x7c\x78\xdb\x39\x00\x9c\xcd\xb0\x34\x7c\x85\xf5\x86\xfc\xd2\xf5\xad\x97\xc5\xa3\x01\xae\xa4\xc1\x13\xa7\xec\x9d\xc8\x88\x1e\xf0\x58\x6b\x64\xc3\x0c\xb7\xad\xbb\x01\xdd\x16\xf4\x2a\x82\x55\x77\x33\x4d\x2f\x91\xf1\xa3\x77\xf2\x64\x44\x69\xb7\xa5\x91\x6a\x77\xd7\xf7\xf5\xf8\xe6\x7a\xda\x5a\xb1\x80\x9b\x71\xf9\x3c\xac\x66\xb3\x96\xc8\x5e\x32\xb7\xf1\x1d\xe1\x8f\x10\x1e\x6f\x81\x80\x9c\x36\xf6\x8f\xc7\xc7\x56\x55\xc7\x2f\x21\x6e\x04\x46\x25\x25\x39\x9a\x13\x71\x34\x49\x48\x41\xb2\x15\x5a\x31\xca\x45\xf2\xbe\xe7\x5c\xee\x0d\xd6\x6f\xb8\x63\xf3\x1c\xf7\xd3\xec\x7d\x5f\x4c\x6d\xbc\xc9\xe9\x21\x39\x73\xb7\x89\x23\x1f\xf7\x08\xa3\xd3\x70\xa7\x38\xb4\x3d\x66\x91\x50\xf3\x12\x4a\xb6\x64\x05\xaf\xb9\xd9\x84\xe9\x41\x6a\xb8\x8a\xdf\x33\xe8\x29\x0f\x6f\x97\x52\x63\xdc\x3e\xb4\xfa\xda\x8b\xda\x6b\x68\xd0\x2c\xa4\xbd\xde\x29\xd9\xce\x5d\xc5\xae\xc3\x8b\xd6\x35\xd0\x94\x9d\xb1\x72\xb0\x30\xc9\xde\x6a\x2e\x6e\x4e\xbf\xbf\x1b\x7e\x1a\xbb\x7f\x3d\x49\xb0\x71\xe4\xb6\x91\xec\xba\x7b\x46\x4b\x56\x1a\xa6\xe6\x68\x76\x15\xaa\x5b\xfe\x8d\x2b\xe6\x0f\xfb\x1a\x66\x1c\xeb\xac\x60\xe7\xe1\xb7\xa7\xd6\x6b\xbb\x09\xef\x06\x1f\x11\x1f\x53\x40\xbf\xf4\xff\xa8\x1f\x35\x3f\x51\x7a\x0f\xf9\xe4\xd2\x31\xd9\x8d\x70\xb2\xdd\x81\x70\xf2\x95\x9e\xd7\x85\xa5\x0b\x26\xe2\xff\x19\xd0\x0b\xb9\x8e\x24\x5f\xf7\xe8\xbc\x66\x3a\x7a\xf9\xac\x86\x4a\x1d\x91\xcf\x8e\xff\xa9\x1b\x6e\xdb\xfb\xbd\xfb\xbd\xff\x02\x00\x00\xff\xff\x71\x71\xa2\xf8\x06\x1d\x00\x00"

func exampletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_exampletokenCdc,
		"ExampleToken.cdc",
	)
}

func exampletokenCdc() (*asset, error) {
	bytes, err := exampletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x5c, 0x4d, 0xa, 0x85, 0xbd, 0x97, 0x7b, 0x75, 0x21, 0xc6, 0x66, 0x3, 0x70, 0x7, 0xe6, 0x1a, 0x43, 0x4, 0xdc, 0x11, 0xb9, 0x6c, 0xe7, 0x93, 0xcb, 0x18, 0xb, 0xbc, 0xfe, 0x96, 0x20}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x5f\x6f\xdc\xba\xf1\x7d\xd7\xa7\x18\x24\x0f\xb1\xf3\xdb\xac\xf3\x03\x8a\xa2\x30\x70\xdb\xe6\xb6\x37\x40\x5e\x8a\xa2\x75\x7b\x5f\x97\x2b\x8d\x76\x09\x53\xa4\x2e\x49\xed\x5a\xb9\xc8\x77\x2f\x66\xf8\x4f\xd2\x2a\xf6\xe6\xcf\x4b\x6c\x49\x3c\x9c\x39\x9c\x39\x3c\xa4\xef\xde\xbe\xad\xaa\xd7\xf0\x70\x44\xf8\xa8\xcc\x19\x3e\x0e\xfa\x20\xf7\x0a\xe1\xc1\x3c\xa2\x06\xe7\x85\x6e\x84\x6d\xaa\xea\xf5\x6b\xd8\xa5\x97\xfc\x6e\x07\xb5\xd1\xde\x8a\xda\x83\xd4\x1e\x6d\x2b\x6a\xac\x2a\x02\xca\xbf\x82\x3f\x0a\x0f\x42\x29\x68\x13\xac\x67\xd8\x34\xd2\xc1\xd9\x0c\xaa\x81\xa3\x38\xd1\x2b\x7a\xde\x1a\xdb\x81\x37\xdb\xea\x53\x0b\x02\x06\x87\xd6\xc1\x59\x68\xef\xe8\x7d\x83\xbd\x32\x23\x08\xd0\x78\x5e\x40\x6d\xc0\x1f\x51\xda\xfc\x7b\x15\x90\x35\x62\x43\x23\x65\xd7\x2b\xec\x50\x7b\xfa\x0c\x66\x89\x94\x78\xb7\x1c\xff\x04\x64\x11\x5e\x6b\x14\x71\x44\x09\x11\x8a\x1d\x14\x3a\x10\xba\x01\x2d\x3a\xa9\x0f\x15\xa7\xeb\x67\x0c\xb8\x1e\x6b\xd9\x4a\x74\xdb\x40\xe1\x7f\xc5\xa0\xfc\x0e\x2c\x3a\x33\x58\x22\xec\x17\x51\x1f\x41\xd4\xb5\x19\x38\x36\xe1\xc1\x9c\xb5\x0b\xc9\x25\x7a\x52\x12\x1c\x87\xa0\x80\x69\x5d\x6a\xac\x4c\xcb\xd3\x31\x68\xc6\x04\xe7\x8d\xc5\x06\xa4\x8e\x94\x24\x74\x7a\x2e\x0e\x31\xcb\xe5\xa0\xa3\x70\xd0\xa1\x3f\x9a\xc6\x41\xce\xc3\x9c\x35\x5a\xce\xd0\xf8\x23\xda\xb8\x1c\xb5\xd0\x50\x0b\xa5\x62\x4a\xff\xb4\xe6\x24\x1b\xb4\xbb\x0d\xec\xfe\x85\x35\xca\x13\xff\x4c\xa3\x76\x3f\x0b\x45\x81\x96\x84\x0b\x35\x8e\xc3\x70\xd3\x27\xd0\x60\xad\x84\x45\xe8\x2d\xbe\xab\x8d\x6e\xa4\x97\x46\x07\x8a\x7b\xe3\xfc\xf4\x19\xc7\x68\xd1\x79\x2b\x6b\x5f\x51\xb0\xf8\x84\xf5\x40\x2f\x21\xd2\xd2\x0e\xba\x0e\x1f\x07\x2a\x42\xca\x21\xfd\x11\x68\x1e\x87\xbd\xb0\xc2\x23\xec\xb1\x16\x03\xc5\xe2\xe1\x20\x4f\xe8\xf8\x73\xca\x96\x7f\x10\x7b\xa9\xa4\x1f\x69\x09\xdc\x51\x58\xac\x04\x58\x6c\xd1\xa2\xae\xb9\x2e\x02\xcd\x81\xd0\xb0\x84\x5a\x8d\x80\x4f\xbd\x71\x11\xaa\x95\xa8\x1a\x57\x22\xaa\xa4\x06\xa3\x11\x8c\x85\xce\x58\x4c\x11\x17\x2a\xb6\x55\xf5\x89\x5a\xc7\x99\x18\x50\xa0\x7e\x11\x4d\x27\x1e\x11\xea\xc1\x79\xd3\x65\x86\x23\x35\xb9\xe0\x89\x9b\x39\xcb\xd4\x48\x06\x4e\xc2\x4a\x33\xd0\xd7\x52\x1f\x1c\x9c\xa5\x3f\x32\x7c\xa8\xbc\x6d\xf5\xd1\x58\xc0\x27\x41\x30\x1b\x10\xd0\x8a\xa1\x46\xcf\x6b\xbf\xc7\x82\x8e\x0d\xec\xc7\xd4\xb7\xdc\x03\x4c\x07\xa4\xa2\x98\x35\xd7\xcf\x23\x0c\x4e\xea\xc3\x24\x56\x5a\xda\x12\xda\x26\xa6\x69\xda\x45\x8b\x66\xc1\xa8\x28\x00\x87\xba\xe1\x91\x36\x94\x5b\xea\x96\x1e\xd1\xbe\xf3\xe6\x1d\xfd\xbf\xe1\x8c\xcc\xe0\xa9\x6b\x68\x4e\x12\x01\x9a\x88\xb5\x81\x92\x15\x50\x23\xa1\x2a\x50\xd8\x1c\xd0\x82\xeb\x84\xf5\x79\xaa\x2d\x3c\x98\x30\x53\x44\xf7\x06\x84\x2e\x7d\xb0\xa9\x82\x3c\xc5\x1e\x75\x44\xc9\xc8\x93\x36\x56\x9c\x27\x54\x42\x6b\x4d\x37\xad\x11\x96\xaa\xd0\x42\x5c\xb8\x0d\xf6\xc6\x49\x9f\xab\x03\x8c\x9e\xcd\xf4\xc6\xa5\xda\x22\x85\x24\xe6\x3d\x06\x7c\x2b\xb4\x6b\xd1\x6e\xab\xea\xed\x5d\x55\xdd\xdd\xdd\xcd\x69\xa3\x27\xfc\x74\x45\x95\xbf\xaa\xc8\x79\x69\xb7\x3c\xbc\x1f\xf6\x2b\x42\xbf\x58\x9e\xdf\xab\x0a\x00\x20\x4d\xe5\x8d\x17\x0a\xf4\xd0\xed\xd1\x72\x69\x07\x1e\xa4\x06\x7c\x92\xce\x53\xdb\x6c\xf3\x80\x4f\x1e\xa4\x83\xa1\x8f\x8d\x34\x29\x2d\x4b\x8f\x50\xbb\xc1\x62\x91\xa4\x80\xed\x86\xbe\x57\x63\xc6\x70\x5e\x8c\x8e\x74\x6e\xe0\x6e\xa6\xd2\x08\x80\x8d\xf0\x98\xbe\xe2\xff\x29\x9d\x93\xb0\x01\xe6\xdf\x8c\x72\x0f\xff\xf9\x28\x9f\xfe\xf8\x87\x49\x0e\x1c\xef\x27\x2d\xbd\x14\x4a\x7e\xc6\x66\x06\x91\xb2\xc4\x13\x26\xc9\x96\x0e\xb0\x93\x9e\xba\xe1\x4c\x4b\x4b\x81\x16\xd2\x1c\xd4\x16\x85\x5f\xc0\x50\x24\x01\xe2\x62\xba\x1b\x19\x7e\x9e\xc7\x77\xbb\x0c\xf0\xd7\x58\x6b\xfa\x9b\xc3\x0b\xeb\x41\x0a\x98\xea\x55\x87\x2a\x15\xa1\xd2\x9e\x0d\x34\x4f\x7b\x23\x3a\xda\x57\x52\x7c\x1b\x86\xb8\x87\x0f\x4d\x63\xd1\xb9\xbf\x5c\xc4\xfb\xf7\x50\xe7\xdf\x41\x67\x89\xb7\x49\x18\x54\x8b\xe6\xaa\x78\xf3\xb4\x17\xf1\x7a\xb3\x1a\x6d\xd2\xae\xd5\x30\x17\x6d\x84\x24\x7c\x75\x54\x79\x8b\xbf\x0d\xd2\x72\xf1\x3a\x68\x8d\xcd\xec\x92\x30\x26\x90\x85\x28\x94\x7a\x67\x91\x1a\xfb\xd2\x1a\xd3\x16\x69\x0c\x3a\xd0\x26\x4f\x38\x9f\xcb\x68\xd8\xed\xd3\x56\x7b\x44\x8b\x9b\x3c\x76\xb2\xb3\x29\x14\xb4\x93\x98\x3e\x56\x68\x6f\x9c\x93\x71\x33\x31\x6d\x28\x52\x0a\x22\x6e\x28\x7d\xa4\xc1\x95\xd0\x29\xe3\xc6\x70\x1c\x1a\x6b\x74\x4e\x58\xa9\xc6\xe8\x4f\x58\xe0\xcc\x59\x43\x8c\x64\x7b\xb1\x2a\x97\x26\xa0\xec\x13\x51\x42\xd2\x54\x59\x47\xdd\xb0\x8f\xc2\xb4\x24\x8e\xcd\x49\xd2\xc6\xd9\xe0\xb0\x35\xf8\xc1\x52\xd1\x44\xed\xcc\xfb\x9b\xc5\xce\x9c\xb0\xc9\xfb\xdc\x64\xe0\x0c\xe4\x61\xe2\x20\xde\xb0\xb8\xa0\x73\xa0\xf0\x84\x8a\x0a\xb4\x1f\xf6\x4a\xd6\x1b\xd8\x0f\x54\xb4\xd2\xd1\x33\xe2\x45\x10\x6f\x7b\x85\xdd\x0c\x2c\xad\x02\x1b\x83\xe2\xac\xc8\x91\xf1\xb2\x73\x5c\x99\x9c\xb9\x6f\x9b\x01\xd5\x6c\xff\x58\x1d\xd4\xc8\x5b\x48\x98\x3d\x45\xfa\x7c\x3e\x61\xd6\x4e\x8c\x70\xb0\x42\xfb\xe8\xea\xe2\x3c\x39\x47\xda\xd0\x53\x2d\x50\x3a\xf2\x94\x54\xb4\x44\xd1\x67\x17\x12\x2d\xbe\x39\xbb\x64\x76\xeb\x99\x5b\xa4\x2e\x65\xdc\x19\x02\xd7\x5f\x5a\xfb\x9c\xba\x3f\x5a\x33\x1c\x68\x6b\xce\xfe\xea\xda\x84\x82\x55\xe2\xac\x88\x94\x17\x72\xe2\xc5\xbb\x26\x25\xc2\x5a\xe4\x31\x8b\x7d\x86\xf1\xed\x79\x50\x57\xb4\x83\xce\xe5\xbe\x90\xa8\xdb\x7b\xf8\x6b\x28\xdf\xdf\xf3\x10\x1e\x66\xdc\xf2\x51\x40\x86\x9d\x45\x17\x4f\x18\x6d\x8c\x3a\x14\x17\x75\x03\x9c\x84\x1a\xf0\x62\x58\x18\xb2\x8d\x6d\x0b\x3f\xfd\x04\x31\x8a\x8b\x2f\xe9\xdf\xab\xa4\xff\x42\xc5\xef\xa0\x1b\x9c\x27\x57\x48\x33\x39\xd1\x21\x88\x40\x52\x42\x8c\xee\xb6\xec\x35\x9c\xd3\xab\x19\xfc\x97\x6a\xfe\xd3\x97\xa2\xc7\xe9\x50\xf1\xe3\x7a\x1c\x77\x8f\x15\x39\xe6\xdd\xe4\x4a\x39\xfe\x15\x93\x08\x4a\x5d\xab\xa1\x41\xb2\x92\xe9\x64\x12\xc2\xa8\x8f\x58\x3f\xce\x49\x88\x12\x90\x51\xce\xc8\xe7\x5a\x5a\x21\x72\xf8\xd7\x18\xfc\x40\x43\x30\xf8\xd5\x54\x11\x1a\x93\x3e\x5a\x77\xf3\x1b\x50\xf2\x91\x0e\xa3\x4a\xb2\x8b\xea\xc8\x1e\x09\xdd\x14\x03\xc5\x3e\x97\x5e\x90\x69\x92\x2d\x17\xad\x87\x5e\x85\xb3\x08\xbc\x2c\xe4\x69\x91\x96\x42\x9e\xcc\xad\x17\x8f\x58\xd4\x98\x14\x3a\xbe\x71\xb4\x35\xad\xd3\x5f\xfa\x69\xec\xf1\xd9\xfe\x89\x58\x37\xc1\x81\x84\x9e\xb9\x5d\xd6\x51\x3c\x8c\x5e\x53\x46\x64\xde\x84\xd4\x61\x3d\xca\xd6\xca\xc7\x38\x98\x9e\xba\x33\x08\x65\x34\x29\x3e\xe1\x83\x75\xd1\x78\x0e\x1f\x06\xfb\x12\x8d\xe0\x66\x5a\x19\x19\x82\x36\x91\x62\x02\xa1\x36\xd6\x62\xed\xd5\x78\x15\xff\x31\xb9\x25\xfd\xc5\x8e\x4f\x9a\x51\xc0\x69\xb9\x67\xce\x18\x25\x83\x1c\x3f\x9f\x9b\x63\xfa\x47\x21\xde\x2c\xde\xde\x5e\xa7\x4f\x0e\x55\x3b\x95\x99\x84\xb2\xae\x33\x29\xa3\xa4\x2e\x53\x6e\x52\xb5\x84\x47\x09\xe8\x6a\x45\xb9\x34\x8d\x89\xab\x89\x84\x2f\xcb\xa0\x5c\x27\x78\xf3\xb5\x23\xe8\x33\x4b\xc5\x73\xde\x67\xc3\xb3\xc9\x1d\xb3\x59\x5f\x3b\x0e\x27\x5c\x88\x88\x74\xab\xc1\x3a\x53\x5b\x3e\xff\x8d\x3d\x5b\x05\xb1\x76\x3a\xeb\x50\xe8\x89\x4c\x44\x40\x3c\xa1\x1d\x97\x37\x7c\x79\xf4\xfc\xd6\xc0\x3d\x77\x4f\x36\x05\xe5\xd5\x69\xb0\x95\x1a\xa7\xe1\x2d\x2f\xba\x32\x9f\xad\xb1\x5d\xde\x96\xbe\x72\x77\x34\xc5\x9f\x5f\x23\x4d\xaf\x0a\x82\x86\xf0\x85\x91\x8b\x8e\x29\x0a\x7e\x93\xee\x5b\xe8\x93\x72\xe7\xf2\x72\x63\x50\x4c\x3f\xd0\x1a\x11\xb6\xdc\x86\x84\x55\x8a\x14\x85\xab\xad\xe2\xdf\xe4\xe7\x99\x7d\x98\xd9\x8e\xde\x4a\x22\x26\x79\xc3\x45\x9d\x5f\x2a\x50\x80\x78\xbe\x47\x5f\x34\xd8\xbb\xb0\x9d\xef\x8a\xc5\xe6\x09\xde\xb8\x99\x52\xc1\xaa\xc9\xce\x3a\x57\xb6\x9e\x04\x8c\xcd\xda\xf8\x1f\xb6\x40\x16\x5f\x52\x98\x3f\xbf\x60\x64\x3e\x04\xf7\x52\x6c\x49\x52\x1a\x15\x5c\x9e\xd0\x60\x2c\xe0\x6f\x83\x50\xe1\xb7\x15\x4f\xf3\xac\x93\x81\x67\xad\x1a\x9d\x07\x98\x27\x72\xcd\x42\x95\xeb\x9f\xdd\x1e\x5b\x63\x71\xc7\xd6\x00\x7d\xac\x4a\x35\xe4\x49\x17\x1b\xd2\x1a\x78\xbc\x2d\xd9\xe3\x41\x6a\x4d\x65\xb4\xb8\x13\x2d\xb7\xa5\x2b\xa3\x5f\x16\x6e\x0e\xf0\x66\xfa\xf8\x16\xde\x3d\xcf\xf6\x3f\x72\x85\xec\x17\xc2\xce\x77\x60\xd1\x73\x14\x66\x7b\x8b\x27\xbe\xa0\x4c\x9f\x8b\x60\x51\xae\xb7\x91\x57\xfa\x10\xd1\x34\xe4\x41\xca\x44\x51\x9c\x66\x2b\x2d\x57\xce\x99\xd7\xb9\x90\xc5\xe2\xdf\xdd\xc1\x07\xe7\xd0\xfa\x72\xa5\x35\xd7\xf4\x98\x7e\xb9\xe8\x60\x41\x22\x73\x90\xec\xf5\x12\x2f\xba\xed\x53\xb9\x7f\x96\xe1\xdc\xd3\xfb\x24\x20\x11\xed\x8a\x0e\xa2\xd8\xb7\x07\xf4\x0f\x63\x8f\x37\xb7\x5b\xd9\x90\x17\x6b\x25\xda\xad\x53\xb2\xc6\x98\xdb\xfb\x0d\x0c\xfd\x83\xb9\x87\xff\xff\xd3\x2d\x15\x04\x57\xc2\x37\x8d\xba\x87\xf5\x32\xf9\x9b\xd0\xe4\xac\xd3\x72\xb1\x5c\xd6\xa6\xeb\x85\x9f\xdc\x56\x12\x51\xdf\xd1\x74\x57\x95\xf1\xff\xa5\xc7\xcc\x44\x7a\xfc\x5d\x45\xed\x86\xee\xc5\x6a\x2e\xeb\xfc\x6d\x87\xa2\xe0\x24\x7f\xe9\x7a\x3f\xc6\x52\x8e\x07\x56\x3d\xc6\x3f\x5c\x98\xf8\xcd\x4c\x9d\xb9\x3c\x8e\x82\x3a\xe0\x33\x5a\xb3\xf4\xa0\xd5\xb4\x9c\x97\x53\xdc\xac\x69\xf1\x0a\xd5\x97\xe7\xc9\xf7\xdb\xf7\xf7\xf0\x8a\xf6\x46\x8d\x67\x35\x26\x1b\x1c\x63\x62\xca\xf8\x6f\x5b\xd3\x90\x5e\x5d\xe4\xfe\xe5\x7f\x01\x00\x00\xff\xff\x5f\xf5\x1c\x7d\xad\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0xd3, 0xeb, 0x3b, 0x98, 0xa0, 0x4d, 0x55, 0xa7, 0x13, 0xb6, 0x4, 0xea, 0x5a, 0xb1, 0x4e, 0xb2, 0xf7, 0xa0, 0x7a, 0x79, 0x34, 0xcc, 0x35, 0x16, 0x9b, 0x46, 0x84, 0x5e, 0x4d, 0xc7, 0xcc}}
	return a, nil
}

var _utilitycontractsPrivatereceiverforwarderCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\xa6\x40\x2b\x2d\xb2\x72\x0f\x45\x0f\x46\xbc\x69\x9a\x8f\xa2\x68\x91\x06\x49\xb6\xd7\x62\x44\x8d\x2d\x76\x65\x52\x20\x47\xd6\x06\x81\xff\xfb\x82\xd4\x27\xa5\x78\x81\xcd\x25\x92\xcd\x99\x79\xef\xcd\x9b\xa1\x57\xef\xa3\xe8\x07\xb8\xab\xd5\x4e\x66\x25\xc1\xb3\xfe\x4c\x0a\x1e\x8c\x3c\x20\x13\x3c\x92\x20\x79\x20\x03\xd7\x5a\xb1\x41\xc1\x51\xf4\x5c\x48\x0b\xa2\x7b\x05\xb9\xaf\x4a\xda\x93\x62\x0b\x08\xb6\x22\x21\xb1\x04\x43\x56\xd7\x46\x10\xa0\xca\xc1\xf4\x29\xa4\x62\x32\x5b\x14\x04\x51\x53\x68\x4b\x90\x53\xa5\xad\x64\xd8\xd6\x4a\xb0\xd4\x0a\xa4\x05\xad\xca\x17\x10\x58\x96\xe8\xc0\x64\x2f\x80\x0a\x30\xdf\x4b\x05\x5c\x18\x5d\xef\x0a\x40\xa8\xea\xac\x94\x02\x04\x56\x98\xc9\x52\xf2\x4b\x1a\x45\xef\x57\x51\x24\xf7\x95\x36\x3c\x50\x69\x99\x6c\x8d\xde\xc3\xcf\x5f\xee\x3e\xdd\xff\xf1\xe7\xef\x7f\xdf\x3e\xff\xf3\xd7\xed\xfd\xd5\xcd\xcd\xe3\xed\xd3\x53\x14\x55\x75\x36\x52\xe9\x38\xf7\x94\xef\xb4\x69\xd0\xe4\x64\xe0\x35\x8a\x00\x00\x56\x2b\xb8\x3d\x90\x62\xe0\x02\xd9\x61\xa5\xbd\x64\xa6\x1c\x9a\x82\x14\xb0\xab\x66\x01\xcd\xc0\x8b\x72\x60\x0d\x5c\x10\x30\x9a\x1d\xf1\xa0\x84\xcf\xe6\x4a\x93\x4f\xd7\xd5\xbd\x69\xa3\x62\xdc\xeb\x5a\xf1\x1a\x3e\xdd\xc9\x2f\xbf\xfe\x72\x0e\xac\xd7\x70\x95\xe7\x86\xac\xbd\x4c\xa2\x21\xb6\x24\x86\x27\x52\x39\x99\x27\xd6\x06\x77\xf4\x80\x5c\xac\x61\xf2\x12\x9e\x9d\xb1\x3b\x19\xf4\x8d\x98\x07\xaf\x7b\x1b\x32\x3e\x8f\x65\x86\xb6\x2f\xa4\xeb\xe4\xf3\xd6\x91\xd6\x09\x66\xc8\x2b\x33\x95\xca\xeb\xd7\xc8\xb2\x84\x8c\xc0\x92\xe2\x34\x8c\x25\xe0\x97\x8a\x40\xaa\x5c\x0a\x64\xb2\x5d\x1f\x7c\x2b\x10\x0c\x6d\xc9\x90\x12\xe4\x44\xc7\x50\xeb\x36\xc5\xf0\x88\x42\x90\xb5\xb1\xa5\x72\x9b\xc0\x01\x8d\x3b\x2c\x2b\x49\x4e\xf5\xeb\xc1\x54\x17\x3f\xbe\x06\x4e\x4a\x7b\x19\x8e\x1f\x03\x52\x1d\x85\xb7\x0a\xad\x56\xce\x8c\xad\xb7\x3d\x58\xc6\xcf\xe4\xc0\xfe\x8b\x75\xc9\xa0\xb3\xff\x49\x30\xa0\xf5\x26\x37\xbb\xda\xcd\x91\x9f\x99\x6d\x2b\xa0\x9d\x66\x92\xdc\xdb\x69\x80\xfb\x93\xed\x32\xd5\x56\xaa\x9d\xff\xce\xb2\x36\x94\x8f\x6a\x7c\x83\x7f\x6f\xfc\xc4\x0d\x60\x4f\x23\x76\xf3\xb2\x86\xdf\x42\xea\xbe\x4a\x02\xaf\x43\x0a\xf7\x57\x4e\x2c\xfd\x48\x5b\xd8\x80\x53\x34\x1d\xd0\xa5\x99\x36\x46\x37\x71\xf2\x2e\x5a\xc4\x65\x58\xa2\xeb\xd5\xc6\xcf\x67\xda\xbd\x86\xe7\x26\xb9\xd3\x10\xdd\xc5\x07\xf7\x3f\x09\x8f\xbb\x69\x3c\x35\x4b\x5d\xfe\x76\x98\x3c\x4a\xdd\x28\x32\x97\x29\xb6\x83\x95\x0c\x99\x8e\x63\x52\xa9\x24\xc7\xdf\x6b\x8d\xb9\x48\x95\xa1\xd9\x27\x1d\xb5\x99\x46\xf0\x6e\x03\x4a\x96\x6b\x38\xbb\xd6\x75\x99\x83\xd2\x0c\xed\x77\xe3\x0e\x1e\x2d\xee\x97\x9a\x6b\xf7\x88\xe9\x2c\x28\x72\x0c\xde\xc2\xbe\xc0\x66\xac\x1f\x85\x01\xc7\x61\xd3\x09\x43\xc8\x74\x4f\xcd\x38\xcb\xed\x47\xce\xbe\x8a\x9a\xc9\x8c\x8f\xb0\x1a\xc9\x85\x87\x55\x19\x7d\x90\xb9\xf7\xe1\xb4\x50\xe7\x41\xb7\x2b\x9c\xe5\x96\x35\xbe\x5f\x6e\x67\xd5\xc9\xb6\x19\x05\xe6\xda\x28\xb8\xf8\xd0\xd6\x80\x37\x2b\x0c\x8f\x49\x4f\x7e\xb9\xca\xda\x15\x3b\xc9\xdc\x83\xb7\xa4\xf2\xce\x6d\x1e\x94\x8d\xff\x83\xce\x4d\xc3\xbe\x3e\xef\xb6\xda\xe9\x79\x5a\x0c\x06\x0a\xe1\x2c\x0b\x1b\xd8\x11\x5f\xb5\x2f\xf1\xe0\xd2\xc5\xf1\x2a\xdc\xd0\xb0\xe9\x13\xa4\x3b\xe2\xa9\x82\xa7\x2e\xb7\x74\x78\xfa\x18\x9f\x3c\x73\xf2\x1e\x48\x16\xce\x1e\x0d\x7d\x79\x09\x15\x2a\x29\xe2\xa5\xa3\x83\x5d\xdd\x51\xe8\x77\x1e\x99\xb3\x19\xcf\x19\xc7\xc5\x2e\x68\x35\x0e\xa1\xbc\xed\x6b\x3f\xd1\xd6\x77\x74\x71\xf1\x9d\xfb\xd5\xf9\xd6\x95\x78\xde\xfd\xe0\x98\x5f\x7c\x41\xff\xfc\x88\x2d\xee\x63\xbf\x13\xfb\x72\xb3\xc3\xa7\x2f\x64\x17\x35\xbb\x91\x4f\x45\x8d\x68\x60\x33\x81\x39\x2b\xd5\x7b\xc2\xe2\x81\xe2\x61\x26\x5a\xb4\x71\x32\xd9\x8a\x0b\x02\x5d\x2b\x8e\xd1\xf1\x6b\x00\x00\x00\xff\xff\xd3\xf5\x5a\x30\x27\x0a\x00\x00"

func utilitycontractsPrivatereceiverforwarderCdcBytes() ([]byte, error) {
	return bindataRead(
		_utilitycontractsPrivatereceiverforwarderCdc,
		"utilityContracts/PrivateReceiverForwarder.cdc",
	)
}

func utilitycontractsPrivatereceiverforwarderCdc() (*asset, error) {
	bytes, err := utilitycontractsPrivatereceiverforwarderCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "utilityContracts/PrivateReceiverForwarder.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0xf6, 0x87, 0xb8, 0xb7, 0x62, 0xda, 0x3a, 0xb2, 0xce, 0xcb, 0x5a, 0xf4, 0x51, 0x72, 0x10, 0x1, 0x88, 0x20, 0x44, 0x82, 0xe7, 0x1, 0xd7, 0x39, 0xf4, 0xbe, 0x89, 0xff, 0x9a, 0xcf, 0x31}}
	return a, nil
}

var _utilitycontractsTokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x36\x14\xbc\xf3\x57\xcc\x6e\x81\xae\x1d\x64\xe5\x1e\x8a\x1e\x82\xa4\xdb\x6d\x3e\x8a\xa2\x45\x0a\x78\xb3\xed\xb1\xa0\xa9\x27\x8b\x1b\x99\x14\xc8\x27\x6b\x83\xc0\xff\xbd\x20\x25\xd1\x52\xa2\x14\xe9\xa5\xb9\xc4\x14\xf8\xe6\xcd\xbc\x19\x92\xab\x93\x13\x21\xbe\xc1\x4d\x63\xb6\x7a\x53\x11\xee\xec\x3d\x19\xdc\x58\xd7\x4a\x97\x6b\xb3\xc5\xa5\x35\xec\xa4\x62\x21\xee\x4a\xed\xa1\xfa\x25\x7c\x69\x5b\x8f\xd2\xb6\x90\x06\x52\x29\xdb\x18\x86\xb2\x4d\x95\xc3\x13\xa3\xa9\x21\xa1\x1a\xcf\x76\x97\xc0\x3b\xec\x35\x29\xd2\x7b\x72\x82\x2d\x64\x55\xd9\x16\x5c\xd2\x0e\x6c\x51\x74\x5d\xc1\x61\x9f\x0f\x5f\x24\x72\x5d\x14\xe4\xc8\x70\xea\xd1\x96\x64\x68\x4f\x2e\x94\x3d\xc0\x75\x68\x7d\x4d\x16\x58\xd2\x03\x94\x34\xa8\x9b\x4d\xa5\x7d\x09\x0e\xb4\x7b\x41\xe4\xe0\xc8\xdb\xc6\x29\x82\xf4\x90\x89\x0c\x94\xac\xe5\x46\x57\x9a\x1f\xf0\xa5\xf1\x8c\x4a\xdf\x13\x24\xfe\x94\x4d\xc5\xa7\x42\x9a\x3c\xb4\x83\x27\x13\x30\x72\x4b\xde\xbc\x63\xd0\x9e\x0c\x0c\x51\xa0\x8c\x7b\x63\x5b\x68\x86\xf6\x47\xd2\x99\x10\x7f\x95\x64\xc6\x23\x6a\xa5\xe1\xa8\x4d\x39\x92\x1c\x7a\x24\x6e\xa7\x9d\x24\x25\xab\x2a\x76\xeb\x76\xdc\x52\x9b\x76\x88\xa2\x31\x8a\xb5\x0d\x88\x39\x6a\x67\xf7\x3a\xa7\xd0\xb4\xd5\x5c\xc6\x9a\x24\xc8\x51\xa4\xa0\x08\x5c\x4a\xee\x90\x43\xef\xd1\xa0\x05\x97\xa4\xdd\x71\xdc\x99\x10\x27\x2b\x21\xf4\xae\xb6\x8e\x9f\xb8\x56\x38\xbb\xc3\x77\x5f\x6f\x3e\xdf\xfe\xf2\xeb\xcf\xbf\x5f\xdf\xfd\xf1\xdb\xf5\xed\xc7\xab\xab\xf5\xf5\xa7\x4f\x42\xd4\xcd\xe6\x18\x8c\xb8\x7f\x14\xa0\x47\x21\x00\x60\xb5\xc2\xf5\x3e\xf8\x18\xe9\x68\x0f\xda\x69\x66\xca\xa3\x9f\x03\x07\xe9\x08\x39\xd5\xd6\x6b\xee\x86\x1a\x24\xb1\x74\x5b\xe2\xc1\x69\x17\xd1\x42\x47\x8a\x70\xc3\x6c\xf2\xab\xae\x6e\x21\x77\x61\xce\x67\xf8\x7c\xa3\xbf\xfe\xf0\xfd\x69\x64\x7e\x86\x8f\x79\xee\xc8\xfb\x0f\x4b\x91\xea\x53\x12\xd2\x78\xcf\xa6\xa2\xb3\x34\xcc\x5e\x43\xaf\x23\x1e\x04\xed\x03\x73\x47\x91\xe2\x98\x73\x14\xd2\xea\xaa\xc2\x26\x06\x86\xb3\x69\x2d\x81\x1f\x6a\x82\x36\xb9\x56\x92\xc9\xf7\x03\x89\x33\x91\x63\xdb\x6c\x5c\x8e\x44\x77\x10\xe9\xa7\x54\x8a\xbc\x5f\x78\xaa\x8a\x25\xf6\x32\x58\xae\x74\xad\x29\x88\xbf\x4c\x71\x9e\x30\xef\x79\xce\xa1\xad\x56\x41\x7c\x17\xae\x2e\x31\xf2\x9e\xfc\x70\x04\x60\x37\x5f\x48\x71\x3c\x34\x06\xd2\x6d\x9b\x5d\x3c\x93\x26\x1f\xc2\xe4\xc7\x48\x9a\x07\xf3\x12\xa7\x77\xbe\x47\x6a\x7c\x48\x45\x3c\x4d\x6c\x1d\xe5\x47\xc9\x73\xb4\x82\x51\x45\x63\x06\xe6\x8b\xce\xcd\x9f\xa6\x3e\x45\xe0\x25\x1e\x53\x55\xf8\xab\x46\x99\x59\x53\x81\x0b\x84\x49\x65\x89\x50\xb6\xb1\xce\xd9\xf6\xfc\xdb\xc7\x79\xd3\x0f\x3f\x2e\x96\x6f\xc4\x33\xc8\x8d\xac\x64\xb0\xe7\x22\x06\x2b\xeb\x97\xd3\x7d\xa3\xb6\xd9\x94\xf8\xf9\xfb\xf0\x7f\x39\xdd\x1e\x4e\xc2\xcb\x39\xee\x3b\x0c\x41\x8e\x22\x6c\x6b\xc8\x7d\xc8\x64\x17\xea\x65\x42\x3b\x4c\xdc\x56\xa5\x34\x5b\x5a\x0f\x82\xfb\xb5\x9f\xfa\x02\x5b\xc4\x0f\x45\xba\x21\x7b\xe7\xfa\xdb\x25\x3f\x6e\xfd\x37\x7f\x9e\xf4\x5a\xfc\x0d\x43\xed\x7a\x2e\x90\x4f\x7d\xaa\x1d\x3d\xf9\x12\xfe\xc6\xd5\xaf\x71\x0a\x6f\x2e\x60\x74\x75\x86\xb7\x97\xf1\x0d\x32\x96\xd1\x95\xcd\x5d\x89\xf1\x36\x0b\x22\x8f\xb4\xde\x4e\x28\x1c\x26\xab\x69\x70\x70\x31\x61\x37\x37\x7c\x6d\x34\x2f\x66\x8f\xe3\xeb\xd4\xff\xa7\x90\xfe\xbf\xd2\x9f\xa7\xa1\x2b\x38\xa4\x6b\xfe\xf9\xb3\xd5\x7f\x0a\xb7\x89\xa1\x76\xf2\x18\x0f\xb4\xd2\x03\xf6\x42\xec\xfa\xc8\xa5\xb8\x3d\xeb\xf1\xc2\xb8\xc3\x5d\x91\xda\x1d\x07\xed\x88\x1b\x67\x70\xfe\xbe\x7f\x85\x67\x61\xd2\xcf\x65\xaf\xf0\x20\xfe\x09\x00\x00\xff\xff\x4f\xb2\xa7\xb0\x2f\x09\x00\x00"

func utilitycontractsTokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_utilitycontractsTokenforwardingCdc,
		"utilityContracts/TokenForwarding.cdc",
	)
}

func utilitycontractsTokenforwardingCdc() (*asset, error) {
	bytes, err := utilitycontractsTokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "utilityContracts/TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x3e, 0x44, 0xd9, 0xc0, 0x14, 0x91, 0xad, 0x34, 0x96, 0xca, 0x7d, 0xf8, 0x15, 0x91, 0x80, 0xe7, 0x6e, 0xed, 0x34, 0xf5, 0x3e, 0x81, 0x45, 0x65, 0x1e, 0x1f, 0x23, 0x36, 0x2d, 0x65, 0x62}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleToken.cdc":  exampletokenCdc,
	"FungibleToken.cdc": fungibletokenCdc,
	"utilityContracts/PrivateReceiverForwarder.cdc": utilitycontractsPrivatereceiverforwarderCdc,
	"utilityContracts/TokenForwarding.cdc":          utilitycontractsTokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleToken.cdc": {exampletokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc": {fungibletokenCdc, map[string]*bintree{}},
	"utilityContracts": {nil, map[string]*bintree{
		"PrivateReceiverForwarder.cdc": {utilitycontractsPrivatereceiverforwarderCdc, map[string]*bintree{}},
		"TokenForwarding.cdc": {utilitycontractsTokenforwardingCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
