// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleToken.cdc (7.429kB)
// ../../../contracts/FungibleToken.cdc (7.268kB)
// ../../../contracts/utilityContracts/PrivateReceiverForwarder.cdc (2.601kB)
// ../../../contracts/utilityContracts/TokenForwarding.cdc (2.353kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdf\x4f\xe4\x38\x12\x7e\xe7\xaf\xa8\xe3\xe1\xae\xd1\x40\xc3\x49\xa7\x7b\x40\xcc\x0f\xe6\x8e\x91\xe6\xe1\x46\xa7\xd9\xd9\xdd\x57\x9c\xa4\xba\xdb\x4b\x62\xb7\x6c\xa7\x9b\x1e\xc4\xff\xbe\x72\x95\x9d\xd8\xe9\xa4\x81\x61\x87\x17\x48\xe2\x2a\x97\xcb\x5f\x7d\xf5\xd9\xc8\x66\xad\x8d\x83\x4f\xad\x5a\xca\xa2\xc6\x6f\xfa\x0e\x15\x2c\x8c\x6e\xe0\x78\x7e\x9e\xbd\x9d\x97\x55\x79\x7c\x74\xb4\x6e\x0b\x28\xb5\x72\x46\x94\x0e\x6e\xee\x45\xb3\x0e\xdf\x2f\x07\x4e\x1e\x8e\x8e\x00\x00\xce\xcf\xcf\xe1\x9b\x76\xa2\x06\xdb\xae\xd7\xf5\x0e\xf4\x22\x33\xb3\x20\x15\xe0\xbd\xb4\x0e\x55\x89\x64\xe2\xa7\xd8\x08\x03\xce\x9b\xfd\x42\x56\x97\xf0\xeb\x27\x79\xff\xef\x7f\xa5\x3e\xbd\xf1\x67\x25\x9d\x14\xb5\xfc\x8e\x55\xfc\xd2\x8f\x58\x21\xe0\x06\x95\x03\xb7\x12\x0e\xa4\x05\x6c\xa4\x73\x58\xc1\x76\x85\x0a\xdc\x0a\xfb\x85\x48\x0b\xa5\x41\xe1\x82\x1b\x1f\x01\x9b\xee\x4d\x33\x93\xfc\x77\x1e\xd7\xc9\x30\xb0\xdf\xa5\x5b\x55\x46\x6c\xd5\x8b\xc3\xe2\xa4\x08\x83\xb0\x8d\x3e\x78\x43\x04\xfc\x26\xda\xda\x8d\x06\xd8\x4d\x37\x13\x8d\x6e\x95\x8b\x71\x9d\x92\xe9\x25\x5c\x57\x95\x41\x6b\xdf\xef\xc5\xf9\x5f\x5c\x6b\x2b\xdd\x0f\xa4\xaf\x8f\xb3\x8a\x3e\xc0\xe9\x83\x51\x76\x93\xed\x45\xe9\xf4\x81\x18\xff\x27\xd5\x0f\x04\xa8\x70\x9b\x06\xd9\xf4\x4e\x86\x61\xb1\xff\x41\x4c\x7b\x51\x7c\x6c\x8d\x7a\x65\x9a\xac\x33\x7a\x37\x11\x04\xbb\x9f\x0e\x82\x82\x34\xff\x49\x40\xfa\x82\x28\x04\x65\x83\x52\x60\xc0\xa0\xd5\xad\x29\x71\x1a\xf4\xd9\x5c\x33\x51\xd7\x7a\x8b\xd5\xf5\x54\x64\x14\xf9\xeb\x22\x2b\xc8\xc5\x33\x22\xcb\xe6\x9a\x25\x41\xf4\xa0\x4b\x27\xbf\x11\xe5\x0a\x5a\x8b\x06\xac\xd3\x06\x2d\x08\x05\x52\x59\x27\x54\x89\x9e\x88\xb4\xaa\x77\x44\x04\x64\xee\x99\xc8\xad\x50\xf2\x68\xb1\xc4\x6c\x11\x8b\x56\x95\x4e\x6a\x26\xac\xde\x46\xa8\x0a\x96\x7a\x83\x7e\xf7\xa0\x60\x6f\x6b\x83\xf4\x7e\xad\xad\xf3\x1c\x53\x49\x32\xec\xdc\x49\x35\xe0\xca\x48\x48\x3b\x02\x4a\x29\xea\x1a\xab\x79\x36\x7b\xb9\xc2\xf2\xce\xc2\x4a\xac\xd7\x3e\x6b\x0e\x4c\xab\x9c\x6c\x90\x4c\x71\x83\x06\x44\x17\x21\xa5\x2f\xf7\xd1\xf9\xfa\x1a\x52\xec\x47\x28\x5e\x7f\x81\x31\xd9\x71\x65\x9e\x16\xf1\xde\xf9\x0c\x65\x2c\x49\x3b\xe8\xc3\xec\xdc\x31\xae\x17\x52\x91\xf1\x29\x58\xed\xbf\x1b\xda\x41\xa5\x61\x2b\x76\xb0\xd0\x3e\xb6\x46\xd4\xb2\x94\xba\xb5\xbc\x1d\x4e\x87\x39\x39\x8b\x7d\x6a\x74\x1b\xa6\x95\x0a\x84\x34\x73\xb8\x06\xbb\xc6\x52\x8a\x3a\xa0\xb2\x07\x89\x42\xac\xac\xf7\x54\xf4\x31\x38\x4d\x28\xef\xdc\xf5\x24\x90\xa7\xc2\x23\xaa\x73\x44\x21\x0c\xda\xd7\xfc\xff\x46\x6f\x64\x85\xe6\x74\xf0\xfe\x2b\x96\x28\x37\xfb\xef\x3f\x8a\x9a\x50\x15\xda\x5e\xba\x77\xd4\xc7\xa0\x08\x03\x78\x75\x16\x36\x1d\x62\xd3\x9e\x17\x46\xe5\xfd\x8e\x9d\x81\xec\xba\x10\x6d\x4b\x74\xe8\xc1\x10\x97\x42\x49\xf5\x10\xf0\xd8\xe8\x6c\xbd\xe1\x6c\xe0\xf9\x04\x1e\xba\xef\xfe\xc7\x62\xbd\x98\x47\x97\x6f\xa3\xf3\x6e\xc8\x63\xbe\xac\xd8\x9a\xd2\x97\xd9\x80\x4f\x11\x8b\x8c\x19\x71\xc7\xc5\xc7\xf4\x06\x82\x1f\xcc\xb2\x6d\x50\xb9\xcc\xd0\xd7\x4d\xf4\x6e\xd9\x3a\x18\x51\x13\xec\x0a\x6f\x3e\x39\xf5\x67\x17\xb0\x65\x03\xbb\x38\xf4\x22\x47\x98\x5d\x28\xd9\x48\x44\xad\x65\xc4\xac\x74\x5d\x65\x1e\xfc\x24\x8d\x56\xb8\xeb\x86\x16\x28\xd5\x12\x9c\x11\xca\x2e\xd0\x18\xac\xe6\x7e\x1a\x83\xae\x35\xca\xd2\x78\x85\xdb\x7a\x97\x79\x89\x45\x15\x26\xd5\x59\x69\x91\x63\x2e\x52\x5f\x34\xd2\x51\x3d\x16\x49\x33\xcd\x7c\x61\x6d\x71\xeb\x0b\x6b\x7c\xd9\x1e\x3d\x8b\x56\x75\x89\x1b\xb6\x91\x4b\xf8\x90\xa3\x95\x63\x3a\x88\x80\xec\xf1\x2c\x6c\x42\x66\xe0\x89\x7c\x52\x7f\xf0\xef\xa8\x3f\xc8\x99\xde\x2a\x34\xef\xe7\x82\xfb\xfc\x49\xe6\x8b\x53\x09\x57\x67\x29\x2d\xf4\x98\x65\x6f\x27\x53\x70\x0c\x49\x7b\x19\x1a\xc3\xc6\xe8\xe2\x0f\x2c\x87\x90\x24\x18\x8a\xaa\xb2\x99\x1b\xe9\x6c\x57\x75\x61\x3f\xb3\xaa\x46\xa0\x25\xda\x67\x20\x54\x5a\x08\x7d\xd5\x7b\x0a\xd2\x80\x5c\x58\x3f\x3d\x87\x56\x60\x29\x5a\x8b\x3d\xe8\xf3\x1a\xf4\x21\x27\xe0\xf6\x30\x46\x13\x23\x09\xac\x47\x04\x44\xb6\xff\xe8\x63\x5f\x89\x7c\x5d\x05\xa2\xf2\xc8\xb4\x6d\x83\x15\x2d\x9d\x48\x7c\xa1\xa9\x19\x05\x58\x06\xf1\x72\x18\x80\x61\x23\x66\xbc\xeb\x63\xa0\x1b\xf2\x4e\x8d\x8e\xa9\x10\xae\xce\x82\xce\xb5\x7f\x83\x0f\xe9\x11\x61\x9e\xaf\xfd\x29\xac\xbe\x61\x7f\xf3\x21\x85\x0d\x20\xbb\x2f\x46\x33\x33\xd6\xa4\x4f\xe2\x36\xb3\x81\xb7\x70\x31\xbf\xc8\xbe\xc7\x9d\xcd\xd9\x3e\x81\x6f\x18\x30\x1b\xe6\x25\x4b\x40\x72\x12\x82\xb7\xd3\x9f\xce\xb2\x44\x24\xb3\x25\x73\xf6\xcc\x74\xd3\xac\xdd\x6e\x5c\x37\xe5\xf5\x92\xb3\x29\x43\xd3\x33\x0d\x88\x14\xfe\xdf\xd1\xe8\x5e\x17\xa8\xaa\x63\x47\xd9\x93\x9f\xa8\x6b\xcf\xa3\x81\x04\x7d\x73\x27\x35\xd0\xb4\x96\xc9\x90\x3b\x63\xd4\x31\x99\x37\x12\x70\xe4\x85\xfd\x76\xc4\x3a\x14\x6d\xfe\x85\x36\x15\x8b\x0c\xaa\x31\xfe\xde\x7b\x2b\x4b\xea\x27\xac\x1c\x44\x51\x53\x31\x1b\xee\xeb\x11\xc1\xb6\xeb\xd3\x54\x48\xe0\x76\x6b\xdc\x97\x10\x1e\xf2\xc3\x64\xce\x3c\xdb\x0e\xf9\xf5\x09\x7a\xbb\x98\x5f\x9c\xa4\x9b\x94\xc9\x93\xeb\xaa\x91\x4a\x5a\x67\x84\xd3\x66\xa8\x2f\xd8\xdf\x17\xdc\xb2\x3a\x7a\x26\x03\x76\x3b\x9a\x6c\xd3\xe8\x19\xe1\x60\xb1\x0f\xe6\x9e\x38\x28\x5c\xc2\x87\xa0\xdc\x1e\xf6\x4b\xf1\xe0\x49\x23\x7b\x3c\xdc\x2e\xc6\x23\x98\x70\xf0\x38\x91\x42\x3e\x5c\xbc\x3a\x85\x83\xc3\xcc\xf3\x52\xc8\x73\x13\x76\xf8\xcf\xb1\x6c\x0d\x4f\x3f\x87\x32\x12\x1d\x4e\xb3\x40\x82\x98\xb1\x13\x42\x6c\x8c\xdc\x32\xa9\x08\x84\x47\x62\xac\x1f\x3e\x41\xf8\xa6\x13\x55\xf7\xf3\xd4\x76\x07\x86\x3d\x9d\x1c\x74\x9e\x2f\x3c\x3e\x35\xc7\xf3\x46\x44\x65\xde\x34\x3b\xa1\x0f\x89\x7e\x1e\xc5\x60\x3e\x95\xb7\xe3\x16\xf0\xcc\xad\xf6\x06\x36\x59\xdc\x29\x29\x03\x1f\x58\x13\x99\xcd\x25\x37\x5c\xa7\x7b\x7a\x36\xd1\x89\xcd\x14\x17\x1e\x84\x49\x1f\xf2\x88\xb2\xdb\x6f\x95\x03\xec\xf8\xe3\x68\xfe\xc6\xff\x84\x6c\xbf\xf3\xe4\x73\x09\xc7\x9c\xb1\x70\x4d\xc2\x8c\x5c\x20\x2c\x09\x4c\xc6\xe7\x41\x11\xc3\x1f\x4f\xf9\xb9\x0a\x5d\x78\xb0\x01\x13\x7e\x6b\xb4\x96\x9d\xfa\x5c\xc4\x4d\x65\x57\xf9\x14\x8f\xaf\xee\x8a\x6f\xc6\xb4\xeb\x7e\xac\x30\xb6\x80\x27\x85\xef\xe0\xee\x68\xa8\x53\xe1\x55\xd2\x96\xce\x6d\xe3\xac\x3a\xa6\xdd\x87\xcb\xc9\x9e\xa7\x79\x20\xa1\xbd\xd7\xf3\x80\x27\xbf\xa7\x39\xa0\xa3\xb8\x5c\x86\xb6\x46\xbd\xa8\x30\x83\x76\xea\xb5\x7c\xbc\xdb\x39\x05\x5c\x2c\xb0\x74\x72\x83\xf5\x8e\xfc\xd2\xf1\xad\x97\xc5\x93\x13\x7c\xd1\x0e\x2f\x59\xd9\xb3\xc8\x48\x2e\xf0\x44\xeb\x74\x23\x9c\xf4\xa5\xbb\x03\xdb\x16\x74\x2b\x82\x55\x77\x32\xcd\x0f\x91\xe9\xa5\x77\x76\x65\x44\x61\xb7\xa5\xd3\xe6\x70\xd5\xf7\xf9\xf8\xe9\x7a\xda\x5b\x89\x88\x9b\x69\xf9\x3c\xae\x66\x07\x25\x31\xb8\xc9\xdc\xc7\x77\x82\x3f\x42\x78\xba\x04\x02\x72\x5e\xd8\xff\xbc\xb8\xf0\xaa\x3a\xbd\x09\xe1\x16\x98\xa4\x94\xe4\xe8\x90\x88\x93\x4e\x42\x0a\x52\x6c\xd0\x8b\x51\xa9\xb2\xfb\x3d\x76\x79\x34\x9a\xbf\xf1\x8a\x1d\xc6\x78\x92\x47\x1f\xea\x62\xee\xe7\x9b\x5d\x9d\x91\x33\x3e\x4d\x9c\x87\x79\xcf\x31\xd9\x0d\xde\xc5\xb1\xe5\x09\x8f\x84\x5a\x96\x50\x8a\xb5\x28\x64\x2d\xdd\x2e\x76\x0f\x52\xc3\x55\x7a\x9f\x41\x57\x79\x78\xbf\xd6\x16\xd3\xf2\xa1\xd1\xb7\x41\xd4\xde\x42\x83\x6e\xa5\xfd\xf1\xce\xe8\x76\xc9\x19\xbb\x8d\x37\x5a\xb7\x40\x5d\x76\x21\xca\xd1\xc4\x64\x6b\xab\xa5\xba\xbb\xfa\xfb\xc3\xf8\xd5\xd8\xe3\xbb\x59\x86\x8d\x73\x5e\x46\xb6\xea\xee\x1a\x2d\x1b\xe9\x84\x59\xa2\x3b\x94\xa8\x6e\xf8\x4f\xce\x58\xd8\xec\x5b\x58\x48\xac\x07\x09\xfb\x18\xbf\xbd\x34\x5f\xfb\x45\xf8\x30\x7a\x89\xf8\x9c\x04\x86\xa1\x7f\x45\xfe\xa8\xf8\x89\xd2\x7b\xc8\x67\x87\x8e\xd9\x61\x84\x93\xed\x01\x84\x93\xaf\x7c\xbf\x6e\x3c\x5d\x08\x95\xfe\x67\xc0\xae\xf4\x36\x91\x7c\xdd\xa5\xf3\x56\xd8\xe4\xe6\xb3\x1a\x4b\x75\x42\x3e\x07\xfe\x53\x37\x5e\xb6\x8f\x47\x8f\x47\x7f\x06\x00\x00\xff\xff\x44\xfe\xb1\x06\x05\x1d\x00\x00"

func exampletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_exampletokenCdc,
		"ExampleToken.cdc",
	)
}

func exampletokenCdc() (*asset, error) {
	bytes, err := exampletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x65, 0x17, 0xe4, 0x75, 0xee, 0xe4, 0xa9, 0x1f, 0xfd, 0x2e, 0x8c, 0x47, 0xed, 0xb7, 0x5e, 0x9f, 0xfb, 0xb6, 0x5f, 0x33, 0x8a, 0x7, 0x45, 0x20, 0x61, 0x4b, 0x60, 0x22, 0xf4, 0x19, 0x31}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x4d\x73\xdb\xba\xd5\xde\xf3\x57\x9c\x49\x16\xb1\xf3\x2a\xf2\x5d\xbc\xd3\x85\x67\x6e\xdb\xdc\xf6\x66\xc6\x9b\x4e\xa7\x75\x7b\xb7\x82\xc8\x43\x09\x63\x10\xe0\x05\x40\xc9\xcc\x9d\xfc\xf7\xce\x39\xf8\x22\x29\xc6\x56\x12\x6f\x2c\x91\xc0\x83\xf3\xf9\xe0\x01\x74\xf7\xfe\x7d\x55\xbd\x85\xc7\x23\xc2\x27\x65\xce\xf0\x69\xd0\x07\xb9\x57\x08\x8f\xe6\x09\x35\x38\x2f\x74\x23\x6c\x53\x55\x6f\xdf\xc2\x2e\xbd\xe4\x77\x3b\xa8\x8d\xf6\x56\xd4\x1e\xa4\xf6\x68\x5b\x51\x63\x55\x11\x50\xfe\x0a\xfe\x28\x3c\x08\xa5\xa0\x4d\xb0\x9e\x61\xd3\x4c\x07\x67\x33\xa8\x06\x8e\xe2\x44\xaf\xe8\x79\x6b\x6c\x07\xde\x6c\xab\x87\x16\x04\x0c\x0e\xad\x83\xb3\xd0\xde\xd1\xfb\x06\x7b\x65\x46\x10\xa0\xf1\xbc\x80\xda\x80\x3f\xa2\xb4\xf9\x7b\x15\x90\x35\x62\x43\x33\x65\xd7\x2b\xec\x50\x7b\x1a\x06\x33\x47\x8a\xbd\x5b\xb6\x7f\x02\xb2\x30\xaf\x35\x8a\x62\x44\x0e\x11\x8a\x1d\x14\x3a\x10\xba\x01\x2d\x3a\xa9\x0f\x15\xbb\xeb\x67\x11\x70\x3d\xd6\xb2\x95\xe8\xb6\x21\x84\xff\x15\x83\xf2\x3b\xb0\xe8\xcc\x60\x29\x60\xbf\x8a\xfa\x08\xa2\xae\xcd\xc0\xb6\x09\x0f\xe6\xac\x5d\x70\x2e\x85\x27\x39\xc1\x76\x08\x32\x98\xf2\x52\x63\x65\x5a\x5e\x8e\x41\x33\x26\x38\x6f\x2c\x36\x20\x75\x0c\x49\x42\xa7\xe7\xe2\x10\xbd\x5c\x4e\x3a\x0a\x07\x1d\xfa\xa3\x69\x1c\x64\x3f\xcc\x59\xa3\x65\x0f\x8d\x3f\xa2\x8d\xe9\xa8\x85\x86\x5a\x28\x15\x5d\xfa\xa7\x35\x27\xd9\xa0\xdd\x6d\x60\xf7\x2f\xac\x51\x9e\xf8\x33\xcd\xda\xfd\x22\x14\x19\x5a\x1c\x2e\xa1\x71\x6c\x86\x9b\x3e\x81\x06\x6b\x25\x2c\x42\x6f\xf1\x43\x6d\x74\x23\xbd\x34\x3a\x84\xb8\x37\xce\x4f\x9f\xb1\x8d\x16\x9d\xb7\xb2\xf6\x15\x19\x8b\xcf\x58\x0f\xf4\x12\x62\x58\xda\x41\xd7\x61\x70\x08\x45\x70\x39\xb8\x3f\x02\xad\xe3\xb0\x17\x56\x78\x84\x3d\xd6\x62\x20\x5b\x3c\x1c\xe4\x09\x1d\x0f\x27\x6f\xf9\x83\xd8\x4b\x25\xfd\x48\x29\x70\x47\x61\xb1\x12\x60\xb1\x45\x8b\xba\xe6\xba\x08\x61\x0e\x01\x0d\x29\xd4\x6a\x04\x7c\xee\x8d\x8b\x50\xad\x44\xd5\xb8\x62\x51\x25\x35\x18\x8d\x60\x2c\x74\xc6\x62\xb2\xb8\x84\x62\x5b\x55\x0f\xd4\x3a\xce\x44\x83\x42\xe8\x17\xd6\x74\xe2\x09\xa1\x1e\x9c\x37\x5d\x8e\x70\x0c\x4d\x2e\x78\x8a\xcd\x3c\xca\xd4\x48\x06\x4e\xc2\x4a\x33\xd0\x68\xa9\x0f\x0e\xce\xd2\x1f\x19\x3e\x54\xde\xb6\xfa\x64\x2c\xe0\xb3\x20\x98\x0d\x08\x68\xc5\x50\xa3\xe7\xdc\xef\xb1\xa0\x63\x03\xfb\x31\xf5\x2d\xf7\x00\x87\x03\x52\x51\xcc\x9a\xeb\x97\x11\x06\x27\xf5\x61\x62\x2b\xa5\xb6\x98\xb6\x89\x6e\x9a\x76\xd1\xa2\x99\x30\x2a\x32\xc0\xa1\x6e\x78\xa6\x0d\xe5\x96\xba\xa5\x47\xb4\x1f\xbc\xf9\x40\xff\x37\xec\x91\x19\x3c\x75\x0d\xad\x49\x24\x40\x0b\x31\x37\x90\xb3\x02\x6a\x24\x54\x05\x0a\x9b\x03\x5a\x70\x9d\xb0\x3e\x2f\xb5\x85\x47\x13\x56\x8a\xe8\xde\x80\xd0\xa5\x0f\x36\x55\xa0\xa7\xd8\xa3\x8e\x42\x32\xf2\xa2\x8d\x15\xe7\x49\x28\xa1\xb5\xa6\x9b\xd6\x08\x53\x55\x68\x21\x2e\xdc\x06\x7b\xe3\xa4\xcf\xd5\x01\x46\xcf\x56\x7a\xe7\x52\x6d\x11\x43\x52\xe4\x3d\x06\x7c\x2b\xb4\x6b\xd1\x6e\xab\xea\xfd\x5d\x55\xdd\xdd\xdd\xcd\xc3\x46\x4f\xf8\xe9\x0a\x2b\x7f\x95\x91\x73\x6a\xb7\x3c\xbd\x1f\xf6\x2b\x44\xbf\x48\xcf\x1f\x55\x05\x00\x90\x96\xf2\xc6\x0b\x05\x7a\xe8\xf6\x68\xb9\xb4\x43\x1c\xa4\x06\x7c\x96\xce\x53\xdb\x6c\xf3\x84\x07\x0f\xd2\xc1\xd0\xc7\x46\x9a\x94\x96\xa5\x47\xa8\xdd\x60\xb1\x50\x52\xc0\x76\x43\xdf\xab\x31\x63\x38\x2f\x46\x47\x3c\x37\x70\x37\x53\x69\x04\xc0\x46\x78\x4c\xa3\xf8\x3f\xb9\x73\x12\x36\xc0\xfc\x9b\x51\xee\xe1\x3f\x9f\xe4\xf3\x9f\xfe\x7f\xe2\x03\xdb\xfb\xa0\xa5\x97\x42\xc9\xcf\xd8\xcc\x20\x92\x97\x78\xc2\x44\xd9\xd2\x01\x76\xd2\x53\x37\x9c\x29\xb5\x64\x68\x09\x9a\x83\xda\xa2\xf0\x0b\x18\xb2\x24\x40\x5c\x2c\x77\x23\xc3\xe7\xb9\x7d\xb7\x4b\x03\x7f\x8b\xb5\xa6\xbf\xd9\xbc\x90\x0f\x62\xc0\x54\xaf\x3a\x54\xa9\x08\x95\xf6\xa2\xa1\x79\xd9\x1b\xd1\xd1\xbe\x92\xec\xdb\x30\xc4\x3d\x7c\x6c\x1a\x8b\xce\xfd\xe5\xc2\xde\xbf\x87\x3a\xff\x8e\x70\x16\x7b\x9b\x84\x41\xb5\x68\xae\xb2\x37\x2f\x7b\x61\xaf\x37\xab\xd6\x26\xee\x5a\x35\x73\xd1\x46\x48\xc4\x57\x47\x96\xb7\xf8\xfb\x20\x2d\x17\xaf\x83\xd6\xd8\x1c\x5d\x22\xc6\x04\xb2\x20\x85\x52\xef\x4c\x52\x63\x5f\x5a\x63\xda\x22\x8d\x41\x07\xda\xe4\x05\xe7\x6b\x19\x0d\xbb\x7d\xda\x6a\x8f\x68\x71\x93\xe7\x4e\x76\x36\x85\x82\x76\x12\xd3\xc7\x0a\xed\x8d\x73\x32\x6e\x26\xa6\x0d\x45\x4a\x46\xc4\x0d\xa5\x8f\x61\x70\xc5\x74\xf2\xb8\x31\x6c\x87\xc6\x1a\x9d\x13\x56\xaa\x31\xea\x13\x26\x38\x73\xd6\x10\x2d\xd9\x5e\x64\xe5\x52\x04\x94\x7d\x22\x52\x48\x5a\x2a\xf3\xa8\x1b\xf6\x91\x98\x96\x81\x63\x71\x92\xb8\x71\x36\x39\x6c\x0d\x7e\xb0\x54\x34\x91\x3b\xf3\xfe\x66\xb1\x33\x27\x6c\xf2\x3e\x37\x99\x38\x03\x79\x9c\x28\x88\x77\x4c\x2e\xe8\x1c\x28\x3c\xa1\xa2\x02\xed\x87\xbd\x92\xf5\x06\xf6\x03\x15\xad\x74\xf4\x8c\xe2\x22\x28\x6e\x7b\x85\xdd\x0c\x2c\x65\x81\x85\x41\x51\x56\xa4\xc8\x38\xed\x6c\x57\x0e\xce\x5c\xb7\xcd\x80\x6a\x96\x7f\xcc\x0e\x6a\xe4\x2d\x24\xac\x9e\x2c\x7d\xd9\x9f\xb0\x6a\x27\x46\x38\x58\xa1\x7d\x54\x75\x71\x9d\xec\x23\x6d\xe8\xa9\x16\xc8\x1d\x79\x4a\x2c\x5a\xac\xe8\xb3\x0a\x89\x12\xdf\x9c\x5d\x12\xbb\xf5\x4c\x2d\x52\x97\x32\xee\x0c\x81\xeb\x2f\xe5\x3e\xbb\xee\x8f\xd6\x0c\x07\xda\x9a\xb3\xbe\xba\xd6\xa1\x20\x95\xd8\x2b\x0a\xca\x2b\x3e\x71\xf2\xae\x71\x89\xb0\x16\x7e\xcc\x6c\x9f\x61\x7c\xbb\x1f\xd4\x15\xed\xa0\x73\xb9\x2f\x28\xea\xf6\x1e\xfe\x1a\xca\xf7\x8f\x3c\x85\xa7\x19\xb7\x7c\x14\x90\x61\x67\xd1\xc5\x13\x46\x1b\xad\x0e\xc5\x45\xdd\x00\x27\xa1\x06\xbc\x98\x16\xa6\x6c\x63\xdb\xc2\xcf\x3f\x43\xb4\xe2\x62\x24\xfd\xbd\x49\xfc\x2f\x54\x1c\x07\xdd\xe0\x3c\xa9\x42\x5a\xc9\x89\x0e\x41\x84\x20\x25\xc4\xa8\x6e\xcb\x5e\xc3\x3e\xbd\x99\xc1\x7f\xa9\xe6\x9f\xbe\x14\x3e\x4e\x87\x8a\x1f\xe7\xe3\xb8\x7b\xac\xd0\x31\xef\x26\x57\xd2\xf1\x6f\x98\x48\x50\xea\x5a\x0d\x0d\x92\x94\x4c\x27\x93\x60\x46\x7d\xc4\xfa\x69\x1e\x84\x48\x01\x19\xe5\x8c\x7c\xae\xa5\x0c\x91\xc2\xbf\x46\xe0\x87\x30\x04\x81\x5f\x4d\x19\xa1\x31\x69\xd0\xba\x9a\xdf\x80\x92\x4f\x74\x18\x55\x92\x55\x54\x47\xf2\x48\xe8\xa6\x08\x28\xd6\xb9\xf4\x82\x44\x93\x6c\xb9\x68\x3d\xf4\x2a\x9c\x45\xe0\x75\x22\x4f\x49\x5a\x12\x79\x12\xb7\x5e\x3c\x61\x61\x63\x62\xe8\xf8\xc6\xd1\xd6\xb4\x1e\xfe\xd2\x4f\x63\x8f\x2f\xf6\x4f\xc4\xba\x09\x0a\x24\xf4\xcc\xed\xb2\x8e\xe2\x61\xf4\x9a\x32\x22\xf1\x26\xa4\x0e\xf9\x28\x5b\x2b\x1f\xe3\x60\x7a\xea\xce\x20\xe4\xd1\xa4\xf8\x84\x0f\xd2\x45\xe3\x39\x0c\x0c\xf2\x25\x0a\xc1\xcd\xb4\x32\x32\x04\x6d\x22\x45\x04\x42\x6d\xac\xc5\xda\xab\xf1\xaa\xf8\x47\xe7\x96\xe1\x2f\x72\x7c\xd2\x8c\x02\x4e\xcb\x3d\x73\x16\x51\x12\xc8\x71\xf8\x5c\x1c\xd3\x1f\x99\x78\xb3\x78\x7b\x7b\x1d\x3f\x39\x54\xed\x94\x66\x12\xca\x3a\xcf\x24\x8f\x12\xbb\x4c\x63\x93\xaa\x25\x3c\x4a\x40\x57\x33\xca\xa5\x68\x4c\xb1\x9a\x50\xf8\xb2\x0c\xca\x75\x82\x37\x5f\x3b\x82\xbe\x90\x2a\x5e\xf3\x3e\x0b\x9e\x4d\xee\x98\xcd\x7a\xee\xd8\x9c\x70\x21\x22\xd2\xad\x06\xf3\x4c\x6d\xf9\xfc\x37\xf6\x2c\x15\xc4\xda\xe9\xac\x43\xa1\x27\x34\x11\x01\xf1\x84\x76\x5c\xde\xf0\xe5\xd9\xf3\x5b\x03\xf7\xd2\x3d\xd9\x14\x94\xb3\xd3\x60\x2b\x35\x4e\xcd\x5b\x5e\x74\xe5\x78\xb6\xc6\x76\x79\x5b\xfa\xca\xdd\xd1\x14\x7f\x7e\x8d\x34\xbd\x2a\x08\x1c\xc2\x17\x46\x2e\x2a\xa6\x48\xf8\x4d\xba\x6f\xa1\x21\xe5\xce\xe5\xf5\xc6\x20\x9b\x7e\xa0\x35\x22\x6c\xb9\x0d\x09\x59\x8a\x21\x0a\x57\x5b\x45\xbf\xc9\xcf\x33\xf9\x30\x93\x1d\xbd\x95\x14\x98\xa4\x0d\x17\x75\x7e\xc9\x40\x01\xe2\xe5\x1e\x7d\x55\x60\xef\xc2\x76\xbe\x2b\x12\x9b\x17\x78\xe7\x66\x4c\x05\xab\x22\x3b\xf3\x5c\xd9\x7a\x12\x30\x36\x6b\xf3\x7f\x58\x02\x59\x7c\x8d\x61\xfe\xfc\x8a\x90\xf9\x18\xd4\x4b\x91\x25\x89\x69\x54\x50\x79\x42\x83\xb1\x80\xbf\x0f\x42\x85\x6f\x2b\x9a\xe6\x45\x25\x03\x2f\x4a\x35\x3a\x0f\x70\x9c\x48\x35\x0b\x55\xae\x7f\x76\x7b\x6c\x8d\xc5\x1d\x4b\x03\xf4\xb1\x2a\xd5\x90\x17\x5d\x6c\x48\x6b\xe0\xf1\xb6\x64\x8f\x07\xa9\x35\x95\xd1\xe2\x4e\xb4\xdc\x96\xae\xcc\x7e\x9d\xb8\xd9\xc0\x9b\xe9\xe3\x5b\xf8\xf0\x72\xb4\xff\x91\x2b\x64\xbf\x20\x76\xbe\x03\x8b\x9a\xa3\x44\xb6\xb7\x78\xe2\x0b\xca\x34\x5c\x04\x89\x72\xbd\x8c\xbc\x52\x87\x88\xa6\x21\x0d\x52\x16\x8a\xe4\x34\xcb\xb4\x5c\x39\x67\x5e\xa7\x42\x16\xc9\xbf\xbb\x83\x8f\xce\xa1\xf5\xe5\x4a\x6b\xce\xe9\xd1\xfd\x72\xd1\xc1\x84\x44\xe2\x20\xc9\xeb\x25\x5e\x54\xdb\xa7\x72\xff\x2c\xc3\xb9\xa7\xf7\x89\x40\x22\xda\x15\x1d\x44\xb6\x6f\xa5\x7b\x88\x3f\x31\x84\x1c\x1f\xd0\x3f\x8e\x3d\xde\xdc\xde\xde\xc3\x7a\x76\xff\x26\x34\x09\xe2\x14\x65\x66\xb9\xda\x74\xbd\xf0\x93\x4b\x46\xf2\xef\x3b\x7a\xe5\xaa\xea\xfb\xbf\xf4\x98\x1d\x48\x8f\xbf\xab\x16\xdd\xd0\xbd\x5a\x84\x25\x3d\xdf\x76\x96\x09\x02\xf0\xd7\xae\xf7\x63\xac\xc0\x78\xce\xd4\x63\xfc\xbd\xc1\xc4\x31\x33\x52\xe5\xac\x1e\x05\x15\xee\x67\xb4\x66\x29\x1d\xab\x69\x15\x2e\x97\xb8\x59\xa3\xd0\x95\x50\x5f\x1e\x03\x7f\xda\xfe\x74\x0f\x6f\x68\x4b\xd3\x78\x56\x63\x52\xaf\xd1\x26\x0e\x19\xff\x24\x35\x35\xe9\xcd\x85\xef\x5f\xfe\x17\x00\x00\xff\xff\x1a\xfd\xf3\x08\x64\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x1c, 0xf4, 0x50, 0x78, 0x2d, 0xa7, 0xca, 0x50, 0x3f, 0xc0, 0x48, 0x50, 0x81, 0x99, 0x2d, 0xd4, 0x28, 0x3c, 0x7, 0xd0, 0xe1, 0x9f, 0x3e, 0xc8, 0x5c, 0x12, 0x3b, 0x91, 0x5e, 0xf8, 0x6}}
	return a, nil
}

var _utilitycontractsPrivatereceiverforwarderCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xc1\x8e\xdb\x36\x10\xbd\xeb\x2b\x26\x2e\xd0\x4a\xc1\x46\xbe\x14\x3d\x18\xeb\x6c\x83\x6d\xf7\x58\x2c\x92\xb4\xd7\x62\x44\x8d\x2d\x36\x32\x29\x90\x23\xab\x8b\x85\xff\x3d\x20\x25\x51\xa2\x64\x07\xd8\xbd\xac\x28\x71\x66\xde\x7b\x7c\x33\xf4\xf6\x7d\x92\xfc\x04\x4f\xad\x3a\xca\xa2\x26\xf8\xaa\xbf\x91\x82\x67\x23\xcf\xc8\x04\x9f\x49\x90\x3c\x93\x81\x47\xad\xd8\xa0\xe0\x24\xf9\x5a\x49\x0b\x62\x58\x82\x3c\x35\x35\x9d\x48\xb1\x05\x04\xdb\x90\x90\x58\x83\x21\xab\x5b\x23\x08\x50\x95\x60\xc6\x14\x52\x31\x99\x03\x0a\x82\xa4\xab\xb4\x25\x28\xa9\xd1\x56\x32\x1c\x5a\x25\x58\x6a\x05\xd2\x82\x56\xf5\x0b\x08\xac\x6b\x74\x60\x8a\x17\x40\x05\x58\x9e\xa4\x02\xae\x8c\x6e\x8f\x15\x20\x34\x6d\x51\x4b\x01\x02\x1b\x2c\x64\x2d\xf9\x25\x4f\x92\xf7\xdb\x24\x91\xa7\x46\x1b\x0e\x54\x7a\x26\x07\xa3\x4f\xb0\xc9\xb7\x79\xbe\x8d\x3e\xe4\xa2\x14\x9b\x24\x69\xda\x62\x22\x33\xb0\x1e\x49\x3f\x69\xd3\xa1\x29\xc9\xc0\x6b\x92\x00\x00\x6c\xb7\xf0\xe7\x99\x14\x03\x57\xc8\x0e\x2d\x9d\x24\x33\x95\xd0\x55\xa4\x80\x5d\x5a\x0b\x68\x02\x33\x2a\x81\x35\x70\x45\xc0\x68\x8e\xc4\x41\x0b\x9f\xcd\x95\x26\x9f\x6e\xa8\xfb\x47\x1f\x95\xe2\x49\xb7\x8a\x77\xf0\xf7\x93\xfc\xff\xb7\x5f\xef\x80\xf5\x0e\x3e\x95\xa5\x21\x6b\x1f\xb2\x24\xc4\xd6\xc4\xf0\x85\x54\x49\xe6\x0b\x6b\x83\x47\x7a\x46\xae\x76\x30\x5b\xc4\x7b\x17\xec\x6e\x06\xfd\x20\xe6\xd9\x2b\xdf\x87\x4c\xcf\x53\x99\x70\xf0\x2b\xe9\x06\xf9\xbc\x79\xa4\x75\x82\x19\xf2\xca\xcc\xa5\xf2\xfa\x75\xb2\xae\xa1\x20\xb0\xa4\x38\x8f\x63\x09\xf8\xa5\x21\x90\xaa\x94\x02\x99\xec\x70\x0e\xfe\x28\x10\x0c\x1d\xc8\x90\x12\xe4\x44\xc7\x58\xeb\x3e\x45\x78\x44\x21\xc8\xda\xd4\x52\x7d\xc8\xe0\x8c\xc6\x6d\x96\x8d\x24\xa7\xfa\x63\xb0\xd5\xfd\xcf\xaf\xb1\x65\x46\x19\x2e\x1f\x23\x52\x03\x85\x6b\x85\xb6\x5b\x67\xc7\xde\xdd\x1e\x2c\xe3\x37\x72\x60\xff\xc1\xb6\x66\xd0\xc5\x7f\x24\x18\xd0\x7a\x9b\x9b\x63\xeb\x3a\xc9\x77\xcd\xa1\x17\xd0\xce\x33\x49\x1e\xed\x14\xe0\xfe\x62\x87\x4c\xad\x95\xea\xe8\xbf\x59\xd6\x86\xca\x49\x8d\x1f\xf0\x1f\x8d\x9f\xb9\x16\x1c\x69\xa4\xae\x63\x76\xf0\x7b\x4c\xdd\x57\xc9\xe0\x35\xa4\x70\x7f\xf5\xcc\xd2\x9f\xe9\x00\x7b\x70\x8a\xe6\x01\x5d\x5e\x68\x63\x74\x97\x66\xef\x92\x55\x5c\x81\x35\xba\xb3\xda\xfb\x0e\xcd\x87\x65\xbc\x6f\x96\x3b\x8f\xd1\xdd\x7f\x70\xff\xb3\x78\xbb\xeb\xc6\x5b\xbd\x34\xe4\xef\x9b\xc9\xa3\xd4\x9d\x22\xf3\x90\x63\xdf\x58\x59\xc8\x74\x99\x92\x4a\x25\x39\x7d\xab\x35\x96\x22\x35\x86\x16\x6f\x06\x6a\x0b\x8d\xe0\xdd\x1e\x94\xac\x77\xb0\x79\xd4\x6d\x5d\x82\xd2\x0c\xfd\xb7\x69\x0a\x4f\x16\xf7\x63\xcd\x1d\xf7\x84\x69\x13\x15\xb9\x44\xab\xf8\x5c\x60\x3f\xd5\x4f\xe2\x80\x4b\x98\x74\xc2\x10\x32\xfd\x45\xdd\xd4\xcb\xfd\x2b\x67\x5f\x45\xdd\xac\xc7\x27\x58\x9d\xe4\xca\xc3\x6a\x8c\x3e\xcb\xd2\xfb\x70\x5e\x68\xf0\xa0\x9b\x15\xce\x72\xeb\x1a\x6f\x97\xdb\x59\x75\x36\x6d\x26\x81\xb9\x35\x0a\xee\x3f\xf4\x35\xe0\x6a\x85\xf0\x98\x8d\xe4\xd7\xa3\xac\x1f\xb1\xb3\xcc\x23\x78\x4b\xaa\x1c\xdc\xe6\x41\xd9\xf4\x5f\x18\xdc\x14\xe6\xf5\xdd\x30\xd5\x6e\xf7\xd3\xaa\x31\x50\x08\x67\x59\xd8\xc3\x91\xf8\x53\xbf\x48\x83\x4b\x57\xdb\x9b\x78\x42\xc3\x7e\x4c\x90\x1f\x89\xe7\x0a\xde\xba\xdc\xf2\xf0\xf4\x31\xbd\xb9\xe7\xe6\x3d\x90\xad\x9c\x3d\x19\xfa\xe1\x01\x1a\x54\x52\xa4\x6b\x47\x47\xb3\x7a\xa0\x30\xce\x3c\x32\x9b\x05\xcf\x05\xc7\xd5\x2c\xe8\x35\x8e\xa1\x5c\xf7\xb5\xef\x68\xeb\x4f\x74\x75\xf1\xdd\xf9\xd1\x79\xed\x4a\xbc\x1b\x7e\x72\x2c\x2f\xbe\xe8\xfc\x7c\x8b\xad\xee\x63\x3f\x13\xc7\x72\x8b\xcd\xb7\x2f\x64\x17\xb5\xb8\x91\x6f\x45\x4d\x68\x60\x3f\x83\xb9\x28\x35\x7a\xc2\xe2\x99\xd2\xd0\x13\x3d\xda\x34\x9b\x4d\xc5\x15\x81\xe1\x28\x2e\xc9\xe5\x7b\x00\x00\x00\xff\xff\x76\x9e\xa6\x51\x29\x0a\x00\x00"

func utilitycontractsPrivatereceiverforwarderCdcBytes() ([]byte, error) {
	return bindataRead(
		_utilitycontractsPrivatereceiverforwarderCdc,
		"utilityContracts/PrivateReceiverForwarder.cdc",
	)
}

func utilitycontractsPrivatereceiverforwarderCdc() (*asset, error) {
	bytes, err := utilitycontractsPrivatereceiverforwarderCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "utilityContracts/PrivateReceiverForwarder.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xce, 0x6b, 0x90, 0x12, 0x2c, 0xaf, 0xe4, 0x8c, 0xfe, 0x69, 0x5c, 0x8e, 0x67, 0x97, 0x7c, 0xc2, 0xf4, 0x5d, 0x33, 0x3c, 0xd2, 0x77, 0x98, 0x6b, 0xd, 0xbf, 0xe2, 0xef, 0x17, 0x95, 0x7c}}
	return a, nil
}

var _utilitycontractsTokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc1\x6e\xe3\x36\x14\xbc\xf3\x2b\x66\x53\xa0\x6b\x07\x59\xf9\x52\xf4\x10\x24\xdd\x16\x69\x73\xec\x21\xd8\xb6\xc7\x82\x26\x9f\x2c\x6e\x64\x52\x20\x9f\xac\x06\x81\xff\xbd\x20\x45\xd1\x52\xe2\x14\xe9\x65\x7d\xb1\x25\xf3\xcd\x9b\x79\x33\x24\x37\x97\x97\x42\x7c\x87\xfb\xde\xee\xcc\xb6\x25\x7c\x71\x8f\x64\x71\xef\xfc\x20\xbd\x36\x76\x87\x3b\x67\xd9\x4b\xc5\x42\x7c\x69\x4c\x80\xca\x8f\x08\x8d\x1b\x02\x1a\x37\x40\x5a\x48\xa5\x5c\x6f\x19\xca\xf5\xad\x46\x20\x46\xdf\x41\x42\xf5\x81\xdd\xbe\x80\x8f\xd8\x0f\xa4\xc8\x1c\xc8\x0b\x76\x90\x6d\xeb\x06\x70\x43\x7b\xb0\x43\x3d\x76\x05\xc7\x75\x21\xbe\x91\xd0\xa6\xae\xc9\x93\xe5\xd2\x63\x68\xc8\xd2\x81\x7c\x2c\x7b\x82\x1f\xd1\x72\x4d\x15\x59\xd2\x13\x94\xb4\xe8\xfa\x6d\x6b\x42\x03\x8e\xb4\xb3\x20\xf2\xf0\x14\x5c\xef\x15\x41\x06\xc8\x42\x06\x4a\x76\x72\x6b\x5a\xc3\x4f\xf8\xda\x07\x46\x6b\x1e\x09\x12\x7f\xca\xbe\xe5\x2b\x21\xad\x8e\xed\x10\xc8\x46\x0c\xed\x28\xd8\x8f\x0c\x3a\x90\x85\x25\x8a\x94\xf1\x68\xdd\x00\xc3\x30\xe1\x44\xba\x12\xe2\xaf\x86\xec\x7c\x44\x83\xb4\x9c\xb4\x29\x4f\x92\x63\x8f\xc2\xed\x6a\x94\xa4\x64\xdb\xa6\x6e\xe3\x8a\xdf\x69\x28\x2b\x44\xdd\x5b\xc5\xc6\x45\x44\x8d\xce\xbb\x83\xd1\x14\x9b\x0e\x86\x9b\x54\x53\x04\x79\x4a\x14\x14\x81\x1b\xc9\x23\x72\xec\x3d\x1b\xb4\xe0\x86\x8c\x3f\x8d\xbb\x12\xe2\x72\x23\x84\xd9\x77\xce\xf3\x0b\xd7\x6a\xef\xf6\xb8\xa8\x36\x55\xb5\x59\xfc\x51\x29\xad\x2e\x84\xe8\xfa\xed\x29\x1a\xe9\x8f\x59\x84\x9e\x85\x00\x80\xcd\x06\xbf\x1d\xa2\x93\x89\x90\x09\xa0\xbd\x61\x26\x9d\x1c\x9d\x58\x48\x4f\xd0\xd4\xb9\x60\x78\x1c\x6b\x14\xc5\xd2\xef\x88\x27\xaf\x7d\x42\x8b\x1d\x29\xc1\x4d\xd3\xd1\xbf\x8e\x75\x2b\xb9\x8f\x93\xbe\xc6\x1f\xf7\xe6\x9f\x1f\x7f\xb8\x4a\xdc\xaf\xf1\x8b\xd6\x9e\x42\xf8\xbc\x16\xa5\xbe\x64\xa1\x0c\xf8\x7a\x29\xbb\x2a\xe3\xcc\x1a\xb2\x8e\xb4\x15\x4c\x88\xcc\x3d\x25\x8a\x73\xce\x49\xc8\x60\xda\x16\xdb\x14\x19\xae\x96\xb5\x04\x7e\xea\x08\xc6\x6a\xa3\x24\x53\xc8\x03\x49\x33\x91\x73\xe3\x5c\x7a\x9c\x89\x1e\x21\xca\x4f\xa9\x14\x85\xb0\x0a\xd4\xd6\x6b\x1c\x64\x34\x5d\x99\xce\x50\x14\x7f\x57\x02\xbd\x60\x9e\x79\x9e\x43\xdb\x6c\xa2\xf8\x31\x5e\x63\x66\xe4\x23\x85\x69\x13\xc0\x6d\xbf\x92\xe2\xb4\x6d\x2c\xa4\xdf\xf5\xfb\xb4\x2b\xad\x9e\xe2\x14\xe6\x48\x86\x27\xf3\x0a\xa7\x8f\x21\x23\xf5\x21\xa6\x22\xed\x27\x76\x9e\xf4\x49\xf2\x39\x5a\xd1\xa8\xba\xb7\x13\xf3\xd5\xe8\xe6\xcf\x4b\x9f\x12\xf0\x1a\xcf\xa5\x2a\x7e\xda\x59\x66\x1e\xa8\xc6\x2d\xe2\xa4\xaa\x42\xa8\xda\x3a\xef\xdd\x70\xf3\xfd\xf3\x79\xd3\x8f\x3f\xad\xd6\x1f\xc4\x2b\xc8\xad\x6c\x65\xb4\xe7\x36\x05\xab\xca\x8f\xcb\x75\xb3\xb6\xd5\x92\xf8\xcd\xa7\xf8\xbd\x5e\x2e\x8f\x3b\xe1\xed\x1c\xe7\x0e\x53\x90\x93\x08\x37\x58\xf2\x9f\x2b\x39\x86\x7a\x5d\xd0\x8e\x0b\xb7\x55\x23\xed\x8e\x1e\x26\xc1\xf9\x39\x2c\x7d\x81\xab\xd3\x8b\xba\x9c\x91\xd9\xb9\x7c\xbe\xe8\xd3\xd2\xff\xf2\xe7\x45\xaf\xd5\xdf\xb0\x34\x3c\x9c\x0b\xe4\x4b\x9f\x3a\x4f\x2f\xde\xc4\xcf\xbc\xfa\x3d\x4e\xe1\xc3\x2d\xac\x69\xaf\x71\x71\x97\x6e\x21\xeb\x18\x63\xd9\xb9\x43\x31\x9d\x67\x51\xe4\x89\xd6\xc5\x82\xc2\x71\xf1\xb4\x0c\x0e\x6e\x17\xec\xce\x0d\xdf\x58\xc3\xab\xb3\xdb\xf1\x7d\xea\xff\x57\x48\xbf\xad\xf4\xd7\x69\x18\x0b\x8e\xe5\x98\x7f\x7d\x71\xe5\x57\xf1\x34\xb1\x34\x2c\xae\xe3\x89\x56\xb9\xc2\xde\x88\x5d\x8e\x5c\x89\xdb\xab\x1e\x6f\x8c\x3b\x9e\x15\xa5\xdd\x69\xd0\x9e\xb8\xf7\x16\x37\x9f\xf2\x3d\x7c\x16\xa6\xfc\x5c\x67\x85\x47\xf1\x6f\x00\x00\x00\xff\xff\x91\x6b\x10\x08\x31\x09\x00\x00"

func utilitycontractsTokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_utilitycontractsTokenforwardingCdc,
		"utilityContracts/TokenForwarding.cdc",
	)
}

func utilitycontractsTokenforwardingCdc() (*asset, error) {
	bytes, err := utilitycontractsTokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "utilityContracts/TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x32, 0x22, 0x16, 0x73, 0xff, 0x5a, 0xd6, 0xef, 0x6d, 0xa2, 0x31, 0x18, 0xf, 0xab, 0x51, 0xc0, 0xbf, 0xd4, 0xf6, 0x9e, 0xb8, 0xfb, 0x33, 0xe3, 0x24, 0xac, 0xb, 0xe5, 0xfb, 0xa4, 0x33}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleToken.cdc":  exampletokenCdc,
	"FungibleToken.cdc": fungibletokenCdc,
	"utilityContracts/PrivateReceiverForwarder.cdc": utilitycontractsPrivatereceiverforwarderCdc,
	"utilityContracts/TokenForwarding.cdc":          utilitycontractsTokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleToken.cdc": {exampletokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc": {fungibletokenCdc, map[string]*bintree{}},
	"utilityContracts": {nil, map[string]*bintree{
		"PrivateReceiverForwarder.cdc": {utilitycontractsPrivatereceiverforwarderCdc, map[string]*bintree{}},
		"TokenForwarding.cdc": {utilitycontractsTokenforwardingCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
