// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleToken.cdc (7.102kB)
// ../../../contracts/FungibleToken.cdc (7.228kB)
// ../../../contracts/TokenForwarding.cdc (2.361kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x6f\x1b\xb9\x11\x7f\xf7\xa7\x98\xde\x43\x2b\xe3\x6c\xd9\x05\x8a\x3e\x18\xce\x5d\x9c\xc6\x29\x82\xb6\x69\x91\xe4\xda\x57\x73\x77\x47\x12\x9b\x5d\x52\x20\xb9\x92\x75\x86\xbf\x7b\x31\xc3\x3f\x4b\xae\x56\xb2\x7d\x6e\xf2\x70\x17\x2d\x39\x7f\x38\xf3\x9b\x99\x1f\x19\xd9\xad\xb5\x71\xf0\xa1\x57\x4b\x59\xb5\xf8\x55\x7f\x43\x05\x0b\xa3\x3b\xb8\xbc\xff\xf0\xcb\xa7\xbf\x7e\x7c\xf7\xf7\xdb\xaf\xff\xfc\xdb\xed\xa7\x9b\xf7\xef\x3f\xdf\x7e\xf9\x72\x72\xb2\xee\x2b\xa8\xb5\x72\x46\xd4\x0e\x6e\xef\x45\xb7\x0e\x62\x57\x23\x2d\x0f\x27\x27\x00\x00\x17\x17\xf0\x55\x3b\xd1\x82\xed\xd7\xeb\x76\x07\x7a\x51\x48\x59\x90\x0a\xf0\x5e\x5a\x87\xaa\x46\x96\x20\x0b\x1b\x61\xc0\x91\xd8\x17\x96\xba\x82\x5f\x3e\xc8\xfb\x3f\xff\x29\xa9\xbc\xdd\xa0\x72\xe0\x56\xc2\x81\xb4\x80\x9d\x74\x0e\x1b\xd8\xae\x50\x81\x5b\xe1\xe0\xa0\xb4\x50\x1b\x14\x0e\x9b\xa4\x1a\x59\xd4\x1b\xff\xa8\xa4\x93\xa2\x95\xbf\x62\x33\x93\xfe\xef\xa5\xc1\xd3\x67\x59\xf4\x07\x11\x06\x61\x2b\xdd\xaa\x31\x62\x1b\x82\x28\xe0\xdf\xa2\x6f\xdd\xa4\xed\xff\xc4\xad\x33\xd1\xe9\x5e\xb9\x68\xf2\x8c\x45\xaf\xe0\xa6\x69\x0c\x5a\xfb\xf3\x4b\x5d\x68\x70\xad\xad\xa4\x15\xa7\x8f\x3a\xf0\x3e\x6e\xdc\x73\xc0\xe9\x17\x9a\x57\xb8\xcd\x5d\xe8\xa4\x3a\x14\xf1\x7f\xf0\xd2\xc8\xe2\xcb\x8f\x68\x9d\xd1\xbb\x03\x26\xde\xf5\x46\xfd\x36\x13\x82\x0f\xc2\xde\x1b\x30\x68\x75\x6f\x6a\x3c\x8c\x21\x3e\x8b\xf9\x8b\x5f\x9b\x89\xb6\xd5\x5b\x6c\x6e\x7e\xab\xd9\x8a\xdc\x7e\x8e\x59\x3e\x5f\x32\x3b\x58\x18\x32\x7d\x71\x91\xac\x8a\x7a\x05\xbd\x45\x03\xd6\x69\x83\x16\x84\x02\xa9\xac\x13\xaa\x46\x2a\x45\xad\xda\x1d\x57\x0c\x0b\x53\x2d\xba\x15\x4a\xbf\x5b\x2c\x31\x55\xf0\x0a\x61\xd1\xab\xda\x49\xed\x2b\x76\x10\x11\xaa\x81\xa5\xde\x20\xc5\x1c\x2a\xaf\x6c\x6d\x90\xbf\xaf\xb5\x75\x54\x8b\x8d\x64\xc1\xa8\x4d\xaa\x51\xab\x88\x75\xbb\xe3\xec\xd6\xa2\x6d\xb1\x99\xe7\xb6\xeb\x15\xd6\xdf\x2c\xac\xc4\x7a\x4d\xf1\x72\x60\x7a\xe5\x64\x87\x2c\x89\x1b\x34\x20\x92\x7f\x1c\xb8\x42\x45\xd4\xf4\x39\x84\x96\xd6\x95\x3f\x7a\x85\x31\xc8\xf1\x54\xd4\x3a\xf0\xde\x51\x70\x8a\x4e\xc2\x99\x23\x1f\xa3\x36\x0f\xc4\x85\x54\x2c\x7b\x06\x56\xd3\xb2\xe1\xc4\x29\x0d\x5b\xb1\x83\x85\x26\xc7\x3a\xd1\xca\x5a\xea\xde\xfa\x44\x38\x1d\x4c\xfa\x00\xa6\xa8\xe8\x3e\x18\x95\x0a\x84\x34\x73\xb8\x01\xbb\xc6\x5a\x8a\x36\x00\x6d\x80\x86\x42\x6c\x2c\x29\xaa\x06\x17\x9c\x66\xe0\x46\x6d\x43\x45\x16\x51\x20\x14\x25\x35\x6c\x7f\xd4\xb6\xe7\xff\x32\x7a\x23\x1b\x34\x67\xa3\xef\x9f\xb1\x46\xb9\xd9\xff\xfe\x4e\xb4\x0c\xa6\xd0\xee\x83\xf9\x95\x6e\xc9\xc3\x15\x42\x15\xd6\xf5\x02\x04\x07\xc0\x06\xbf\xd2\xf6\xd8\xef\xc3\xce\xb2\xd7\x27\xc8\xc4\x46\x5d\x28\x25\x24\xc4\xd3\x70\x50\x29\xff\x04\x8c\x24\x4b\x82\xb3\x91\xe6\x53\x78\x48\xeb\xf4\xc7\x62\xbb\x98\x47\x95\x6f\xa2\xf2\xb4\xe5\xb1\xf0\x24\x76\xf8\xec\x5b\xbe\xfc\x21\xa2\xd0\xe3\x45\x7c\x8b\x35\xe7\x70\x49\x30\xe5\xee\x00\x82\x3f\x0a\xb3\xec\x3b\x0c\x39\x8b\xa8\x52\x4d\x32\x61\xbd\x92\x20\xc3\x03\x25\xd5\xdd\x3c\x17\xfa\xe8\x02\xa4\x6c\xe8\x25\x0e\x69\xae\x0b\xb3\x0b\x45\x1a\xdb\x4e\x6f\x3d\x52\x28\x3d\xb9\x02\x52\xdb\x69\x85\xbb\xb4\xb3\x42\xa9\x96\xe0\x8c\x50\x76\x81\xc6\x60\x33\x27\x2b\x06\x5d\x6f\x94\x4f\xac\xc2\x6d\xbb\xcb\x95\xc4\x42\x0a\x26\x75\x51\x4e\xac\xd7\x97\x25\x55\x8a\x74\x5c\x83\x55\x36\xae\x72\x55\xd8\x5a\xdc\x52\x31\xcd\xa7\xc2\x4c\x80\x59\xf4\x2a\xc5\x69\xdc\xea\xaf\xe0\x6d\x89\x51\xef\xd1\xd1\xa4\x17\x3f\xcf\x43\xcc\x0b\x01\x6a\xd9\x07\x47\xb7\xff\x7f\x1c\xdd\xac\x4c\x6f\x15\x9a\x9f\xe7\xc2\xcf\xd1\xd3\x42\x97\x8f\x23\x5c\x9f\xe7\x9d\x60\x80\xa9\xd7\x76\x7a\x00\x81\x21\x62\x2f\x01\x60\xc8\x89\xae\xfe\x8b\xf5\x18\x7d\x0c\x39\xd1\x34\xb6\xa8\x37\x67\x53\x91\x85\x4c\x66\x85\x4c\x3f\xf9\x78\x76\x1a\x8c\xd2\x42\x98\x86\x24\x1c\xa6\x35\x4b\x59\x32\xe8\x9d\xa9\xb0\x16\xbd\xc5\x01\xd2\x45\x95\x91\x8f\x19\x8c\x09\xb0\x68\xa2\xed\xd0\xd8\x78\x34\xb0\xe8\x1f\x06\x6f\x57\xa2\x38\x48\x85\xa8\x08\x84\xb6\xef\xb0\xe1\xa3\x72\x93\x5e\x68\x1e\x34\x01\x81\x81\x4d\xcc\xf7\x10\x16\x42\x3d\xf3\x69\x9d\x42\xd5\xb8\x97\xb4\xe8\x60\xc3\xe7\xbb\x3e\x0f\x1c\xd0\xfe\x0e\xde\xe6\x94\x77\x5e\x9e\xf6\x29\x30\xfe\xe8\xf5\xcd\xc7\x6d\x69\x84\xc9\x7d\x36\x57\x88\x79\x52\xf7\x24\x30\x0b\x19\x78\x03\x97\xf3\xcb\x62\x3d\xe6\x72\x53\x1c\x21\xc3\x67\xd8\x30\x1b\xc7\xa5\x08\x40\xc6\xec\xe1\xcd\xe1\xa5\xf3\x22\x10\x99\xb5\xcc\x66\xea\x3b\xb7\xdd\xda\xed\xa6\x28\x50\x59\x10\x65\x9f\xf4\x48\xa4\x3e\x02\x22\x07\xf8\xaf\x68\x74\x9a\xf3\xaa\x49\x7d\x4f\x0e\x7d\x4d\xb4\x2d\x75\xc8\xd0\xdf\x68\x5a\xf3\x74\xef\x7a\xeb\xfb\x1c\x0d\x72\x9b\x48\x49\xae\x8c\x99\x18\x2b\xf1\x6a\x53\xcb\x1c\xb3\x2f\xfa\xa0\x4d\xe3\x39\x03\x17\x94\x5f\x4f\xca\xea\x9a\x27\x83\x27\x02\xa2\x6a\xb9\x56\x8d\x1f\xd4\x11\xbb\x36\x90\x8a\x30\x76\xc1\xed\xd6\xb8\x47\x09\x08\xeb\xe3\x30\xce\x9e\xee\xa3\x4f\xb4\xb1\xcb\xf9\xe5\x69\x9e\xab\x82\x7c\xdc\x34\x9d\x54\xd2\x3a\x23\x9c\x36\x99\xce\x94\xd0\x4f\xb8\xf5\xbc\xe7\x59\x8d\x2e\xe5\x35\xcb\xd6\x24\x9d\x3f\x36\x50\x46\x86\x0f\x50\xfa\x2b\x78\x1b\x08\xd9\xc3\x7e\x31\x1e\xbd\x13\x14\x3f\x8f\x4f\x84\x69\x0f\x0e\x28\x28\xe7\x43\x3a\x85\xbf\x28\xbc\x32\x7c\xa3\x6b\xc9\xb3\xc2\xe7\x0d\x33\x80\xfc\x5f\xa7\x22\x35\xbe\xc6\x1c\x8b\x46\x54\x78\xb0\x07\x64\x48\xd9\xe7\xfb\x71\xee\xf9\x89\xc8\x55\x20\x08\x7d\xb1\x80\xfc\x7d\x80\x46\x4c\x64\xd1\xcf\xa2\xcf\x09\x04\x63\x26\x15\x08\x1b\xd5\x9d\xbf\xb3\xc6\xbb\x43\xc4\x62\x39\x1f\x13\x6d\x87\x8c\x0c\x4f\x42\xaf\xb0\x44\x62\x5f\x4b\x26\x7d\x2c\xc3\xb4\xdd\x66\xe7\x3a\xe3\x99\x4f\x5e\x75\xb1\xa7\xb9\xec\x9d\xe6\x6c\x4c\x4a\x33\xea\xd7\x1d\x6a\x82\xc7\xc0\x31\xb8\x3b\x41\xd7\xf6\xc7\xe3\x08\x31\x74\xa3\x2c\xbf\xd0\x9f\x10\xe8\x9f\x82\xa6\xd9\xe5\xe9\x15\xfc\xe0\x43\x16\xde\x20\x7c\x3f\xae\x10\x96\x0c\x24\x43\xb1\x50\xdc\xde\x7f\x38\xa4\xed\x3a\xcc\xdf\x51\x06\x0e\xe8\x6d\xd1\x5a\xaf\x94\x33\x1f\xb2\xea\x55\x95\x26\x1e\x5f\x3d\x0f\x7f\x9c\xa2\xa5\xfb\xbe\xc2\xd4\x01\x9e\xe4\xb4\xa3\x87\x99\x31\x05\x85\x57\xb1\x56\xbe\x85\x4d\x77\xd3\x29\x5a\x3e\x3e\x4e\xf1\x7b\xaf\x07\xd0\x7f\x63\xc9\x67\x2d\xef\xb5\x7d\x80\x1a\xdf\x93\x3d\x20\xb5\xb7\x82\x73\xf6\x46\xbd\xa0\x32\x03\x65\x1a\x68\x7a\x7c\xa0\x39\x03\x5c\x2c\xb0\x76\x72\x83\xed\x8e\xb5\xf2\x9d\x6c\x20\xc0\x07\xd4\x7f\xd2\x0e\xaf\x3c\x67\xf7\xf4\x22\x7b\x3a\x13\xbd\xd3\x9d\x70\x92\x4a\x77\x07\xb6\xaf\xf8\x75\x03\x9b\xe1\x7a\x59\x74\xb3\xfc\xe5\xb6\x78\xf6\x61\xa7\xfb\xda\x69\x73\xb4\xea\x87\x50\x7c\x77\x0e\x4d\x52\x22\x22\xe6\x30\x65\x9e\x66\xb0\xa3\x62\x18\x3d\x21\xee\x23\x3b\xc3\x37\x63\x3b\x3f\x02\x43\xb8\x2c\xe9\x3f\x5e\x5e\x12\x93\xce\x43\xeb\x07\x5f\x16\x51\x66\xa1\xe3\x36\x9c\x0d\x11\xa6\x8e\x62\x83\x44\x42\xa5\x2a\x5e\xe8\x46\xc1\x2f\xe2\x37\x5d\xab\x63\x1f\x4f\x4b\xef\x43\x41\xcc\xc9\xde\xec\xfa\x9c\x95\xf9\x1b\xc4\x45\xb0\x7b\x81\x59\x36\x7c\x16\xa7\x8e\x27\x08\x09\xad\xac\xa1\x16\x6b\x51\xc9\x56\xba\x5d\x1c\x1e\x4c\x83\x9b\xfc\x81\x82\x5f\xe4\xf0\x7e\xad\x2d\xda\xf1\x4c\xbd\x0b\x74\xf6\x0e\x3a\x74\x2b\x4d\xd7\x38\xa3\xfb\xa5\x8f\xd8\x5d\x7c\x9c\xba\xe3\x87\x16\xb3\x10\xd3\x44\xa5\x38\x5b\x2b\xd5\xb7\xeb\xdf\x3f\x4c\xbf\x72\x3d\xfe\x34\x2b\xb0\x71\xe1\x8f\x51\x9c\x3a\xbd\x88\x15\x3b\x9d\x30\x4b\x74\xc7\x02\x95\xb6\x7f\xe7\x88\x85\x64\xdf\xc1\x42\x62\x3b\x0a\xd8\xbb\xb8\xf6\xd2\x78\xed\x17\xe1\xc3\xe4\x7b\xe0\x73\x02\x18\xb6\xfe\x3f\xe2\xc7\xc5\xcf\xbd\x7c\x80\x7c\x71\xc3\x98\x1d\x47\x38\xcb\x1e\x41\x38\xeb\x2a\xf3\x75\x4b\xed\x42\xa8\xf0\x28\xcf\xe9\xb0\x2b\xbd\xcd\xd8\x5e\x7a\x3b\xde\x0a\x9b\xbd\x60\x0e\x2f\x5d\x59\xc7\x39\xf2\x2f\x51\xd3\xb5\xfa\x78\xf2\x78\xf2\xbf\x00\x00\x00\xff\xff\x2c\xa7\xfb\x41\xbe\x1b\x00\x00"

func exampletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_exampletokenCdc,
		"ExampleToken.cdc",
	)
}

func exampletokenCdc() (*asset, error) {
	bytes, err := exampletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x2e, 0xbb, 0xac, 0x69, 0x96, 0xee, 0x78, 0x40, 0xd7, 0x70, 0xad, 0x77, 0xdd, 0xa7, 0xa9, 0x10, 0x95, 0x2a, 0x36, 0x33, 0x69, 0x4, 0xc, 0x20, 0x4, 0x34, 0xfe, 0x77, 0xb2, 0xe9, 0x68}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x4f\x93\xdb\xb8\xf1\xbd\xf3\x53\x74\xd9\x07\xcf\xf8\x27\x6b\x7e\x87\x54\x0e\x53\xb5\x49\x76\x6b\xd7\x55\xbe\xa4\x52\x89\x93\xbd\x0a\x22\x9b\x12\x32\x20\xc0\x05\x40\x69\x68\x97\xbf\x7b\xaa\x1b\xff\x48\x8a\xd6\xc8\xf6\x5c\x46\x22\x81\x46\xf7\x43\xf7\xeb\x07\xe8\xe1\xed\xdb\xaa\x7a\x0d\x1f\x8f\x08\xef\x95\x39\xc3\xfb\x41\x1f\xe4\x5e\x21\x7c\x34\x4f\xa8\xc1\x79\xa1\x1b\x61\x9b\xaa\x7a\xfd\x1a\x76\xe9\x25\xbf\xdb\x41\x6d\xb4\xb7\xa2\xf6\x20\xb5\x47\xdb\x8a\x1a\xab\x8a\x0c\xe5\xaf\xe0\x8f\xc2\x83\x50\x0a\xda\x64\xd6\xb3\xd9\x34\xd3\xc1\xd9\x0c\xaa\x81\xa3\x38\xd1\x2b\x7a\xde\x1a\xdb\x81\x37\xdb\xea\x43\x0b\x02\x06\x87\xd6\xc1\x59\x68\xef\xe8\x7d\x83\xbd\x32\x23\x08\xd0\x78\x5e\x98\xda\x80\x3f\xa2\xb4\xf9\x7b\x15\x2c\x6b\xc4\x86\x66\xca\xae\x57\xd8\xa1\xf6\x34\x0c\x66\x81\x14\x7f\xb7\xec\xff\xc4\xc8\xc2\xbd\xd6\x28\xc2\x88\x02\x22\x2b\x76\x50\xe8\x40\xe8\x06\xb4\xe8\xa4\x3e\x54\x1c\xae\x9f\x21\xe0\x7a\xac\x65\x2b\xd1\x6d\x03\x84\xff\x11\x83\xf2\x3b\xb0\xe8\xcc\x60\x09\xb0\xdf\x44\x7d\x04\x51\xd7\x66\x60\xdf\x84\x07\x73\xd6\x2e\x04\x97\xe0\x49\x41\xb0\x1f\x82\x1c\xa6\x7d\xa9\xb1\x32\x2d\x2f\xc7\x46\xb3\x4d\x70\xde\x58\x6c\x40\xea\x08\x49\xb2\x4e\xcf\xc5\x21\x46\xb9\x9c\x74\x14\x0e\x3a\xf4\x47\xd3\x38\xc8\x71\x98\xb3\x46\xcb\x11\x1a\x7f\x44\x1b\xb7\xa3\x16\x1a\x6a\xa1\x54\x0c\xe9\x1f\xd6\x9c\x64\x83\x76\xb7\x81\xdd\x3f\xb1\x46\x79\xe2\xcf\x34\x6b\xf7\x8b\x50\xe4\x68\x09\xb8\x40\xe3\xd8\x0d\x37\x7d\x02\x0d\xd6\x4a\x58\x84\xde\xe2\xbb\xda\xe8\x46\x7a\x69\x74\x80\xb8\x37\xce\x4f\x9f\xb1\x8f\x16\x9d\xb7\xb2\xf6\x15\x39\x8b\xcf\x58\x0f\xf4\x12\x22\x2c\xed\xa0\xeb\x30\x38\x40\x11\x42\x0e\xe1\x8f\x40\xeb\x38\xec\x85\x15\x1e\x61\x8f\xb5\x18\xc8\x17\x0f\x07\x79\x42\xc7\xc3\x29\x5a\xfe\x20\xf6\x52\x49\x3f\xd2\x16\xb8\xa3\xb0\x58\x09\xb0\xd8\xa2\x45\x5d\x73\x5e\x04\x98\x03\xa0\x61\x0b\xb5\x1a\x01\x9f\x7b\xe3\xa2\xa9\x56\xa2\x6a\x5c\xf1\xa8\x92\x1a\x8c\x46\x30\x16\x3a\x63\x31\x79\x5c\xa0\xd8\x56\xd5\x07\x2a\x1d\x67\xa2\x43\x01\xfa\x85\x37\x9d\x78\x42\xa8\x07\xe7\x4d\x97\x11\x8e\xd0\xe4\x84\x27\x6c\xe6\x28\x53\x21\x19\x38\x09\x2b\xcd\x40\xa3\xa5\x3e\x38\x38\x4b\x7f\x64\xf3\x21\xf3\xb6\xd5\x7b\x63\x01\x9f\x05\x99\xd9\x80\x80\x56\x0c\x35\x7a\xde\xfb\x3d\x16\xeb\xd8\xc0\x7e\x4c\x75\xcb\x35\xc0\x70\x40\x4a\x8a\x59\x71\xfd\x32\xc2\xe0\xa4\x3e\x4c\x7c\xa5\xad\x2d\xae\x6d\x62\x98\xa6\x5d\x94\x68\x26\x8c\x8a\x1c\x70\xa8\x1b\x9e\x69\x43\xba\xa5\x6a\xe9\x11\xed\x3b\x6f\xde\xd1\xff\x0d\x47\x64\x06\x4f\x55\x43\x6b\x12\x09\xd0\x42\xcc\x0d\x14\xac\x80\x1a\xc9\xaa\x02\x85\xcd\x01\x2d\xb8\x4e\x58\x9f\x97\xda\xc2\x47\x13\x56\x8a\xd6\xbd\x01\xa1\x4b\x1d\x6c\xaa\x40\x4f\xb1\x46\x1d\x41\x32\xf2\xa2\x8d\x15\xe7\x09\x94\xd0\x5a\xd3\x4d\x73\x84\xa9\x2a\x94\x10\x27\x6e\x83\xbd\x71\xd2\xe7\xec\x00\xa3\x67\x2b\xbd\x71\x29\xb7\x88\x21\x09\x79\x8f\xc1\xbe\x15\xda\xb5\x68\xb7\x55\xf5\xf6\xa1\xaa\x1e\x1e\x1e\xe6\xb0\xd1\x13\x7e\xba\xc2\xca\x5f\x65\xe4\xbc\xb5\x5b\x9e\xde\x0f\xfb\x15\xa2\x5f\x6c\xcf\xe7\xaa\x02\x00\x48\x4b\x79\xe3\x85\x02\x3d\x74\x7b\xb4\x9c\xda\x01\x07\xa9\x01\x9f\xa5\xf3\x54\x36\xdb\x3c\xe1\x83\x07\xe9\x60\xe8\x63\x21\x4d\x52\xcb\xd2\x23\xd4\x6e\xb0\x58\x28\x29\xd8\x76\x43\xdf\xab\x31\xdb\x70\x5e\x8c\x8e\x78\x6e\xe0\x6a\xa6\xd4\x08\x06\x1b\xe1\x31\x8d\xe2\xff\x14\xce\x49\xd8\x60\xe6\x5f\x6c\xe5\x11\xfe\xfd\x5e\x3e\xff\xf9\x4f\x93\x18\xd8\xdf\x0f\x5a\x7a\x29\x94\xfc\x84\xcd\xcc\x44\x8a\x12\x4f\x98\x28\x5b\x3a\xc0\x4e\x7a\xaa\x86\x33\x6d\x2d\x39\x5a\x40\x73\x50\x5b\x14\x7e\x61\x86\x3c\x09\x26\x2e\x96\xbb\x93\xe1\xf3\xdc\xbf\xfb\xa5\x83\xbf\xc7\x5c\xd3\xdf\xec\x5e\xd8\x0f\x62\xc0\x94\xaf\x3a\x64\xa9\x08\x99\x76\xd5\xd1\xbc\xec\x9d\xe8\xa8\xaf\x24\xff\x36\x6c\xe2\x11\x7e\x6e\x1a\x8b\xce\xfd\xf5\xc2\xdf\x5f\x43\x9e\x7f\x07\x9c\xc5\xdf\x26\xd9\xa0\x5c\x34\x37\xf9\x9b\x97\xbd\xf0\xd7\x9b\x55\x6f\x13\x77\xad\xba\xb9\x28\x23\x24\xe2\xab\x23\xcb\x5b\xfc\x63\x90\x96\x93\xd7\x41\x6b\x6c\x46\x97\x88\x31\x19\x59\x90\x42\xc9\x77\x26\xa9\xb1\x2f\xa5\x31\x2d\x91\xc6\xa0\x03\x6d\xf2\x82\xf3\xb5\x8c\x86\xdd\x3e\xb5\xda\x23\x5a\xdc\xe4\xb9\x93\xce\xa6\x50\x50\x27\x31\x7d\xcc\xd0\xde\x38\x27\x63\x33\x31\x6d\x48\x52\x72\x22\x36\x94\x3e\xc2\xe0\x8a\xeb\x14\x71\x63\xd8\x0f\x8d\x35\x3a\x27\xac\x54\x63\xd4\x27\x4c\x70\xe6\xac\x21\x7a\xb2\xbd\xd8\x95\x4b\x11\x50\xfa\x44\xa4\x90\xb4\x54\xe6\x51\x37\xec\x23\x31\x2d\x81\x63\x71\x92\xb8\x71\x36\x39\xb4\x06\x3f\x58\x4a\x9a\xc8\x9d\xb9\xbf\x59\xec\xcc\x09\x9b\xdc\xe7\x26\x13\x67\x46\x3e\x4e\x14\xc4\x1b\x26\x17\x74\x0e\x14\x9e\x50\x51\x82\xf6\xc3\x5e\xc9\x7a\x03\xfb\x81\x92\x56\x3a\x7a\x46\xb8\x08\xc2\x6d\xaf\xb0\x9b\x19\x4b\xbb\xc0\xc2\xa0\x28\x2b\x52\x64\xbc\xed\xec\x57\x06\x67\xae\xdb\x66\x86\x6a\x96\x7f\xcc\x0e\x6a\xe4\x16\x12\x56\x4f\x9e\x5e\x8f\x27\xac\xda\x89\x11\x0e\x56\x68\x1f\x55\x5d\x5c\x27\xc7\x48\x0d\x3d\xe5\x02\x85\x23\x4f\x89\x45\x8b\x17\x7d\x56\x21\x51\xe2\x9b\xb3\x4b\x62\xb7\x9e\xa9\x45\xaa\x52\xb6\x3b\xb3\xc0\xf9\x97\xf6\x3e\x87\xee\x8f\xd6\x0c\x07\x6a\xcd\x59\x5f\xdd\x1a\x50\x90\x4a\x1c\x15\x81\xf2\x42\x4c\xbc\x79\xb7\x84\x44\xb6\x16\x71\xcc\x7c\x9f\xd9\xf8\xf6\x38\xa8\x2a\xda\x41\xe7\x74\x5f\x50\xd4\xfd\x23\xfc\x2d\xa4\xef\xe7\x3c\x85\xa7\x19\xb7\x7c\x14\x2c\xc3\xce\xa2\x8b\x27\x8c\x36\x7a\x1d\x92\x8b\xaa\x01\x4e\x42\x0d\x78\x31\x2d\x4c\xd9\xc6\xb2\x85\x9f\x7e\x82\xe8\xc5\xc5\x48\xfa\x7b\x95\xf8\x5f\xa8\x38\x0e\xba\xc1\x79\x52\x85\xb4\x92\x13\x1d\x82\x08\x20\x25\x8b\x51\xdd\x96\x5e\xc3\x31\xbd\x9a\x99\xff\x52\xcd\x3f\x7d\x29\x7c\x9c\x0e\x15\x3f\xce\xc7\xb1\x7b\xac\xd0\x31\x77\x93\x1b\xe9\xf8\x77\x4c\x24\x28\x75\xad\x86\x06\x49\x4a\xa6\x93\x49\x70\xa3\x3e\x62\xfd\x34\x07\x21\x52\x40\xb6\x72\x46\x3e\xd7\xd2\x0e\x91\xc2\xbf\x45\xe0\x07\x18\x82\xc0\xaf\xa6\x8c\xd0\x98\x34\x68\x5d\xcd\x6f\x40\xc9\x27\x3a\x8c\x2a\xc9\x2a\xaa\x23\x79\x24\x74\x53\x04\x14\xeb\x5c\x7a\x41\xa2\x49\xb6\x9c\xb4\x1e\x7a\x15\xce\x22\xf0\x32\x91\xa7\x4d\x5a\x12\x79\x12\xb7\x5e\x3c\x61\x61\x63\x62\xe8\xf8\xc6\x51\x6b\x5a\x87\xbf\xd4\xd3\xd8\xe3\xd5\xfa\x89\xb6\xee\x82\x02\x09\x35\x73\xbf\xcc\xa3\x78\x18\xbd\x25\x8d\x48\xbc\x09\xa9\xc3\x7e\x94\xd6\xca\xc7\x38\x98\x9e\xba\xb3\x11\x8a\x68\x92\x7c\xc2\x07\xe9\xa2\xf1\x1c\x06\x06\xf9\x12\x85\xe0\x66\x9a\x19\xd9\x04\x35\x91\x22\x02\xa1\x36\xd6\x62\xed\xd5\x78\x13\xfe\x31\xb8\x25\xfc\x45\x8e\x2f\x8a\x31\x12\xe4\x9b\xd4\x57\xbf\x0a\x2f\xa9\xe5\x38\x77\xae\x94\xe9\x8f\xfc\xbd\x5b\xbc\xbd\xbf\x8d\xac\x1c\xaa\x76\xca\x39\xc9\xca\x3a\xe9\xa4\xf0\x12\xd5\x4c\x81\x4a\xa9\x13\x1e\x25\x43\x37\xd3\xcb\xa5\x82\x4c\xc0\x4d\xf8\x7c\x99\x13\xe5\x6e\xc1\x9b\xaf\x9d\x47\xaf\xec\x1b\xaf\xf9\x98\xd5\xcf\x26\x97\xcf\x66\x7d\x23\xd9\x9d\x70\x3b\x22\xd2\x15\x07\x93\x4e\x6d\xf9\x30\x38\xf6\xac\x1b\xc4\xda\x51\xad\x43\xa1\x27\x9c\x11\x0d\xe2\x09\xed\xb8\xbc\xee\xcb\xb3\xe7\x57\x08\xee\xda\xa5\xd9\xd4\x28\xef\x4e\x83\xad\xd4\x38\x75\x6f\x79\xeb\x95\xf1\x6c\x8d\xed\x72\x8f\xfa\xca\x45\xd2\xd4\xfe\xfc\x4e\x69\x7a\x6f\x10\x08\x85\x6f\x8f\x5c\x94\x4f\x91\xfd\x9b\x74\xf9\x42\x43\xca\x05\xcc\x37\x55\xc9\x8f\x15\x49\x5c\xa0\x5c\x92\x84\xfd\x8a\x60\x85\x1b\xaf\x22\xeb\xe4\xa7\x99\xaa\x98\xa9\x91\xde\x4a\x82\x28\x49\xc6\x45\xc6\x5f\x12\x53\x30\x71\xbd\x5a\x5f\xd4\xdd\xbb\xd0\xe5\x77\x45\x79\xf3\x02\x6f\xdc\x8c\xc0\x60\x55\x7b\x67\xfa\x2b\x1d\x29\x19\xc6\x66\x6d\xfe\x0f\x2b\x23\x8b\x2f\x71\xcd\x5f\x5e\xd0\x37\x3f\x07\x51\x53\xd4\x4a\xe2\x1c\x15\xc4\x9f\xd0\x60\x2c\xe0\x1f\x83\x50\xe1\xdb\x8a\xd4\xb9\x2a\x70\xe0\xaa\x82\xa3\x63\x02\xe3\x44\x62\x5a\xa8\x72\x2b\xb4\xdb\x63\x6b\x2c\xee\x58\x31\x60\xb8\x0d\x61\x41\x97\x16\x5d\xf4\xa9\x35\xe3\xf1\x12\x65\x8f\x07\xa9\x35\xa5\xd1\xe2\xaa\xb4\x5c\xa2\xae\xcc\x7e\x99\xc2\xd9\xc1\xbb\xe9\xe3\x7b\x78\x77\x1d\xed\xbf\xe7\x0c\xd9\x2f\x28\x9e\xaf\xc6\xa2\x14\x29\xc8\xf6\x16\x4f\x7c\x6f\x99\x86\x8b\xa0\x5c\x6e\x57\x97\x37\xca\x13\xd1\x34\x24\x4d\xca\x42\x91\xa6\x66\x3b\x2d\x57\x8e\x9f\xb7\x89\x93\xef\x6c\x92\x6b\x08\xff\x5f\x7a\x4c\x0b\xe4\xc7\xdf\x85\xb7\x1b\xba\x17\x81\x2e\x57\x30\xdf\x26\xe3\x83\xf6\xf9\xad\xeb\xfd\x18\x51\x8e\x47\x2c\x3d\xc6\xab\x76\x13\xc7\xcc\x88\x83\xf9\xef\x28\x68\x73\x3e\xa1\x35\x4b\xd5\x54\x4d\x91\x5e\x2e\x71\xb7\x46\x13\x2b\x50\x5f\x9e\x80\x02\xcb\xdc\xfd\xff\xfd\x23\xbc\x22\xf2\xd6\x78\x56\x63\x92\x6f\xd1\x33\x06\x8e\x7f\x93\x99\x3a\xf6\xea\x02\x81\x2f\x55\xc5\x2d\x40\xba\xd2\x60\xa7\xbd\x5c\x3a\xf8\x2f\x9b\x42\xcb\x59\xc6\xb8\xc0\x30\xfd\xc5\xeb\xa2\xff\x92\xc5\x95\x5e\x2f\xf6\xe6\x84\x9b\x7c\xdd\x70\x39\x82\x7f\xbd\xa1\xa3\xcb\x1e\xa3\x6d\x6c\xc8\x96\xd1\x93\x0b\x9c\xc8\x12\x9d\xe1\xdf\x0f\x96\x97\xc0\xbf\x0e\x5d\x37\xc2\xe7\x2f\xd5\xff\x02\x00\x00\xff\xff\x22\x38\x1f\x31\x3c\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x53, 0xda, 0xd3, 0x24, 0x91, 0xdc, 0x8b, 0x5e, 0x3, 0x74, 0x15, 0x8e, 0x28, 0x18, 0xf1, 0x31, 0x6e, 0x5c, 0x6c, 0xb9, 0xf, 0x14, 0x9d, 0xfe, 0x38, 0x7a, 0x81, 0x36, 0x3e, 0x50, 0x49}}
	return a, nil
}

var _tokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x36\x14\xbc\xf3\x57\xcc\x6e\x81\xae\x1d\x64\xe5\x1e\x8a\x1e\x82\xa4\xdb\x6d\x3e\x8a\xa2\x45\x0a\x78\xb3\xed\xb1\xa0\xa9\x27\x8b\x1b\x99\x14\xc8\x27\x6b\x83\xc0\xff\xbd\x20\x25\xd1\x52\xa2\x14\xe9\xa5\xb9\xc4\x14\xf8\xe6\xcd\xbc\x19\x92\xab\x93\x13\x21\xbe\xc1\x4d\x63\xb6\x7a\x53\x11\xee\xec\x3d\x19\xdc\x58\xd7\x4a\x97\x6b\xb3\xc5\xa5\x35\xec\xa4\x62\x21\xee\x4a\xed\xa1\xfa\x25\x7c\x69\x5b\x8f\xd2\xb6\x90\x06\x52\x29\xdb\x18\x86\xb2\x4d\x95\xc3\x13\xa3\xa9\x21\xa1\x1a\xcf\x76\x97\xc0\x3b\xec\x35\x29\xd2\x7b\x72\x82\x2d\x64\x55\xd9\x16\x5c\xd2\x0e\x6c\x51\x74\x5d\xc1\x61\x9f\x0f\x5f\x24\x72\x5d\x14\xe4\xc8\x70\xea\xd1\x96\x64\x68\x4f\x2e\x94\x3d\xc0\x75\x68\x7d\x4d\x16\x58\xd2\x03\x94\x34\xa8\x9b\x4d\xa5\x7d\x09\x0e\xb4\x7b\x41\xe4\xe0\xc8\xdb\xc6\x29\x82\xf4\x90\x89\x0c\x94\xac\xe5\x46\x57\x9a\x1f\xf0\xa5\xf1\x8c\x4a\xdf\x13\x24\xfe\x94\x4d\xc5\xa7\x42\x9a\x3c\xb4\x83\x27\x13\x30\x72\x4b\xde\xbc\x63\xd0\x9e\x0c\x0c\x51\xa0\x8c\x7b\x63\x5b\x68\x86\xf6\x47\xd2\x99\x10\x7f\x95\x64\xc6\x23\x6a\xa5\xe1\xa8\x4d\x39\x92\x1c\x7a\x24\x6e\xa7\x9d\x24\x25\xab\x2a\x76\xeb\x76\xdc\x52\x9b\x76\x88\xa2\x31\x8a\xb5\x0d\x88\x39\x6a\x67\xf7\x3a\xa7\xd0\xb4\xd5\x5c\xc6\x9a\x24\xc8\x51\xa4\xa0\x08\x5c\x4a\xee\x90\x43\xef\xd1\xa0\x05\x97\xa4\xdd\x71\xdc\x99\x10\x27\x2b\x21\xf4\xae\xb6\x8e\x9f\xb8\x56\x38\xbb\xc3\x77\x5f\x6f\x3e\xdf\xfe\xf2\xeb\xcf\xbf\x5f\xdf\xfd\xf1\xdb\xf5\xed\xc7\xab\xab\xf5\xf5\xa7\x4f\x42\xd4\xcd\xe6\x18\x8c\xb8\x7f\x14\xa0\x47\x21\x00\x60\xb5\xc2\xf5\x3e\xf8\x18\xe9\x68\x0f\xda\x69\x66\xca\xa3\x9f\x03\x07\xe9\x08\x39\xd5\xd6\x6b\xee\x86\x1a\x24\xb1\x74\x5b\xe2\xc1\x69\x17\xd1\x42\x47\x8a\x70\xc3\x6c\xf2\xab\xae\x6e\x21\x77\x61\xce\x67\xf8\x7c\xa3\xbf\xfe\xf0\xfd\x69\x64\x7e\x86\x8f\x79\xee\xc8\xfb\x0f\x4b\x91\xea\x53\x12\xd2\x78\xcf\xa6\xa2\xb3\x34\xcc\x5e\x43\xaf\x23\x1e\x04\xed\x03\x73\x47\x91\xe2\x98\x73\x14\xd2\xea\xaa\xc2\x26\x06\x86\xb3\x69\x2d\x81\x1f\x6a\x82\x36\xb9\x56\x92\xc9\xf7\x03\x89\x33\x91\x63\xdb\x6c\x5c\x8e\x44\x77\x10\xe9\xa7\x54\x8a\xbc\x5f\x78\xaa\x8a\x25\xf6\x32\x58\xae\x74\xad\x29\x88\xbf\x4c\x71\x9e\x30\xef\x79\xce\xa1\xad\x56\x41\x7c\x17\xae\x2e\x31\xf2\x9e\xfc\x70\x04\x60\x37\x5f\x48\x71\x3c\x34\x06\xd2\x6d\x9b\x5d\x3c\x93\x26\x1f\xc2\xe4\xc7\x48\x9a\x07\xf3\x12\xa7\x77\xbe\x47\x6a\x7c\x48\x45\x3c\x4d\x6c\x1d\xe5\x47\xc9\x73\xb4\x82\x51\x45\x63\x06\xe6\x8b\xce\xcd\x9f\xa6\x3e\x45\xe0\x25\x1e\x53\x55\xf8\xab\x46\x99\x59\x53\x81\x0b\x84\x49\x65\x89\x50\xb6\xb1\xce\xd9\xf6\xfc\xdb\xc7\x79\xd3\x0f\x3f\x2e\x96\x6f\xc4\x33\xc8\x8d\xac\x64\xb0\xe7\x22\x06\x2b\xeb\x97\xa3\x6d\x93\x8a\x11\x81\x6c\x2a\xe1\xfc\x7d\xf8\xbf\x9c\x36\x08\x67\xe2\xe5\x44\xf7\xbd\x86\x48\x47\x39\xb6\x35\xe4\x3e\x64\xb2\x8b\xf7\x32\xa1\x1d\x26\xbe\xab\x52\x9a\x2d\xad\x07\xe9\xfd\xda\x4f\x1d\x82\x2d\xe2\x87\x22\xdd\x95\xbd\x87\xfd\x3d\x93\x1f\xb7\xfe\x9b\x53\x4f\x7a\x2d\xfe\x86\xa1\x76\x3d\x17\xcd\xa7\x8e\xd5\x8e\x9e\x7c\x09\x7f\xe3\xea\xd7\x78\x86\x37\x17\x30\xba\x3a\xc3\xdb\xcb\xf8\x1a\x19\xcb\xe8\xca\xe6\x2e\xc7\x78\xaf\x05\x91\x47\x5a\x6f\x27\x14\x0e\x93\xd5\x34\x42\xb8\x98\xb0\x9b\x1b\xbe\x36\x9a\x17\xb3\x07\xf3\x75\xea\xff\x53\x5c\xff\x5f\xe9\xcf\xd3\xd0\x15\x1c\xd2\x85\xff\xfc\x01\xeb\x3f\x85\x7b\xc5\x50\x3b\x79\x96\x07\x5a\xe9\x29\x7b\x21\x76\x7d\xe4\x52\xdc\x9e\xf5\x78\x61\xdc\xe1\xd6\x48\xed\x8e\x83\x76\xc4\x8d\x33\x38\x7f\xdf\xbf\xc7\xb3\x30\xe9\xe7\xb2\x57\x78\x10\xff\x04\x00\x00\xff\xff\xd1\xe8\x38\xa0\x39\x09\x00\x00"

func tokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_tokenforwardingCdc,
		"TokenForwarding.cdc",
	)
}

func tokenforwardingCdc() (*asset, error) {
	bytes, err := tokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xd4, 0x19, 0x5d, 0x89, 0x9e, 0x77, 0x14, 0xb5, 0x83, 0xdc, 0xa7, 0x54, 0x30, 0xe3, 0xff, 0x67, 0xa7, 0xd7, 0xd8, 0xb9, 0x2e, 0x4c, 0xf4, 0x3e, 0xb8, 0xd4, 0x52, 0xb7, 0xdd, 0x70, 0xd0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleToken.cdc":    exampletokenCdc,
	"FungibleToken.cdc":   fungibletokenCdc,
	"TokenForwarding.cdc": tokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleToken.cdc":    &bintree{exampletokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc":   &bintree{fungibletokenCdc, map[string]*bintree{}},
	"TokenForwarding.cdc": &bintree{tokenforwardingCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
