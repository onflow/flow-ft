// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleToken.cdc (7.102kB)
// ../../../contracts/FungibleToken.cdc (7.306kB)
// ../../../contracts/TokenForwarding.cdc (2.361kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x6f\x1b\xb9\x11\x7f\xf7\xa7\x98\xde\x43\x2b\xe3\x6c\xd9\x05\x8a\x3e\x18\xce\x5d\x9c\xc6\x29\x82\xb6\x69\x91\xe4\xda\x57\x73\x77\x47\x12\x9b\x5d\x52\x20\xb9\x92\x75\x86\xbf\x7b\x31\xc3\x3f\x4b\xae\x56\xb2\x7d\x6e\xf2\x70\x17\x2d\x39\x7f\x38\xf3\x9b\x99\x1f\x19\xd9\xad\xb5\x71\xf0\xa1\x57\x4b\x59\xb5\xf8\x55\x7f\x43\x05\x0b\xa3\x3b\xb8\xbc\xff\xf0\xcb\xa7\xbf\x7e\x7c\xf7\xf7\xdb\xaf\xff\xfc\xdb\xed\xa7\x9b\xf7\xef\x3f\xdf\x7e\xf9\x72\x72\xb2\xee\x2b\xa8\xb5\x72\x46\xd4\x0e\x6e\xef\x45\xb7\x0e\x62\x57\x23\x2d\x0f\x27\x27\x00\x00\x17\x17\xf0\x55\x3b\xd1\x82\xed\xd7\xeb\x76\x07\x7a\x51\x48\x59\x90\x0a\xf0\x5e\x5a\x87\xaa\x46\x96\x20\x0b\x1b\x61\xc0\x91\xd8\x17\x96\xba\x82\x5f\x3e\xc8\xfb\x3f\xff\x29\xa9\xbc\xdd\xa0\x72\xe0\x56\xc2\x81\xb4\x80\x9d\x74\x0e\x1b\xd8\xae\x50\x81\x5b\xe1\xe0\xa0\xb4\x50\x1b\x14\x0e\x9b\xa4\x1a\x59\xd4\x1b\xff\xa8\xa4\x93\xa2\x95\xbf\x62\x33\x93\xfe\xef\xa5\xc1\xd3\x67\x59\xf4\x07\x11\x06\x61\x2b\xdd\xaa\x31\x62\x1b\x82\x28\xe0\xdf\xa2\x6f\xdd\xa4\xed\xff\xc4\xad\x33\xd1\xe9\x5e\xb9\x68\xf2\x8c\x45\xaf\xe0\xa6\x69\x0c\x5a\xfb\xf3\x4b\x5d\x68\x70\xad\xad\xa4\x15\xa7\x8f\x3a\xf0\x3e\x6e\xdc\x73\xc0\xe9\x17\x9a\x57\xb8\xcd\x5d\xe8\xa4\x3a\x14\xf1\x7f\xf0\xd2\xc8\xe2\xcb\x8f\x68\x9d\xd1\xbb\x03\x26\xde\xf5\x46\xfd\x36\x13\x82\x0f\xc2\xde\x1b\x30\x68\x75\x6f\x6a\x3c\x8c\x21\x3e\x8b\xf9\x8b\x5f\x9b\x89\xb6\xd5\x5b\x6c\x6e\x7e\xab\xd9\x8a\xdc\x7e\x8e\x59\x3e\x5f\x32\x3b\x58\x18\x32\x7d\x71\x91\xac\x8a\x7a\x05\xbd\x45\x03\xd6\x69\x83\x16\x84\x02\xa9\xac\x13\xaa\x46\x2a\x45\xad\xda\x1d\x57\x0c\x0b\x53\x2d\xba\x15\x4a\xbf\x5b\x2c\x31\x55\xf0\x0a\x61\xd1\xab\xda\x49\xed\x2b\x76\x10\x11\xaa\x81\xa5\xde\x20\xc5\x1c\x2a\xaf\x6c\x6d\x90\xbf\xaf\xb5\x75\x54\x8b\x8d\x64\xc1\xa8\x4d\xaa\x51\xab\x88\x75\xbb\xe3\xec\xd6\xa2\x6d\xb1\x99\xe7\xb6\xeb\x15\xd6\xdf\x2c\xac\xc4\x7a\x4d\xf1\x72\x60\x7a\xe5\x64\x87\x2c\x89\x1b\x34\x20\x92\x7f\x1c\xb8\x42\x45\xd4\xf4\x39\x84\x96\xd6\x95\x3f\x7a\x85\x31\xc8\xf1\x54\xd4\x3a\xf0\xde\x51\x70\x8a\x4e\xc2\x99\x23\x1f\xa3\x36\x0f\xc4\x85\x54\x2c\x7b\x06\x56\xd3\xb2\xe1\xc4\x29\x0d\x5b\xb1\x83\x85\x26\xc7\x3a\xd1\xca\x5a\xea\xde\xfa\x44\x38\x1d\x4c\xfa\x00\xa6\xa8\xe8\x3e\x18\x95\x0a\x84\x34\x73\xb8\x01\xbb\xc6\x5a\x8a\x36\x00\x6d\x80\x86\x42\x6c\x2c\x29\xaa\x06\x17\x9c\x66\xe0\x46\x6d\x43\x45\x16\x51\x20\x14\x25\x35\x6c\x7f\xd4\xb6\xe7\xff\x32\x7a\x23\x1b\x34\x67\xa3\xef\x9f\xb1\x46\xb9\xd9\xff\xfe\x4e\xb4\x0c\xa6\xd0\xee\x83\xf9\x95\x6e\xc9\xc3\x15\x42\x15\xd6\xf5\x02\x04\x07\xc0\x06\xbf\xd2\xf6\xd8\xef\xc3\xce\xb2\xd7\x27\xc8\xc4\x46\x5d\x28\x25\x24\xc4\xd3\x70\x50\x29\xff\x04\x8c\x24\x4b\x82\xb3\x91\xe6\x53\x78\x48\xeb\xf4\xc7\x62\xbb\x98\x47\x95\x6f\xa2\xf2\xb4\xe5\xb1\xf0\x24\x76\xf8\xec\x5b\xbe\xfc\x21\xa2\xd0\xe3\x45\x7c\x8b\x35\xe7\x70\x49\x30\xe5\xee\x00\x82\x3f\x0a\xb3\xec\x3b\x0c\x39\x8b\xa8\x52\x4d\x32\x61\xbd\x92\x20\xc3\x03\x25\xd5\xdd\x3c\x17\xfa\xe8\x02\xa4\x6c\xe8\x25\x0e\x69\xae\x0b\xb3\x0b\x45\x1a\xdb\x4e\x6f\x3d\x52\x28\x3d\xb9\x02\x52\xdb\x69\x85\xbb\xb4\xb3\x42\xa9\x96\xe0\x8c\x50\x76\x81\xc6\x60\x33\x27\x2b\x06\x5d\x6f\x94\x4f\xac\xc2\x6d\xbb\xcb\x95\xc4\x42\x0a\x26\x75\x51\x4e\xac\xd7\x97\x25\x55\x8a\x74\x5c\x83\x55\x36\xae\x72\x55\xd8\x5a\xdc\x52\x31\xcd\xa7\xc2\x4c\x80\x59\xf4\x2a\xc5\x69\xdc\xea\xaf\xe0\x6d\x89\x51\xef\xd1\xd1\xa4\x17\x3f\xcf\x43\xcc\x0b\x01\x6a\xd9\x07\x47\xb7\xff\x7f\x1c\xdd\xac\x4c\x6f\x15\x9a\x9f\xe7\xc2\xcf\xd1\xd3\x42\x97\x8f\x23\x5c\x9f\xe7\x9d\x60\x80\xa9\xd7\x76\x7a\x00\x81\x21\x62\x2f\x01\x60\xc8\x89\xae\xfe\x8b\xf5\x18\x7d\x0c\x39\xd1\x34\xb6\xa8\x37\x67\x53\x91\x85\x4c\x66\x85\x4c\x3f\xf9\x78\x76\x1a\x8c\xd2\x42\x98\x86\x24\x1c\xa6\x35\x4b\x59\x32\xe8\x9d\xa9\xb0\x16\xbd\xc5\x01\xd2\x45\x95\x91\x8f\x19\x8c\x09\xb0\x68\xa2\xed\xd0\xd8\x78\x34\xb0\xe8\x1f\x06\x6f\x57\xa2\x38\x48\x85\xa8\x08\x84\xb6\xef\xb0\xe1\xa3\x72\x93\x5e\x68\x1e\x34\x01\x81\x81\x4d\xcc\xf7\x10\x16\x42\x3d\xf3\x69\x9d\x42\xd5\xb8\x97\xb4\xe8\x60\xc3\xe7\xbb\x3e\x0f\x1c\xd0\xfe\x0e\xde\xe6\x94\x77\x5e\x9e\xf6\x29\x30\xfe\xe8\xf5\xcd\xc7\x6d\x69\x84\xc9\x7d\x36\x57\x88\x79\x52\xf7\x24\x30\x0b\x19\x78\x03\x97\xf3\xcb\x62\x3d\xe6\x72\x53\x1c\x21\xc3\x67\xd8\x30\x1b\xc7\xa5\x08\x40\xc6\xec\xe1\xcd\xe1\xa5\xf3\x22\x10\x99\xb5\xcc\x66\xea\x3b\xb7\xdd\xda\xed\xa6\x28\x50\x59\x10\x65\x9f\xf4\x48\xa4\x3e\x02\x22\x07\xf8\xaf\x68\x74\x9a\xf3\xaa\x49\x7d\x4f\x0e\x7d\x4d\xb4\x2d\x75\xc8\xd0\xdf\x68\x5a\xf3\x74\xef\x7a\xeb\xfb\x1c\x0d\x72\x9b\x48\x49\xae\x8c\x99\x18\x2b\xf1\x6a\x53\xcb\x1c\xb3\x2f\xfa\xa0\x4d\xe3\x39\x03\x17\x94\x5f\x4f\xca\xea\x9a\x27\x83\x27\x02\xa2\x6a\xb9\x56\x8d\x1f\xd4\x11\xbb\x36\x90\x8a\x30\x76\xc1\xed\xd6\xb8\x47\x09\x08\xeb\xe3\x30\xce\x9e\xee\xa3\x4f\xb4\xb1\xcb\xf9\xe5\x69\x9e\xab\x82\x7c\xdc\x34\x9d\x54\xd2\x3a\x23\x9c\x36\x99\xce\x94\xd0\x4f\xb8\xf5\xbc\xe7\x59\x8d\x2e\xe5\x35\xcb\xd6\x24\x9d\x3f\x36\x50\x46\x86\x0f\x50\xfa\x2b\x78\x1b\x08\xd9\xc3\x7e\x31\x1e\xbd\x13\x14\x3f\x8f\x4f\x84\x69\x0f\x0e\x28\x28\xe7\x43\x3a\x85\xbf\x28\xbc\x32\x7c\xa3\x6b\xc9\xb3\xc2\xe7\x0d\x33\x80\xfc\x5f\xa7\x22\x35\xbe\xc6\x1c\x8b\x46\x54\x78\xb0\x07\x64\x48\xd9\xe7\xfb\x71\xee\xf9\x89\xc8\x55\x20\x08\x7d\xb1\x80\xfc\x7d\x80\x46\x4c\x64\xd1\xcf\xa2\xcf\x09\x04\x63\x26\x15\x08\x1b\xd5\x9d\xbf\xb3\xc6\xbb\x43\xc4\x62\x39\x1f\x13\x6d\x87\x8c\x0c\x4f\x42\xaf\xb0\x44\x62\x5f\x4b\x26\x7d\x2c\xc3\xb4\xdd\x66\xe7\x3a\xe3\x99\x4f\x5e\x75\xb1\xa7\xb9\xec\x9d\xe6\x6c\x4c\x4a\x33\xea\xd7\x1d\x6a\x82\xc7\xc0\x31\xb8\x3b\x41\xd7\xf6\xc7\xe3\x08\x31\x74\xa3\x2c\xbf\xd0\x9f\x10\xe8\x9f\x82\xa6\xd9\xe5\xe9\x15\xfc\xe0\x43\x16\xde\x20\x7c\x3f\xae\x10\x96\x0c\x24\x43\xb1\x50\xdc\xde\x7f\x38\xa4\xed\x3a\xcc\xdf\x51\x06\x0e\xe8\x6d\xd1\x5a\xaf\x94\x33\x1f\xb2\xea\x55\x95\x26\x1e\x5f\x3d\x0f\x7f\x9c\xa2\xa5\xfb\xbe\xc2\xd4\x01\x9e\xe4\xb4\xa3\x87\x99\x31\x05\x85\x57\xb1\x56\xbe\x85\x4d\x77\xd3\x29\x5a\x3e\x3e\x4e\xf1\x7b\xaf\x07\xd0\x7f\x63\xc9\x67\x2d\xef\xb5\x7d\x80\x1a\xdf\x93\x3d\x20\xb5\xb7\x82\x73\xf6\x46\xbd\xa0\x32\x03\x65\x1a\x68\x7a\x7c\xa0\x39\x03\x5c\x2c\xb0\x76\x72\x83\xed\x8e\xb5\xf2\x9d\x6c\x20\xc0\x07\xd4\x7f\xd2\x0e\xaf\x3c\x67\xf7\xf4\x22\x7b\x3a\x13\xbd\xd3\x9d\x70\x92\x4a\x77\x07\xb6\xaf\xf8\x75\x03\x9b\xe1\x7a\x59\x74\xb3\xfc\xe5\xb6\x78\xf6\x61\xa7\xfb\xda\x69\x73\xb4\xea\x87\x50\x7c\x77\x0e\x4d\x52\x22\x22\xe6\x30\x65\x9e\x66\xb0\xa3\x62\x18\x3d\x21\xee\x23\x3b\xc3\x37\x63\x3b\x3f\x02\x43\xb8\x2c\xe9\x3f\x5e\x5e\x12\x93\xce\x43\xeb\x07\x5f\x16\x51\x66\xa1\xe3\x36\x9c\x0d\x11\xa6\x8e\x62\x83\x44\x42\xa5\x2a\x5e\xe8\x46\xc1\x2f\xe2\x37\x5d\xab\x63\x1f\x4f\x4b\xef\x43\x41\xcc\xc9\xde\xec\xfa\x9c\x95\xf9\x1b\xc4\x45\xb0\x7b\x81\x59\x36\x7c\x16\xa7\x8e\x27\x08\x09\xad\xac\xa1\x16\x6b\x51\xc9\x56\xba\x5d\x1c\x1e\x4c\x83\x9b\xfc\x81\x82\x5f\xe4\xf0\x7e\xad\x2d\xda\xf1\x4c\xbd\x0b\x74\xf6\x0e\x3a\x74\x2b\x4d\xd7\x38\xa3\xfb\xa5\x8f\xd8\x5d\x7c\x9c\xba\xe3\x87\x16\xb3\x10\xd3\x44\xa5\x38\x5b\x2b\xd5\xb7\xeb\xdf\x3f\x4c\xbf\x72\x3d\xfe\x34\x2b\xb0\x71\xe1\x8f\x51\x9c\x3a\xbd\x88\x15\x3b\x9d\x30\x4b\x74\xc7\x02\x95\xb6\x7f\xe7\x88\x85\x64\xdf\xc1\x42\x62\x3b\x0a\xd8\xbb\xb8\xf6\xd2\x78\xed\x17\xe1\xc3\xe4\x7b\xe0\x73\x02\x18\xb6\xfe\x3f\xe2\xc7\xc5\xcf\xbd\x7c\x80\x7c\x71\xc3\x98\x1d\x47\x38\xcb\x1e\x41\x38\xeb\x2a\xf3\x75\x4b\xed\x42\xa8\xf0\x28\xcf\xe9\xb0\x2b\xbd\xcd\xd8\x5e\x7a\x3b\xde\x0a\x9b\xbd\x60\x0e\x2f\x5d\x59\xc7\x39\xf2\x2f\x51\xd3\xb5\xfa\x78\xf2\x78\xf2\xbf\x00\x00\x00\xff\xff\x2c\xa7\xfb\x41\xbe\x1b\x00\x00"

func exampletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_exampletokenCdc,
		"ExampleToken.cdc",
	)
}

func exampletokenCdc() (*asset, error) {
	bytes, err := exampletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x2e, 0xbb, 0xac, 0x69, 0x96, 0xee, 0x78, 0x40, 0xd7, 0x70, 0xad, 0x77, 0xdd, 0xa7, 0xa9, 0x10, 0x95, 0x2a, 0x36, 0x33, 0x69, 0x4, 0xc, 0x20, 0x4, 0x34, 0xfe, 0x77, 0xb2, 0xe9, 0x68}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x4d\x73\xdc\xb8\x11\xbd\xf3\x57\x74\xd9\x07\xcb\xce\x58\xda\x43\x2a\x07\x57\x79\x13\xbb\xd6\xaa\xf2\x25\x49\x25\x4a\xf6\x3a\x18\xb2\x39\x83\x15\x08\x70\x01\x70\x46\xb4\xcb\xff\x3d\xd5\x8d\x0f\x82\x1c\x4a\x1a\x55\xd6\x17\x6b\x48\xa0\xd1\xdd\x78\xfd\xfa\x01\xbc\x79\xf7\xae\xaa\x5e\xc3\xdd\x01\xe1\x56\x99\x13\xdc\x0e\x7a\x2f\x77\x0a\xe1\xce\xdc\xa3\x06\xe7\x85\x6e\x84\x6d\xaa\xea\xf5\x6b\xd8\xa6\x97\xfc\x6e\x0b\xb5\xd1\xde\x8a\xda\x83\xd4\x1e\x6d\x2b\x6a\xac\x2a\x32\x94\x7f\x82\x3f\x08\x0f\x42\x29\x68\x93\x59\xcf\x66\xd3\x4c\x07\x27\x33\xa8\x06\x0e\xe2\x48\xaf\xe8\x79\x6b\x6c\x07\xde\x5c\x57\x5f\x5b\x10\x30\x38\xb4\x0e\x4e\x42\x7b\x47\xef\x1b\xec\x95\x19\x41\x80\xc6\xd3\xc2\xd4\x06\xfc\x01\xa5\xcd\xbf\xab\x60\x59\x23\x36\x34\x53\x76\xbd\xc2\x0e\xb5\xa7\x61\x30\x0b\x64\xf2\xf7\x9a\xfd\x2f\x8c\x2c\xdc\x6b\x8d\xa2\x1c\x51\x40\x64\xc5\x0e\x0a\x1d\x08\xdd\x80\x16\x9d\xd4\xfb\x8a\xc3\xf5\xb3\x0c\xb8\x1e\x6b\xd9\x4a\x74\xd7\x21\x85\xff\x15\x83\xf2\x5b\xb0\xe8\xcc\x60\x29\x61\x5f\x44\x7d\x00\x51\xd7\x66\x60\xdf\x84\x07\x73\xd2\x2e\x04\x97\xd2\x93\x82\x60\x3f\x04\x39\x4c\xfb\x52\x63\x65\x5a\x5e\x8e\x8d\x66\x9b\xe0\xbc\xb1\xd8\x80\xd4\x31\x25\xc9\x3a\x3d\x17\xfb\x18\xe5\x72\xd2\x41\x38\xe8\xd0\x1f\x4c\xe3\x20\xc7\x61\x4e\x1a\x2d\x47\x68\xfc\x01\x6d\xdc\x8e\x5a\x68\xa8\x85\x52\x31\xa4\x7f\x5a\x73\x94\x0d\xda\xed\x06\xb6\xff\xc2\x1a\xe5\x91\xff\xa6\x59\xdb\xcf\x42\x91\xa3\x53\xc0\x53\x6a\x1c\xbb\xe1\xca\x27\xd0\x60\xad\x84\x45\xe8\x2d\xbe\xaf\x8d\x6e\xa4\x97\x46\x87\x14\xf7\xc6\xf9\xf2\x19\xfb\x68\xd1\x79\x2b\x6b\x5f\x91\xb3\xf8\x80\xf5\x40\x2f\x21\xa6\xa5\x1d\x74\x1d\x06\x87\x54\x84\x90\x43\xf8\x23\xd0\x3a\x0e\x7b\x61\x85\x47\xd8\x61\x2d\x06\xf2\xc5\xc3\x5e\x1e\xd1\xf1\x70\x8a\x96\xff\x10\x3b\xa9\xa4\x1f\x69\x0b\xdc\x41\x58\xac\x04\x58\x6c\xd1\xa2\xae\x19\x17\x21\xcd\x21\xa1\x61\x0b\xb5\x1a\x01\x1f\x7a\xe3\xa2\xa9\x56\xa2\x6a\xdc\xe4\x51\x25\x35\x18\x8d\x60\x2c\x74\xc6\x62\xf2\x78\x4a\xc5\x75\x55\x7d\xa5\xd2\x71\x26\x3a\x14\x52\xbf\xf0\xa6\x13\xf7\x08\xf5\xe0\xbc\xe9\x72\x86\x63\x6a\x32\xe0\x29\x37\xf3\x2c\x53\x21\x19\x38\x0a\x2b\xcd\x40\xa3\xa5\xde\x3b\x38\x49\x7f\x60\xf3\x01\x79\xd7\xd5\xad\xb1\x80\x0f\x82\xcc\x6c\x40\x40\x2b\x86\x1a\x3d\xef\xfd\x0e\x27\xeb\xd8\xc0\x6e\x4c\x75\xcb\x35\xc0\xe9\x80\x04\x8a\x59\x71\x7d\x1e\x61\x70\x52\xef\x0b\x5f\x69\x6b\x27\xd7\x36\x31\x4c\xd3\x2e\x4a\x34\x13\x46\x45\x0e\x38\xd4\x0d\xcf\xb4\x01\x6e\xa9\x5a\x7a\x44\xfb\xde\x9b\xf7\xf4\xff\x86\x23\x32\x83\xa7\xaa\xa1\x35\x89\x04\x68\x21\xe6\x06\x0a\x56\x40\x8d\x64\x55\x81\xc2\x66\x8f\x16\x5c\x27\xac\xcf\x4b\x5d\xc3\x9d\x09\x2b\x45\xeb\xde\x80\xd0\x53\x1d\x6c\xaa\x40\x4f\xb1\x46\x1d\xa5\x64\xe4\x45\x1b\x2b\x4e\x45\x2a\xa1\xb5\xa6\x2b\x31\xc2\x54\x15\x4a\x88\x81\xdb\x60\x6f\x9c\xf4\x19\x1d\x60\xf4\x6c\xa5\x37\x2e\x61\x8b\x18\x92\x32\xef\x31\xd8\xb7\x42\xbb\x16\xed\x75\x55\xbd\xbb\xa9\xaa\x9b\x1b\xe6\xf1\x4e\x48\xbd\xe4\xf1\x62\x17\x6e\x6e\xe0\x1f\x6c\xfa\x71\x4e\x96\x4a\xcd\x08\x53\xba\x82\xe2\x6f\x6e\xaa\x7e\xd8\xad\x90\xff\x62\xcb\xbe\x57\x15\x00\x40\x74\xca\x1b\x2f\x14\xe8\xa1\xdb\xa1\x65\xb4\x87\xd4\x48\x0d\xf8\x20\x9d\xa7\x4a\xba\x4e\xe3\xbf\x7a\x90\x0e\x86\x3e\x96\x56\x01\x36\x4b\x8f\x50\xbb\xc1\xc6\xde\x12\xcc\xba\xa1\xef\xd5\x98\xa6\x3b\x2f\x46\x47\xa4\x37\x70\x69\x13\x4e\x82\xad\x46\x78\xe4\x41\xe4\xff\x51\xd8\x30\xfb\xdf\x3c\xf9\x03\xfc\xe7\x56\x3e\xfc\xe5\xcf\xd9\xe9\x2f\x47\x4c\x84\x2c\x1d\x60\x27\x3d\x61\xfd\x44\x1b\x47\x3e\x4d\xe1\x3b\xa8\x2d\x0a\x8f\x4d\x36\x8d\x3c\x95\xb3\xe0\xbe\x6a\xe9\xa5\x50\xf2\x1b\x36\x57\x32\xfc\x3d\x5f\xf0\xed\x45\x2b\x86\x6c\x11\x65\x25\x80\xe9\x00\x2b\x11\xa0\xb1\xba\xf6\xaf\x69\xe8\x95\xe8\xa8\x01\xa4\x25\x37\x3c\xf5\x03\x7c\x6a\x1a\x8b\xce\xfd\xf5\xa5\x2e\x44\xbc\x86\x9e\xf4\x94\x03\xbf\xa4\x81\x67\x0e\x78\xb3\xb6\x7c\x22\x8d\xf8\x3b\xe3\x61\xae\x27\x90\xb8\xa6\x8e\xc4\x6a\xf1\xf7\x41\x5a\x46\x87\x83\xd6\xd8\x9c\x1f\xe2\xa2\x38\x7f\x51\x86\x13\x9e\x98\x16\xc6\x3e\x23\x2f\x4d\xf8\x15\xa1\x31\xfa\x4d\x5e\x6a\xbe\x8a\xd1\xb0\xdd\xa5\xbe\x76\x40\x8b\x9b\x34\xaf\xe8\x22\x0a\x05\xb1\xb6\xe9\x23\x5e\x7a\xe3\x9c\x8c\xc4\x6d\xda\x00\x19\x5a\x3e\x92\x77\x1f\x23\x77\xd9\x67\x8a\x34\x38\xa1\xb1\x46\xe7\x84\x95\x6a\x8c\x4a\x80\xa9\xc4\x9c\x34\x44\x37\x66\xfe\xd3\x26\x9c\x77\xdb\x89\x90\x63\x5d\xc6\x75\x52\xba\x8a\x67\xe5\xeb\xdb\x44\x49\xec\x8f\x1b\x76\x91\x22\x96\x29\x65\xa1\x90\x78\xaa\x34\x10\x58\xda\x0f\x96\xb0\xb3\xd4\x1c\xb9\xe7\x58\xec\xcc\x11\x9b\xdc\x7b\xd6\x9d\xb9\x2b\x7a\xfa\x1b\xae\x70\x74\x0e\x14\x1e\x51\x11\x5c\xfb\x61\xa7\x64\xbd\x81\xdd\x90\x38\xcb\x51\xfa\x04\x25\x77\xa7\xb0\x2b\x4d\xa5\x9d\xe2\x46\x3d\x29\x1d\x6e\x2e\xde\x58\x06\x06\xfb\x95\xf3\x38\xd7\x52\xa5\xad\x9a\x15\x19\x97\xb6\x1a\x99\xd5\xc3\xf2\xc9\xd5\xa7\xc2\x09\xcb\x76\x62\x84\xbd\x15\xda\x47\x99\x15\x17\xc9\x21\x52\x87\x4d\x80\xa1\x70\xe4\x31\x31\x59\x76\xa1\xcf\xaa\x80\x36\x2a\xb4\x24\xc1\x6a\x35\x2a\xd0\x7a\x26\xe1\xa8\x70\xd9\x76\x69\x85\x71\x9a\x60\x92\x43\xf7\x07\x6b\x86\x3d\xb5\xcb\xac\x79\x2e\x8b\x28\x88\x17\x0e\x8b\x72\xf2\x4c\x50\xbc\x79\x97\xc6\x44\xf6\x56\xc3\x99\xc5\x50\x5a\x7b\x71\x38\x54\x46\xed\xa0\x73\x81\x2c\x28\xec\xed\x07\xf8\x5b\x40\xf3\xf7\x3c\x85\xa7\x19\xb7\x7c\x14\x3d\xd8\x5a\x74\x51\xfb\xb7\xd1\xe7\x00\x31\x2a\x0e\x38\x0a\x35\xe0\xd9\xb4\x30\xe5\x3a\x96\x39\x7c\xfc\x08\xd1\x8b\xb3\x91\xf4\xef\x55\x22\x7c\xa1\xe2\x38\xe8\x06\xe7\x49\xaf\xd1\x4a\x4e\x74\x08\x22\xa4\x28\x59\x8c\xba\x73\x6a\x2a\x1c\xd3\xab\x99\xf9\x1f\xd5\xfc\xaf\x1f\x99\xaf\x93\xda\xff\x7f\xf8\x3a\x36\x93\x73\xba\x96\x7a\xd9\xfe\x9f\xa5\x6b\xa9\x6b\x35\x34\x48\xca\x2e\x1d\x14\x82\x0b\xf5\x01\xeb\xfb\x79\xe4\x91\x01\x92\x8d\x13\xf2\x29\x93\x76\x85\xf4\xf6\x25\x72\x3b\xc4\x1e\xe4\x76\x55\x70\x41\x63\xd2\x98\x75\x69\xbd\x01\x25\xef\xe9\x64\xa8\x24\x9f\xb2\x3a\x92\x27\x42\x37\x59\xbf\xb0\xe6\xa4\xe7\xa4\x59\x64\xcb\x28\xf5\xd0\xab\x70\x2e\x80\x67\xa9\x3e\x6d\xcb\x82\xea\x63\xa6\x2f\x62\xfa\x28\xf3\x89\xcc\x42\x9b\x4f\x1a\x35\x84\x50\x4e\x5c\xdf\xa7\xa9\xde\xc6\x1e\x9f\xaa\xaf\x68\xf8\x2a\x48\x92\x50\x53\x6f\x97\x45\x65\x71\xa5\xa6\x68\x46\x2e\x8d\x9f\x63\x5d\x5e\xfd\xf4\xf6\x91\xe2\x88\x62\x24\x03\x20\x95\x46\x80\xdf\x11\x2f\x05\x7d\x3c\xd2\x3e\x8d\x79\x92\x87\x42\xea\x80\xa0\x49\x2d\xf0\x31\x10\xca\x53\x7b\x9a\x4f\x7d\xb2\x28\x14\xe2\x3b\x52\x5d\x1a\x4f\x61\xdc\x9b\x20\xbd\xa2\xd4\xdc\x94\x50\x4e\x26\x58\xa5\x67\xb5\x09\xb5\xb1\x16\x6b\xaf\xc6\x4b\x20\x13\x83\x5a\x20\x66\x12\xee\x0b\xbe\x88\x5c\xfe\xc6\x2d\xf1\x90\x94\x75\x1c\x3f\x57\xd5\xf4\x8f\x3c\xbc\x5a\xbc\x3d\xdb\xee\x75\x0e\x75\xa8\xda\x92\x0a\x93\x95\xf5\xed\xfe\xbc\xd8\xe6\x32\x35\x09\xb0\xe1\x51\x32\x74\x29\x00\xca\x7d\x2b\x8f\x38\x45\x8b\x59\x22\x60\xba\x89\xf0\xe6\xb1\xd3\xeb\x92\xd5\xee\xf8\x64\x58\x2b\x61\x45\xba\xd4\x60\x5e\xab\x2d\x1f\xff\xc6\x9e\x55\x89\x58\x3b\x88\x75\x28\xf4\x9c\x97\xf0\x88\x76\x5c\x1e\x0a\xf3\xcc\xf9\x85\x81\x5b\x9e\xf8\xa2\x0d\xce\x64\x83\xad\xd4\x58\x7a\x12\xba\xa0\xd9\xfd\x86\xd1\x52\xe6\xc2\x70\x29\x90\x3b\xdd\x65\x17\x45\xc5\xfd\x50\x51\x1a\x91\xd9\x39\x9b\x2e\x5f\xa7\xd0\x9b\xe9\x4a\xe5\x31\x94\xb3\x83\x1f\xb2\x00\xde\x64\x7e\xdc\x14\xb0\x7f\x01\xea\x5f\x0e\xfa\x68\x74\xba\x25\x09\xdb\x17\x13\x1a\xae\xbc\x26\x11\x29\xbf\xcd\xa5\x4b\xba\x44\x35\x27\x47\xda\x8f\xa2\x48\xfa\x74\x81\xe0\xe4\xe8\x71\xa1\xc2\x9f\xae\xbe\xd5\xf3\x40\xa1\xf5\xb7\x41\x4b\x6c\x27\xb5\xcf\xf6\x5d\x5e\x35\xf5\x2e\x48\x52\x2b\xc9\xfd\x63\x09\x8d\xdc\x05\x93\x65\x6c\x66\x0c\x06\x7f\x8c\xfe\x5a\x6d\x15\x33\xea\xf8\xf9\x19\x15\xf5\x29\x48\xa7\x49\x13\x25\x0a\x51\x41\x60\x0a\x0d\xc6\x02\xfe\x3e\x08\x15\x7e\xad\x08\xaa\x27\x65\x14\x3c\xa9\x13\xe9\x58\xc2\x69\x22\xdd\x2e\xd4\x74\x2b\xb4\xdd\x61\x6b\x2c\x6e\x59\xa3\xa0\x8f\x3b\xa1\x86\xbc\xe8\xa2\xcf\xac\x19\x8f\xf7\xba\x3b\xdc\x4b\xad\x09\x45\x8b\xab\xd2\xe9\x12\x75\x65\xf6\xf3\x8c\xcc\x0e\x5e\x95\x8f\xdf\xc2\xfb\xa7\xb3\xfd\xf7\xd4\xe1\xce\x1a\x33\x5f\x8d\x45\xf9\x33\x65\xb6\xb7\x78\xe4\x7b\xcb\x02\x7d\x2f\xd3\xb0\x2b\x9a\x08\xbc\xb8\xc7\x33\xc4\x0a\x7a\xd2\x0b\x2b\x3a\xf4\xf1\x1a\x5c\x34\xcd\x5c\xfc\x14\x65\x10\x69\x6e\x81\x84\x78\x19\xff\x68\x49\xbe\x48\x07\x5d\xd8\x18\xd7\xb6\xe1\x4f\xe9\x71\x29\x9b\x1e\xd3\x4a\x4f\x6f\x8a\x1b\xba\x67\x77\x63\xba\x23\x7a\xd1\x89\x22\xe8\x9b\x2f\x5d\xef\xc7\xb5\x36\xfb\x49\x8f\xe1\xce\x35\x7d\x82\x98\x9f\xb4\xf9\x82\x94\x2d\xc4\x4f\x44\x65\x6f\x9a\xdd\xac\x1c\xc4\xe4\xf2\xc7\x8f\xf0\xd3\xb2\x79\xd0\x8e\x2c\x7d\xb9\x5a\xe3\x9c\x95\x2d\x39\x3f\xb4\x4d\xd2\x14\x5e\x51\x23\xd0\x78\x52\x63\xd2\x72\xd1\x49\x4e\x30\x7f\xe0\xf9\x86\xd6\x9c\x6b\x92\x94\xa9\x1f\xf1\x9e\x57\xba\xa9\x7f\x97\x32\x41\x3a\xf8\x8d\x4d\xa1\x65\x48\x86\x03\xf3\x50\x7e\x3e\x3b\xfb\x02\x56\x85\x6e\xbd\x94\x11\x62\x67\x8e\xb8\xc9\x77\x25\xe7\x23\xf8\x53\x90\x36\x0c\x8c\x60\x1b\x1b\xb2\x65\x74\x71\x47\x15\x29\xa7\x33\xfc\x31\x62\x79\x7b\xfc\xcb\xd0\x75\x23\x7c\xff\x51\xc1\xff\x02\x00\x00\xff\xff\xb9\x57\xa9\xfb\x8a\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xde, 0xd5, 0x68, 0x7c, 0x88, 0xc9, 0xa8, 0x1e, 0xd, 0xee, 0xbe, 0x78, 0xd1, 0xb4, 0x65, 0xce, 0x74, 0x82, 0x74, 0x6c, 0x7b, 0xd8, 0x25, 0x89, 0x19, 0x24, 0x99, 0x66, 0x9b, 0x3d, 0x17}}
	return a, nil
}

var _tokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x36\x14\xbc\xf3\x57\xcc\x6e\x81\xae\x1d\x64\xe5\x1e\x8a\x1e\x82\xa4\xdb\x6d\x3e\x8a\xa2\x45\x0a\x78\xb3\xed\xb1\xa0\xa9\x27\x8b\x1b\x99\x14\xc8\x27\x6b\x83\xc0\xff\xbd\x20\x25\xd1\x52\xa2\x14\xe9\xa5\xb9\xc4\x14\xf8\xe6\xcd\xbc\x19\x92\xab\x93\x13\x21\xbe\xc1\x4d\x63\xb6\x7a\x53\x11\xee\xec\x3d\x19\xdc\x58\xd7\x4a\x97\x6b\xb3\xc5\xa5\x35\xec\xa4\x62\x21\xee\x4a\xed\xa1\xfa\x25\x7c\x69\x5b\x8f\xd2\xb6\x90\x06\x52\x29\xdb\x18\x86\xb2\x4d\x95\xc3\x13\xa3\xa9\x21\xa1\x1a\xcf\x76\x97\xc0\x3b\xec\x35\x29\xd2\x7b\x72\x82\x2d\x64\x55\xd9\x16\x5c\xd2\x0e\x6c\x51\x74\x5d\xc1\x61\x9f\x0f\x5f\x24\x72\x5d\x14\xe4\xc8\x70\xea\xd1\x96\x64\x68\x4f\x2e\x94\x3d\xc0\x75\x68\x7d\x4d\x16\x58\xd2\x03\x94\x34\xa8\x9b\x4d\xa5\x7d\x09\x0e\xb4\x7b\x41\xe4\xe0\xc8\xdb\xc6\x29\x82\xf4\x90\x89\x0c\x94\xac\xe5\x46\x57\x9a\x1f\xf0\xa5\xf1\x8c\x4a\xdf\x13\x24\xfe\x94\x4d\xc5\xa7\x42\x9a\x3c\xb4\x83\x27\x13\x30\x72\x4b\xde\xbc\x63\xd0\x9e\x0c\x0c\x51\xa0\x8c\x7b\x63\x5b\x68\x86\xf6\x47\xd2\x99\x10\x7f\x95\x64\xc6\x23\x6a\xa5\xe1\xa8\x4d\x39\x92\x1c\x7a\x24\x6e\xa7\x9d\x24\x25\xab\x2a\x76\xeb\x76\xdc\x52\x9b\x76\x88\xa2\x31\x8a\xb5\x0d\x88\x39\x6a\x67\xf7\x3a\xa7\xd0\xb4\xd5\x5c\xc6\x9a\x24\xc8\x51\xa4\xa0\x08\x5c\x4a\xee\x90\x43\xef\xd1\xa0\x05\x97\xa4\xdd\x71\xdc\x99\x10\x27\x2b\x21\xf4\xae\xb6\x8e\x9f\xb8\x56\x38\xbb\xc3\x77\x5f\x6f\x3e\xdf\xfe\xf2\xeb\xcf\xbf\x5f\xdf\xfd\xf1\xdb\xf5\xed\xc7\xab\xab\xf5\xf5\xa7\x4f\x42\xd4\xcd\xe6\x18\x8c\xb8\x7f\x14\xa0\x47\x21\x00\x60\xb5\xc2\xf5\x3e\xf8\x18\xe9\x68\x0f\xda\x69\x66\xca\xa3\x9f\x03\x07\xe9\x08\x39\xd5\xd6\x6b\xee\x86\x1a\x24\xb1\x74\x5b\xe2\xc1\x69\x17\xd1\x42\x47\x8a\x70\xc3\x6c\xf2\xab\xae\x6e\x21\x77\x61\xce\x67\xf8\x7c\xa3\xbf\xfe\xf0\xfd\x69\x64\x7e\x86\x8f\x79\xee\xc8\xfb\x0f\x4b\x91\xea\x53\x12\xd2\x78\xcf\xa6\xa2\xb3\x34\xcc\x5e\x43\xaf\x23\x1e\x04\xed\x03\x73\x47\x91\xe2\x98\x73\x14\xd2\xea\xaa\xc2\x26\x06\x86\xb3\x69\x2d\x81\x1f\x6a\x82\x36\xb9\x56\x92\xc9\xf7\x03\x89\x33\x91\x63\xdb\x6c\x5c\x8e\x44\x77\x10\xe9\xa7\x54\x8a\xbc\x5f\x78\xaa\x8a\x25\xf6\x32\x58\xae\x74\xad\x29\x88\xbf\x4c\x71\x9e\x30\xef\x79\xce\xa1\xad\x56\x41\x7c\x17\xae\x2e\x31\xf2\x9e\xfc\x70\x04\x60\x37\x5f\x48\x71\x3c\x34\x06\xd2\x6d\x9b\x5d\x3c\x93\x26\x1f\xc2\xe4\xc7\x48\x9a\x07\xf3\x12\xa7\x77\xbe\x47\x6a\x7c\x48\x45\x3c\x4d\x6c\x1d\xe5\x47\xc9\x73\xb4\x82\x51\x45\x63\x06\xe6\x8b\xce\xcd\x9f\xa6\x3e\x45\xe0\x25\x1e\x53\x55\xf8\xab\x46\x99\x59\x53\x81\x0b\x84\x49\x65\x89\x50\xb6\xb1\xce\xd9\xf6\xfc\xdb\xc7\x79\xd3\x0f\x3f\x2e\x96\x6f\xc4\x33\xc8\x8d\xac\x64\xb0\xe7\x22\x06\x2b\xeb\x97\xa3\x6d\x93\x8a\x11\x81\x6c\x2a\xe1\xfc\x7d\xf8\xbf\x9c\x36\x08\x67\xe2\xe5\x44\xf7\xbd\x86\x48\x47\x39\xb6\x35\xe4\x3e\x64\xb2\x8b\xf7\x32\xa1\x1d\x26\xbe\xab\x52\x9a\x2d\xad\x07\xe9\xfd\xda\x4f\x1d\x82\x2d\xe2\x87\x22\xdd\x95\xbd\x87\xfd\x3d\x93\x1f\xb7\xfe\x9b\x53\x4f\x7a\x2d\xfe\x86\xa1\x76\x3d\x17\xcd\xa7\x8e\xd5\x8e\x9e\x7c\x09\x7f\xe3\xea\xd7\x78\x86\x37\x17\x30\xba\x3a\xc3\xdb\xcb\xf8\x1a\x19\xcb\xe8\xca\xe6\x2e\xc7\x78\xaf\x05\x91\x47\x5a\x6f\x27\x14\x0e\x93\xd5\x34\x42\xb8\x98\xb0\x9b\x1b\xbe\x36\x9a\x17\xb3\x07\xf3\x75\xea\xff\x53\x5c\xff\x5f\xe9\xcf\xd3\xd0\x15\x1c\xd2\x85\xff\xfc\x01\xeb\x3f\x85\x7b\xc5\x50\x3b\x79\x96\x07\x5a\xe9\x29\x7b\x21\x76\x7d\xe4\x52\xdc\x9e\xf5\x78\x61\xdc\xe1\xd6\x48\xed\x8e\x83\x76\xc4\x8d\x33\x38\x7f\xdf\xbf\xc7\xb3\x30\xe9\xe7\xb2\x57\x78\x10\xff\x04\x00\x00\xff\xff\xd1\xe8\x38\xa0\x39\x09\x00\x00"

func tokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_tokenforwardingCdc,
		"TokenForwarding.cdc",
	)
}

func tokenforwardingCdc() (*asset, error) {
	bytes, err := tokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xd4, 0x19, 0x5d, 0x89, 0x9e, 0x77, 0x14, 0xb5, 0x83, 0xdc, 0xa7, 0x54, 0x30, 0xe3, 0xff, 0x67, 0xa7, 0xd7, 0xd8, 0xb9, 0x2e, 0x4c, 0xf4, 0x3e, 0xb8, 0xd4, 0x52, 0xb7, 0xdd, 0x70, 0xd0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleToken.cdc":    exampletokenCdc,
	"FungibleToken.cdc":   fungibletokenCdc,
	"TokenForwarding.cdc": tokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleToken.cdc":    &bintree{exampletokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc":   &bintree{fungibletokenCdc, map[string]*bintree{}},
	"TokenForwarding.cdc": &bintree{tokenforwardingCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
