// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleToken.cdc (7.43kB)
// ../../../contracts/FungibleToken.cdc (6.984kB)
// ../../../contracts/TokenForwarding.cdc (2.351kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x4b\x6f\x1b\x37\x10\xbe\xfb\x57\x4c\x73\x68\x65\xc4\x96\x5d\xa0\xe8\xc1\x70\x1e\x76\x63\x17\x41\x5b\xb7\xc8\xa3\xbd\x9a\xbb\x3b\x92\x58\xef\x92\x02\xc9\x95\xac\x18\xfe\xef\x05\x87\xe4\x2e\x49\xed\xca\x76\xdc\xe4\x92\x48\xe2\x3c\x38\xfc\xe6\x9b\x8f\x0c\x6f\x96\x52\x19\xb8\x6c\xc5\x9c\x17\x35\x7e\x92\x37\x28\x60\xa6\x64\x03\xc7\xb7\x97\x9f\xaf\x7e\x7d\x7f\xfe\xfb\xc5\xa7\x3f\x7f\xbb\xb8\x3a\x7b\xf7\xee\xc3\xc5\xc7\x8f\x7b\x7b\xcb\xb6\x80\x52\x0a\xa3\x58\x69\xe0\xe2\x96\x35\x4b\x6f\x76\x92\x79\xb9\xdb\xdb\x03\x00\x38\x3a\x3a\x82\x4f\xd2\xb0\x1a\x74\xbb\x5c\xd6\x1b\x90\xb3\xc4\x4c\x03\x17\x80\xb7\x5c\x1b\x14\x25\x92\x89\x0d\xb1\x62\x0a\x8c\x35\xfb\x48\x56\x27\xf0\xf9\x92\xdf\xfe\xfc\x53\xec\xd3\x1a\xbf\x17\xdc\x70\x56\xf3\x2f\x58\x85\x5f\xfa\x15\x0b\x04\x5c\xa1\x30\x60\x16\xcc\x00\xd7\x80\x0d\x37\x06\x2b\x58\x2f\x50\x80\x59\x60\xbf\x11\xae\xa1\x54\xc8\x8c\x77\x63\x33\x70\xa6\x5b\x61\x26\xdc\xfd\x3b\xcd\x6b\x3f\x4f\xec\x1f\x6e\x16\x95\x62\x6b\xf1\xe4\xb4\x5c\x51\x98\x42\x58\x07\x1f\xee\x44\x18\xfc\xcd\xda\xda\x0c\x26\xd8\x85\x9b\xb0\x46\xb6\xc2\x84\xbc\x0e\xc8\xf4\x04\xce\xaa\x4a\xa1\xd6\x6f\xb6\xf2\x7c\x87\x4b\xa9\xb9\xf9\x8a\xf2\xf5\x79\x56\xc1\x07\x18\xb9\x33\xcb\x2e\xd8\x56\x96\x46\xee\xc8\xf1\x0f\x2e\xbe\x22\x41\x81\xeb\x38\xc9\xa6\x77\x92\xa7\xe5\xfc\x67\x39\x6d\x65\x71\xde\x2a\xf1\xcc\x32\x69\xa3\xe4\x66\x24\x09\xe7\x7e\x3c\x09\x4a\x52\xfd\x12\x81\xf4\x09\x59\x30\xaa\x06\x95\x40\x81\x42\x2d\x5b\x55\xe2\x38\xe8\x93\x58\x13\x56\xd7\x72\x8d\xd5\xd9\x58\x66\x94\xf9\xf3\x32\x2b\xc8\xc5\x23\x32\x4b\x62\x4d\xa2\x24\x7a\xd0\xc5\xc1\x2f\x58\xb9\x80\x56\xa3\x02\x6d\xa4\x42\x0d\x4c\x00\x17\xda\x30\x51\xa2\x25\x22\x29\xea\x0d\x11\x01\x99\x5b\x26\x32\x0b\xe4\x6e\x35\x9b\x63\xb2\x89\x59\x2b\x4a\xc3\xa5\x23\xac\xde\x86\x89\x0a\xe6\x72\x85\xf6\xf4\xa0\x70\xde\x96\x0a\xe9\xfb\xa5\xd4\xc6\x72\x4c\xc5\xc9\xb0\x73\xc7\x45\xc6\x95\x81\x90\x36\x04\x94\x92\xd5\x35\x56\xd3\x24\x7a\xb9\xc0\xf2\x46\xc3\x82\x2d\x97\xb6\x6a\x06\x54\x2b\x0c\x6f\x90\x4c\x71\x85\x0a\x58\x97\x21\x95\x2f\xf5\xd1\xf9\xfa\xe0\x4b\x6c\x57\x08\xb7\xff\x02\x43\xb1\xc3\xce\x2c\x2d\xe2\xad\xb1\x15\x4a\x58\x92\x4e\xd0\xa6\xd9\xb9\x73\xb8\x9e\x71\x41\xc6\x07\xa0\xa5\xfd\x5d\xd1\x09\x0a\x09\x6b\xb6\x81\x99\xb4\xb9\x35\xac\xe6\x25\x97\xad\x76\xc7\x61\xa4\x8f\xe9\xaa\xd8\x97\x46\xb6\x3e\x2c\x17\xc0\xb8\x9a\xc2\x19\xe8\x25\x96\x9c\xd5\x1e\x95\x3d\x48\x04\x62\xa5\xad\xa7\xa2\xcf\xc1\x48\x42\x79\xe7\xae\x27\x81\xb4\x14\x16\x51\x9d\x23\x4a\x21\x1b\x5f\xd3\xbf\x94\x5c\xf1\x0a\xd5\x41\xf6\xfd\x07\x2c\x91\xaf\xb6\xbf\x3f\x67\x35\xa1\xca\x8f\xbd\xf8\xec\x68\x8e\x41\xe1\x17\xb8\xdd\x69\x58\x75\x88\x8d\x67\x9e\x5f\x95\xce\x3b\xe7\x0c\x78\x37\x85\xe8\x58\x82\x43\x0b\x86\xb0\x15\x2a\xaa\x85\x80\xc5\x46\x67\x6b\x0d\x27\x99\xe7\x7d\xb8\xeb\x7e\xb7\x7f\x34\xd6\xb3\x69\x70\xf9\x2a\x38\xef\x96\xdc\xa7\xdb\x0a\xa3\x29\xfe\x32\x59\x70\x19\xb0\xe8\x30\xc3\x6e\x5c\xf3\x39\x7a\x03\xe6\x3e\xa8\x79\xdb\xa0\x30\x89\xa1\xed\x9b\xe0\x5d\x3b\x6b\x6f\x44\x43\xb0\x6b\xbc\xe9\x68\xe8\xf7\xc6\x63\x4b\x7b\x76\x31\x68\x55\x0e\x53\x1b\xdf\xb2\x81\x88\x5a\xed\x10\xb3\x90\x75\x95\x78\xb0\x41\x1a\x29\x70\xd3\x2d\x2d\x90\x8b\x39\x18\xc5\x84\x9e\xa1\x52\x58\x4d\x6d\x18\x85\xa6\x55\x42\xd3\x7a\x81\xeb\x7a\x93\x78\x09\x4d\xe5\x83\xca\xa4\xb5\xc8\xb1\x6b\x52\xdb\x34\xdc\x50\x3f\x16\xd1\x30\x4d\x7c\x61\xad\x71\x6d\x1b\x6b\x78\xdb\x16\x3d\xb3\x56\x74\x85\xcb\xc7\xc8\x09\xbc\x4d\xd1\xea\x72\xda\x89\x80\xe4\xe3\xa1\x3f\x84\xc4\xc0\x12\xf9\xa8\xfe\x70\x7f\x07\xfd\x41\xce\xe4\x5a\xa0\x7a\x33\x65\x6e\xce\xef\x27\xbe\x5c\x29\xe1\xf4\x30\xa6\x85\x1e\xb3\xce\xdb\xfe\x18\x1c\x7d\xd1\x9e\x86\x46\x7f\x30\xb2\xf8\x17\xcb\x1c\x92\x04\x43\x56\x55\x3a\x71\xc3\x8d\xee\xba\xce\x9f\x67\xd2\xd5\x08\xb4\x45\xfd\x08\x84\x72\x0d\x7e\xae\x5a\x4f\x5e\x1a\x90\x0b\x6d\xc3\xbb\xd4\x0a\x2c\x59\xab\xb1\x07\x7d\xda\x83\x36\xe5\x08\xdc\x16\xc6\xa8\x42\x26\x9e\xf5\x88\x80\xc8\xf6\x87\x3e\xf7\x05\x4b\xf7\x55\x20\x0a\x8b\x4c\xdd\x36\x58\xd1\xd6\x89\xc4\x67\x92\x86\x91\x87\xa5\x17\x2f\xbb\x01\xe8\x0f\x62\xe2\x4e\x7d\x08\x74\x39\xef\xd4\x68\x1c\x15\xc2\xe9\xa1\xd7\xb9\xfa\x3b\x78\x1b\x5f\x11\xa6\xe9\xde\x1f\xc2\xea\x4b\xe7\x6f\x9a\x53\x58\x06\xd9\x6d\x31\x9a\x98\x39\x4d\xfa\x20\x6e\x13\x1b\x78\x05\xc7\xd3\xe3\xe4\xf7\x70\xb2\x29\xdb\x47\xf0\xf5\x0b\x26\x79\x5d\x92\x02\x44\x37\x21\x78\x35\xfe\xd3\x61\x52\x88\x28\x5a\x14\xb3\x67\xa6\x8b\x66\x69\x36\xc3\xba\x29\xed\x97\x94\x4d\x1d\x34\x2d\xd3\x00\x8b\xe1\xff\x05\x95\xec\x75\x81\xa8\x3a\x76\xe4\x3d\xf9\xb1\xba\xb6\x3c\xea\x49\xd0\x0e\x77\x52\x03\x4d\xab\x1d\x19\xba\xc9\x18\x74\x4c\xe2\x8d\x04\x1c\x79\x71\x7e\x3b\x62\xcd\x45\x9b\xfd\x42\xaa\xca\x89\x0c\xea\x31\xf7\x7b\xef\xad\x2c\x69\x9e\x38\xe5\xc0\x8a\x9a\x9a\x59\xb9\xb9\x1e\x10\xac\xbb\x39\x4d\x8d\x04\x66\xb3\xc4\x6d\x09\x61\x21\x9f\x17\x73\x62\xd9\x36\xe7\xd7\x07\xe8\xed\x78\x7a\xbc\x1f\x1f\x52\x22\x4f\xce\xaa\x86\x0b\xae\x8d\x62\x46\xaa\x5c\x5f\x38\x7f\x57\xb8\x76\xea\xe8\x91\x0c\xd8\x9d\x68\x74\x4c\x83\x77\x84\x9d\xcd\x9e\xc5\x1e\xb9\x28\x9c\xc0\x5b\xaf\xdc\xee\xb6\x5b\x71\xe7\x4d\x23\xf9\xb8\x7b\x5c\x0c\x67\x30\xe2\xe0\x7e\xa4\x84\xee\x72\xf1\xec\x12\x66\x97\x99\xc7\x95\xd0\xc5\x26\xec\xb8\x7f\x0e\x55\x2b\xbf\xfd\xec\xaa\x48\x70\x38\xce\x02\x11\x62\x86\x6e\x08\x61\x30\xba\x91\x49\x4d\xc0\x2c\x12\x43\xff\xb8\x1b\x84\x1d\x3a\x41\x75\x3f\x4e\x6d\x77\x60\xd8\xd2\xc9\x5e\xe7\xd9\xc6\x73\xb7\xe6\x70\xdf\x08\xa8\x4c\x87\x66\x27\xf4\x21\xd2\xcf\x83\x18\x4c\x43\x59\x3b\x37\x02\x1e\x79\xd4\xd6\x40\x47\x9b\x3b\x20\x65\x60\x13\x6b\x02\xb3\x99\xe8\x85\xeb\x60\x4b\xcf\x46\x3a\xb1\x19\xe3\xc2\x9d\x30\xe9\x53\x1e\x50\x76\xdb\xa3\x32\xc3\x8e\xbd\x8e\xa6\xdf\xd8\x3f\xbe\xda\xaf\x2d\xf9\x9c\xc0\x0b\x57\x31\xff\x4c\xe2\x18\xb9\x40\x98\x13\x98\x94\xad\x83\x20\x86\x7f\x31\xe6\xe7\xd4\x4f\xe1\xec\x00\x46\xfc\xd6\xa8\xb5\x73\x6a\x6b\x11\x0e\xd5\xb9\x4a\x43\xdc\x3f\x7b\x2a\xbe\x1c\xd2\xae\xdb\xb9\xc2\xd0\x06\x1e\x14\xbe\xd9\xdb\x51\xae\x53\xe1\x59\xd2\x96\xee\x6d\xc3\xac\x3a\xa4\xdd\xf3\xed\x24\x9f\xc7\x79\x20\xa2\xbd\xe7\xf3\x80\x25\xbf\x87\x39\xa0\xa3\xb8\x54\x86\xb6\x4a\x3c\xa9\x31\xbd\x76\xea\xb5\x7c\x78\xdb\x39\x00\x9c\xcd\xb0\x34\x7c\x85\xf5\x86\xfc\xd2\xf5\xad\x97\xc5\xa3\x01\xae\xa4\xc1\x13\xa7\xec\x9d\xc8\x88\x1e\xf0\x58\x6b\x64\xc3\x0c\xb7\xad\xbb\x01\xdd\x16\xf4\x2a\x82\x55\x77\x33\x4d\x2f\x91\xf1\xa3\x77\xf2\x64\x44\x69\xb7\xa5\x91\x6a\x77\xd7\xf7\xf5\xf8\xe6\x7a\xda\x5a\xb1\x80\x9b\x71\xf9\x3c\xac\x66\xb3\x96\xc8\x5e\x32\xb7\xf1\x1d\xe1\x8f\x10\x1e\x6f\x81\x80\x9c\x36\xf6\x8f\xc7\xc7\x56\x55\xc7\x2f\x21\x6e\x04\x46\x25\x25\x39\x9a\x13\x71\x34\x49\x48\x41\xb2\x15\x5a\x31\xca\x45\xf2\xbe\xe7\x5c\xee\x0d\xd6\x6f\xb8\x63\xf3\x1c\xf7\xd3\xec\x7d\x5f\x4c\x6d\xbc\xc9\xe9\x21\x39\x73\xb7\x89\x23\x1f\xf7\x08\xa3\xd3\x70\xa7\x38\xb4\x3d\x66\x91\x50\xf3\x12\x4a\xb6\x64\x05\xaf\xb9\xd9\x84\xe9\x41\x6a\xb8\x8a\xdf\x33\xe8\x29\x0f\x6f\x97\x52\x63\xdc\x3e\xb4\xfa\xda\x8b\xda\x6b\x68\xd0\x2c\xa4\xbd\xde\x29\xd9\xce\x5d\xc5\xae\xc3\x8b\xd6\x35\xd0\x94\x9d\xb1\x72\xb0\x30\xc9\xde\x6a\x2e\x6e\x4e\xbf\xbf\x1b\x7e\x1a\xbb\x7f\x3d\x49\xb0\x71\xe4\xb6\x91\xec\xba\x7b\x46\x4b\x56\x1a\xa6\xe6\x68\x76\x15\xaa\x5b\xfe\x8d\x2b\xe6\x0f\xfb\x1a\x66\x1c\xeb\xac\x60\xe7\xe1\xb7\xa7\xd6\x6b\xbb\x09\xef\x06\x1f\x11\x1f\x53\x40\xbf\xf4\xff\xa8\x1f\x35\x3f\x51\x7a\x0f\xf9\xe4\xd2\x31\xd9\x8d\x70\xb2\xdd\x81\x70\xf2\x95\x9e\xd7\x85\xa5\x0b\x26\xe2\xff\x19\xd0\x0b\xb9\x8e\x24\x5f\xf7\xe8\xbc\x66\x3a\x7a\xf9\xac\x86\x4a\x1d\x91\xcf\x8e\xff\xa9\x1b\x6e\xdb\xfb\xbd\xfb\xbd\xff\x02\x00\x00\xff\xff\x71\x71\xa2\xf8\x06\x1d\x00\x00"

func exampletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_exampletokenCdc,
		"ExampleToken.cdc",
	)
}

func exampletokenCdc() (*asset, error) {
	bytes, err := exampletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x5c, 0x4d, 0xa, 0x85, 0xbd, 0x97, 0x7b, 0x75, 0x21, 0xc6, 0x66, 0x3, 0x70, 0x7, 0xe6, 0x1a, 0x43, 0x4, 0xdc, 0x11, 0xb9, 0x6c, 0xe7, 0x93, 0xcb, 0x18, 0xb, 0xbc, 0xfe, 0x96, 0x20}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x4d\x8f\xdc\xb8\x11\xbd\xeb\x57\x14\xec\x83\x67\x9c\x76\xcf\x1e\x82\x1c\x06\xd8\x24\xbb\xc8\x1a\xf0\x25\x08\x12\x27\x7b\x6d\xb6\x54\xea\x26\x86\x22\xb5\x24\xd5\x3d\xb2\xe1\xff\x1e\x54\xf1\x4b\x52\xcb\x3d\xed\x8f\xcb\xcc\x48\xe2\x63\xd5\x63\xd5\xe3\x23\xfd\xf0\xf6\x6d\x55\xbd\x86\x8f\x47\x84\xf7\xca\x9c\xe1\xfd\xa0\x0f\x72\xaf\x10\x3e\x9a\x27\xd4\xe0\xbc\xd0\x8d\xb0\x4d\x55\xbd\x7e\x0d\xbb\xf4\x92\xdf\xed\xa0\x36\xda\x5b\x51\x7b\x90\xda\xa3\x6d\x45\x8d\x55\x45\x40\xf9\x4f\xf0\x47\xe1\x41\x28\x05\x6d\x82\xf5\x0c\x9b\x46\x3a\x38\x9b\x41\x35\x70\x14\x27\x7a\x45\xcf\x5b\x63\x3b\xf0\x66\x5b\x7d\x68\x41\xc0\xe0\xd0\x3a\x38\x0b\xed\x1d\xbd\x6f\xb0\x57\x66\x04\x01\x1a\xcf\x0b\xa8\x0d\xf8\x23\x4a\x9b\xff\xae\x02\xb2\x46\x6c\x68\xa4\xec\x7a\x85\x1d\x6a\x4f\x9f\xc1\x2c\x91\x12\xef\x96\xe3\x9f\x80\x2c\xc2\x6b\x8d\x22\x8e\x28\x21\x42\xb1\x83\x42\x07\x42\x37\xa0\x45\x27\xf5\xa1\xe2\x74\xfd\x8c\x01\xd7\x63\x2d\x5b\x89\x6e\x1b\x28\xfc\x9f\x18\x94\xdf\x81\x45\x67\x06\x4b\x84\xfd\x26\xea\x23\x88\xba\x36\x03\xc7\x26\x3c\x98\xb3\x76\x21\xb9\x44\x4f\x4a\x82\xe3\x10\x14\x30\xad\x4b\x8d\x95\x69\x79\x3a\x06\xcd\x98\xe0\xbc\xb1\xd8\x80\xd4\x91\x92\x84\x4e\xcf\xc5\x21\x66\xb9\x1c\x74\x14\x0e\x3a\xf4\x47\xd3\x38\xc8\x79\x98\xb3\x46\xcb\x19\x1a\x7f\x44\x1b\x97\xa3\x16\x1a\x6a\xa1\x54\x4c\xe9\x5f\xd6\x9c\x64\x83\x76\xb7\x81\xdd\xbf\xb1\x46\x79\xe2\xdf\x69\xd4\xee\x57\xa1\x28\xd0\x92\x70\xa1\xc6\x71\x18\x6e\xfa\x04\x1a\xac\x95\xb0\x08\xbd\xc5\x77\xb5\xd1\x8d\xf4\xd2\xe8\x40\x71\x6f\x9c\x9f\x3e\xe3\x18\x2d\x3a\x6f\x65\xed\x2b\x0a\x16\x9f\xb1\x1e\xe8\x25\x44\x5a\xda\x41\xd7\xe1\xe3\x40\x45\x48\x39\xa4\x3f\x02\xcd\xe3\xb0\x17\x56\x78\x84\x3d\xd6\x62\xa0\x58\x3c\x1c\xe4\x09\x1d\x7f\x4e\xd9\xf2\x2f\x62\x2f\x95\xf4\x23\x2d\x81\x3b\x0a\x8b\x95\x00\x8b\x2d\x5a\xd4\x35\xd7\x45\xa0\x39\x10\x1a\x96\x50\xab\x11\xf0\xb9\x37\x2e\x42\xb5\x12\x55\xe3\x4a\x44\x95\xd4\x60\x34\x82\xb1\xd0\x19\x8b\x29\xe2\x42\xc5\xb6\xaa\x3e\x50\xeb\x38\x13\x03\x0a\xd4\x2f\xa2\xe9\xc4\x13\x42\x3d\x38\x6f\xba\xcc\x70\xa4\x26\x17\x3c\x71\x33\x67\x99\x1a\xc9\xc0\x49\x58\x69\x06\xfa\x5a\xea\x83\x83\xb3\xf4\x47\x86\x0f\x95\xb7\xad\xde\x1b\x0b\xf8\x2c\x08\x66\x03\x02\x5a\x31\xd4\xe8\x79\xed\xf7\x58\xd0\xb1\x81\xfd\x98\xfa\x96\x7b\x80\xe9\x80\x54\x14\xb3\xe6\xfa\x75\x84\xc1\x49\x7d\x98\xc4\x4a\x4b\x5b\x42\xdb\xc4\x34\x4d\xbb\x68\xd1\x2c\x18\x15\x05\xe0\x50\x37\x3c\xd2\x86\x72\x4b\xdd\xd2\x23\xda\x77\xde\xbc\xa3\x9f\x1b\xce\xc8\x0c\x9e\xba\x86\xe6\x24\x11\xa0\x89\x58\x1b\x28\x59\x01\x35\x12\xaa\x02\x85\xcd\x01\x2d\xb8\x4e\x58\x9f\xa7\xda\xc2\x47\x13\x66\x8a\xe8\xde\x80\xd0\xa5\x0f\x36\x55\x90\xa7\xd8\xa3\x8e\x28\x19\x79\xd2\xc6\x8a\xf3\x84\x4a\x68\xad\xe9\xa6\x35\xc2\x52\x15\x5a\x88\x0b\xb7\xc1\xde\x38\xe9\x73\x75\x80\xd1\xb3\x99\xde\xb8\x54\x5b\xa4\x90\xc4\xbc\xc7\x80\x6f\x85\x76\x2d\xda\x6d\x55\xbd\x7d\xa8\xaa\x87\x87\x87\x39\x6d\xf4\x84\x9f\xae\xa8\xf2\x57\x15\x39\x2f\xed\x96\x87\xf7\xc3\x7e\x45\xe8\x17\xcb\xf3\xb9\xaa\x00\x00\xd2\x54\xde\x78\xa1\x40\x0f\xdd\x1e\x2d\x97\x76\xe0\x41\x6a\xc0\x67\xe9\x3c\xb5\xcd\x36\x0f\xf8\xe0\x41\x3a\x18\xfa\xd8\x48\x93\xd2\xb2\xf4\x08\xb5\x1b\x2c\x16\x49\x0a\xd8\x6e\xe8\x7b\x35\x66\x0c\xe7\xc5\xe8\x48\xe7\x06\xee\x66\x2a\x8d\x00\xd8\x08\x8f\xe9\x2b\xfe\x49\xe9\x9c\x84\x0d\x30\xff\x61\x94\x47\xf8\xef\x7b\xf9\xfc\x97\x3f\x4f\x72\xe0\x78\x3f\x68\xe9\xa5\x50\xf2\x13\x36\x33\x88\x94\x25\x9e\x30\x49\xb6\x74\x80\x9d\xf4\xd4\x0d\x67\x5a\x5a\x0a\xb4\x90\xe6\xa0\xb6\x28\xfc\x02\x86\x22\x09\x10\x17\xd3\xdd\xc9\xf0\xfb\x3c\xbe\xfb\x65\x80\xbf\xc7\x5a\xd3\xdf\x1c\x5e\x58\x0f\x52\xc0\x54\xaf\x3a\x54\xa9\x08\x95\x76\x35\xd0\x3c\xed\x9d\xe8\x68\x5f\x49\xf1\x6d\x18\xe2\x11\x7e\x69\x1a\x8b\xce\xfd\xed\x22\xde\x7f\x84\x3a\xff\x0e\x3a\x4b\xbc\x4d\xc2\xa0\x5a\x34\x37\xc5\x9b\xa7\xbd\x88\xd7\x9b\xd5\x68\x93\x76\xad\x86\xb9\x68\x23\x24\xe1\xab\xa3\xca\x5b\xfc\x63\x90\x96\x8b\xd7\x41\x6b\x6c\x66\x97\x84\x31\x81\x2c\x44\xa1\xd4\x3b\x8b\xd4\xd8\x97\xd6\x98\xb6\x48\x63\xd0\x81\x36\x79\xc2\xf9\x5c\x46\xc3\x6e\x9f\xb6\xda\x23\x5a\xdc\xe4\xb1\x93\x9d\x4d\xa1\xa0\x9d\xc4\xf4\xb1\x42\x7b\xe3\x9c\x8c\x9b\x89\x69\x43\x91\x52\x10\x71\x43\xe9\x23\x0d\xae\x84\x4e\x19\x37\x86\xe3\xd0\x58\xa3\x73\xc2\x4a\x35\x46\x7f\xc2\x02\x67\xce\x1a\x62\x24\xdb\x8b\x55\xb9\x34\x01\x65\x9f\x88\x12\x92\xa6\xca\x3a\xea\x86\x7d\x14\xa6\x25\x71\x6c\x4e\x92\x36\xce\x06\x87\xad\xc1\x0f\x96\x8a\x26\x6a\x67\xde\xdf\x2c\x76\xe6\x84\x4d\xde\xe7\x26\x03\x67\x20\x1f\x27\x0e\xe2\x0d\x8b\x0b\x3a\x07\x0a\x4f\xa8\xa8\x40\xfb\x61\xaf\x64\xbd\x81\xfd\x40\x45\x2b\x1d\x3d\x23\x5e\x04\xf1\xb6\x57\xd8\xcd\xc0\xd2\x2a\xb0\x31\x28\xce\x8a\x1c\x19\x2f\x3b\xc7\x95\xc9\x99\xfb\xb6\x19\x50\xcd\xf6\x8f\xd5\x41\x8d\xbc\x85\x84\xd9\x53\xa4\xd7\xf3\x09\xb3\x76\x62\x84\x83\x15\xda\x47\x57\x17\xe7\xc9\x39\xd2\x86\x9e\x6a\x81\xd2\x91\xa7\xa4\xa2\x25\x8a\x3e\xbb\x90\x68\xf1\xcd\xd9\x25\xb3\x5b\xcf\xdc\x22\x75\x29\xe3\xce\x10\xb8\xfe\xd2\xda\xe7\xd4\xfd\xd1\x9a\xe1\x40\x5b\x73\xf6\x57\xb7\x26\x14\xac\x12\x67\x45\xa4\xbc\x90\x13\x2f\xde\x2d\x29\x11\xd6\x22\x8f\x59\xec\x33\x8c\x6f\xcf\x83\xba\xa2\x1d\x74\x2e\xf7\x85\x44\xdd\x3f\xc2\xdf\x43\xf9\x7e\xce\x43\x78\x98\x71\xcb\x47\x01\x19\x76\x16\x5d\x3c\x61\xb4\x31\xea\x50\x5c\xd4\x0d\x70\x12\x6a\xc0\x8b\x61\x61\xc8\x36\xb6\x2d\xfc\xfc\x33\xc4\x28\x2e\xbe\xa4\x7f\xaf\x92\xfe\x0b\x15\xbf\x83\x6e\x70\x9e\x5c\x21\xcd\xe4\x44\x87\x20\x02\x49\x09\x31\xba\xdb\xb2\xd7\x70\x4e\xaf\x66\xf0\x5f\xaa\xf9\x6f\x5f\x8a\x1e\xa7\x43\xc5\x8f\xeb\x71\xdc\x3d\x56\xe4\x98\x77\x93\x1b\xe5\xf8\x77\x4c\x22\x28\x75\xad\x86\x06\xc9\x4a\xa6\x93\x49\x08\xa3\x3e\x62\xfd\x34\x27\x21\x4a\x40\x46\x39\x23\x9f\x6b\x69\x85\xc8\xe1\xdf\x62\xf0\x03\x0d\xc1\xe0\x57\x53\x45\x68\x4c\xfa\x68\xdd\xcd\x6f\x40\xc9\x27\x3a\x8c\x2a\xc9\x2e\xaa\x23\x7b\x24\x74\x53\x0c\x14\xfb\x5c\x7a\x41\xa6\x49\xb6\x5c\xb4\x1e\x7a\x15\xce\x22\xf0\xb2\x90\xa7\x45\x5a\x0a\x79\x32\xb7\x5e\x3c\x61\x51\x63\x52\xe8\xf8\xc6\xd1\xd6\xb4\x4e\x7f\xe9\xa7\xb1\xc7\xab\xfd\x13\xb1\xee\x82\x03\x09\x3d\x73\xbf\xac\xa3\x78\x18\xbd\xa5\x8c\xc8\xbc\x09\xa9\xc3\x7a\x94\xad\x95\x8f\x71\x30\x3d\x75\x67\x10\xca\x68\x52\x7c\xc2\x07\xeb\xa2\xf1\x1c\x3e\x0c\xf6\x25\x1a\xc1\xcd\xb4\x32\x32\x04\x6d\x22\xc5\x04\x42\x6d\xac\xc5\xda\xab\xf1\x26\xfe\x63\x72\x4b\xfa\x8b\x1d\x9f\x34\xa3\x80\xd3\x72\xcf\x9c\x31\x4a\x06\x39\x7e\x3e\x37\xc7\xf4\x8f\x42\xbc\x5b\xbc\xbd\xbf\x4d\x9f\x1c\xaa\x76\x2a\x33\x09\x65\x5d\x67\x52\x46\x49\x5d\xa6\xdc\xa4\x6a\x09\x8f\x12\xd0\xcd\x8a\x72\x69\x1a\x13\x57\x13\x09\x5f\x96\x41\xb9\x4e\xf0\xe6\x6b\x47\xd0\x2b\x4b\xc5\x73\x3e\x66\xc3\xb3\xc9\x1d\xb3\x59\x5f\x3b\x0e\x27\x5c\x88\x88\x74\xab\xc1\x3a\x53\x5b\x3e\xff\x8d\x3d\x5b\x05\xb1\x76\x3a\xeb\x50\xe8\x89\x4c\x44\x40\x3c\xa1\x1d\x97\x37\x7c\x79\xf4\xfc\xd6\xc0\x5d\xbb\x27\x9b\x82\xf2\xea\x34\xd8\x4a\x8d\xd3\xf0\x96\x17\x5d\x99\xcf\xd6\xd8\x2e\x6f\x4b\x5f\xb9\x3b\x9a\xe2\xcf\xaf\x91\xa6\x57\x05\x41\x43\xf8\xc2\xc8\x45\xc7\x14\x05\xbf\x49\xf7\x2d\xf4\x49\xb9\x73\x79\xb9\x31\x28\xa6\x1f\x68\x8d\x08\x5b\x6e\x43\xc2\x2a\x45\x8a\xc2\xd5\x56\xf1\x6f\xf2\xd3\xcc\x3e\xcc\x6c\x47\x6f\x25\x11\x93\xbc\xe1\xa2\xce\x2f\x15\x28\x40\x5c\xef\xd1\x17\x0d\xf6\x2e\x6c\xe7\xbb\x62\xb1\x79\x82\x37\x6e\xa6\x54\xb0\x6a\xb2\xb3\xce\x95\xad\x27\x01\x63\xb3\x36\xfe\x87\x2d\x90\xc5\x97\x14\xe6\xaf\x2f\x18\x99\x5f\x82\x7b\x29\xb6\x24\x29\x8d\x0a\x2e\x4f\x68\x30\x16\xf0\x8f\x41\xa8\xf0\xd7\x8a\xa7\xb9\xea\x64\xe0\xaa\x55\xa3\xf3\x00\xf3\x44\xae\x59\xa8\x72\xfd\xb3\xdb\x63\x6b\x2c\xee\xd8\x1a\xa0\x8f\x55\xa9\x86\x3c\xe9\x62\x43\x5a\x03\x8f\xb7\x25\x7b\x3c\x48\xad\xa9\x8c\x16\x77\xa2\xe5\xb6\x74\x65\xf4\xcb\xc2\xcd\x01\xde\x4d\x1f\xdf\xc3\xbb\xeb\x6c\xff\x33\x57\xc8\x7e\x21\xec\x7c\x07\x16\x3d\x47\x61\xb6\xb7\x78\xe2\x0b\xca\xf4\xb9\x08\x16\xe5\x76\x1b\x79\xa3\x0f\x11\x4d\x43\x1e\xa4\x4c\x14\xc5\x69\xb6\xd2\x72\xe5\x9c\x79\x9b\x0b\xf9\xce\xad\x71\x8d\xe1\x3f\xa5\xc7\x34\x41\x7e\xfc\x5d\x7c\xbb\xa1\x7b\x91\xe8\x72\xd7\xf2\x6d\x7e\x3d\x98\x9c\xdf\xba\xde\x8f\x91\xe5\x78\x96\xd2\x63\xbc\x53\x37\xf1\x9b\x99\x70\xb0\xfe\x1d\x05\x2d\xce\x27\xb4\x66\x69\x8f\xaa\x29\xd3\xcb\x29\xee\xd6\x64\x62\x85\xea\xcb\xa3\xce\x4f\xdb\x9f\x1e\xe1\x15\xc9\xb6\xc6\xb3\x1a\x93\x43\x8b\x31\x31\x65\xfc\xdf\x2e\xd3\x90\x5e\x5d\xe4\xfe\xe5\xff\x01\x00\x00\xff\xff\x95\x17\xd5\xa9\x48\x1b\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0xba, 0x66, 0x74, 0xd7, 0xb3, 0xd5, 0xa4, 0xd3, 0xc6, 0xb8, 0x36, 0xdb, 0xe5, 0x45, 0xf, 0x55, 0x68, 0x16, 0xe9, 0xbc, 0x2c, 0xf3, 0x88, 0x99, 0x6c, 0xe7, 0x69, 0xc, 0x6e, 0xc7, 0x84}}
	return a, nil
}

var _tokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x36\x14\xbc\xf3\x57\xcc\x6e\x81\xae\x1d\x64\xe5\x1e\x8a\x1e\x82\xa4\xdb\x6d\x3e\x8a\xa2\x45\x0a\x78\xb3\xed\xb1\xa0\xa9\x27\x8b\x1b\x99\x14\xc8\x27\x6b\x83\xc0\xff\xbd\x20\x25\xd1\x52\xa2\x14\xe9\xa5\xb9\xc4\x14\xf8\xe6\xcd\xbc\x19\x92\xab\x93\x13\x21\xbe\xc1\x4d\x63\xb6\x7a\x53\x11\xee\xec\x3d\x19\xdc\x58\xd7\x4a\x97\x6b\xb3\xc5\xa5\x35\xec\xa4\x62\x21\xee\x4a\xed\xa1\xfa\x25\x7c\x69\x5b\x8f\xd2\xb6\x90\x06\x52\x29\xdb\x18\x86\xb2\x4d\x95\xc3\x13\xa3\xa9\x21\xa1\x1a\xcf\x76\x97\xc0\x3b\xec\x35\x29\xd2\x7b\x72\x82\x2d\x64\x55\xd9\x16\x5c\xd2\x0e\x6c\x51\x74\x5d\xc1\x61\x9f\x0f\x5f\x24\x72\x5d\x14\xe4\xc8\x70\xea\xd1\x96\x64\x68\x4f\x2e\x94\x3d\xc0\x75\x68\x7d\x4d\x16\x58\xd2\x03\x94\x34\xa8\x9b\x4d\xa5\x7d\x09\x0e\xb4\x7b\x41\xe4\xe0\xc8\xdb\xc6\x29\x82\xf4\x90\x89\x0c\x94\xac\xe5\x46\x57\x9a\x1f\xf0\xa5\xf1\x8c\x4a\xdf\x13\x24\xfe\x94\x4d\xc5\xa7\x42\x9a\x3c\xb4\x83\x27\x13\x30\x72\x4b\xde\xbc\x63\xd0\x9e\x0c\x0c\x51\xa0\x8c\x7b\x63\x5b\x68\x86\xf6\x47\xd2\x99\x10\x7f\x95\x64\xc6\x23\x6a\xa5\xe1\xa8\x4d\x39\x92\x1c\x7a\x24\x6e\xa7\x9d\x24\x25\xab\x2a\x76\xeb\x76\xdc\x52\x9b\x76\x88\xa2\x31\x8a\xb5\x0d\x88\x39\x6a\x67\xf7\x3a\xa7\xd0\xb4\xd5\x5c\xc6\x9a\x24\xc8\x51\xa4\xa0\x08\x5c\x4a\xee\x90\x43\xef\xd1\xa0\x05\x97\xa4\xdd\x71\xdc\x99\x10\x27\x2b\x21\xf4\xae\xb6\x8e\x9f\xb8\x56\x38\xbb\xc3\x77\x5f\x6f\x3e\xdf\xfe\xf2\xeb\xcf\xbf\x5f\xdf\xfd\xf1\xdb\xf5\xed\xc7\xab\xab\xf5\xf5\xa7\x4f\x42\xd4\xcd\xe6\x18\x8c\xb8\x7f\x14\xa0\x47\x21\x00\x60\xb5\xc2\xf5\x3e\xf8\x18\xe9\x68\x0f\xda\x69\x66\xca\xa3\x9f\x03\x07\xe9\x08\x39\xd5\xd6\x6b\xee\x86\x1a\x24\xb1\x74\x5b\xe2\xc1\x69\x17\xd1\x42\x47\x8a\x70\xc3\x6c\xf2\xab\xae\x6e\x21\x77\x61\xce\x67\xf8\x7c\xa3\xbf\xfe\xf0\xfd\x69\x64\x7e\x86\x8f\x79\xee\xc8\xfb\x0f\x4b\x91\xea\x53\x12\xd2\x78\xcf\xa6\xa2\xb3\x34\xcc\x5e\x43\xaf\x23\x1e\x04\xed\x03\x73\x47\x91\xe2\x98\x73\x14\xd2\xea\xaa\xc2\x26\x06\x86\xb3\x69\x2d\x81\x1f\x6a\x82\x36\xb9\x56\x92\xc9\xf7\x03\x89\x33\x91\x63\xdb\x6c\x5c\x8e\x44\x77\x10\xe9\xa7\x54\x8a\xbc\x5f\x78\xaa\x8a\x25\xf6\x32\x58\xae\x74\xad\x29\x88\xbf\x4c\x71\x9e\x30\xef\x79\xce\xa1\xad\x56\x41\x7c\x17\xae\x2e\x31\xf2\x9e\xfc\x70\x04\x60\x37\x5f\x48\x71\x3c\x34\x06\xd2\x6d\x9b\x5d\x3c\x93\x26\x1f\xc2\xe4\xc7\x48\x9a\x07\xf3\x12\xa7\x77\xbe\x47\x6a\x7c\x48\x45\x3c\x4d\x6c\x1d\xe5\x47\xc9\x73\xb4\x82\x51\x45\x63\x06\xe6\x8b\xce\xcd\x9f\xa6\x3e\x45\xe0\x25\x1e\x53\x55\xf8\xab\x46\x99\x59\x53\x81\x0b\x84\x49\x65\x89\x50\xb6\xb1\xce\xd9\xf6\xfc\xdb\xc7\x79\xd3\x0f\x3f\x2e\x96\x6f\xc4\x33\xc8\x8d\xac\x64\xb0\xe7\x22\x06\x2b\xeb\x97\xd3\x7d\xa3\xb6\xd9\x94\xf8\xf9\xfb\xf0\x7f\x39\xdd\x1e\x4e\xc2\xcb\x39\xee\x3b\x0c\x41\x8e\x22\x6c\x6b\xc8\x7d\xc8\x64\x17\xea\x65\x42\x3b\x4c\xdc\x56\xa5\x34\x5b\x5a\x0f\x82\xfb\xb5\x9f\xfa\x02\x5b\xc4\x0f\x45\xba\x21\x7b\xe7\xfa\xdb\x25\x3f\x6e\xfd\x37\x7f\x9e\xf4\x5a\xfc\x0d\x43\xed\x7a\x2e\x90\x4f\x7d\xaa\x1d\x3d\xf9\x12\xfe\xc6\xd5\xaf\x71\x0a\x6f\x2e\x60\x74\x75\x86\xb7\x97\xf1\x0d\x32\x96\xd1\x95\xcd\x5d\x89\xf1\x36\x0b\x22\x8f\xb4\xde\x4e\x28\x1c\x26\xab\x69\x70\x70\x31\x61\x37\x37\x7c\x6d\x34\x2f\x66\x8f\xe3\xeb\xd4\xff\xa7\x90\xfe\xbf\xd2\x9f\xa7\xa1\x2b\x38\xa4\x6b\xfe\xf9\xb3\xd5\x7f\x0a\xb7\x89\xa1\x76\xf2\x18\x0f\xb4\xd2\x03\xf6\x42\xec\xfa\xc8\xa5\xb8\x3d\xeb\xf1\xc2\xb8\xc3\x5d\x91\xda\x1d\x07\xed\x88\x1b\x67\x70\xfe\xbe\x7f\x85\x67\x61\xd2\xcf\x65\xaf\xf0\x20\xfe\x09\x00\x00\xff\xff\x4f\xb2\xa7\xb0\x2f\x09\x00\x00"

func tokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_tokenforwardingCdc,
		"TokenForwarding.cdc",
	)
}

func tokenforwardingCdc() (*asset, error) {
	bytes, err := tokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x3e, 0x44, 0xd9, 0xc0, 0x14, 0x91, 0xad, 0x34, 0x96, 0xca, 0x7d, 0xf8, 0x15, 0x91, 0x80, 0xe7, 0x6e, 0xed, 0x34, 0xf5, 0x3e, 0x81, 0x45, 0x65, 0x1e, 0x1f, 0x23, 0x36, 0x2d, 0x65, 0x62}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleToken.cdc":    exampletokenCdc,
	"FungibleToken.cdc":   fungibletokenCdc,
	"TokenForwarding.cdc": tokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleToken.cdc": {exampletokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc": {fungibletokenCdc, map[string]*bintree{}},
	"TokenForwarding.cdc": {tokenforwardingCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
