// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/burn_tokens.cdc (1.078kB)
// ../../../transactions/create_forwarder.cdc (2.08kB)
// ../../../transactions/mint_tokens.cdc (1.112kB)
// ../../../transactions/setup_account.cdc (1.158kB)
// ../../../transactions/transfer_tokens.cdc (1.372kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _burn_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\xd7\x1c\x2a\x7c\x08\x90\xb4\xb5\x22\xcb\x6d\xea\x46\xcd\xb1\xa7\xb4\x3d\x0f\x30\x36\xab\xc2\x2e\x9a\x5d\x6a\x47\x51\xfe\x7b\xb5\xbb\x40\x70\xa5\xc4\x07\xdb\xb0\x6f\xdf\x7c\x6f\x66\xf2\x1c\x0f\x8d\xb2\x70\x42\xda\x52\xe5\x94\xd1\x50\x16\x04\xc7\x5d\xdf\x92\x63\xec\x8d\xf8\xc7\xc5\xb9\x6b\xc8\x25\x79\x8e\xca\x0c\x6d\x8d\x92\x31\x58\xae\x51\x3e\xc2\x35\x0c\xaa\x3b\xa5\x41\x55\x65\x06\xed\xe0\x0c\xca\x41\x34\x9c\xf9\xc3\xda\xfa\x4b\x7b\x31\x9d\x17\x2a\x81\x75\x46\xb8\xc6\x2f\x1a\x5a\xef\x97\x04\x16\x0e\x17\x94\x3e\x80\xba\x60\x71\x9c\xaa\x10\x7a\x12\xea\xd8\xb1\x78\x5f\x5f\x6c\x41\x95\x24\xaa\xeb\x8d\x38\xdc\x0f\xfa\xa0\xca\x96\x1f\x7c\xc9\x58\xae\x38\x31\xdf\x5c\xdf\x7c\x5a\x97\xfb\xeb\x82\xaf\x89\xd6\x93\xf8\xfb\x89\xba\xfe\x3f\x6d\xf1\x21\x49\x96\x71\x9f\x92\x04\x00\xf2\x3c\x92\x42\xd8\x9a\x41\x2a\x0e\x7d\x40\x63\xda\xda\x46\x98\x90\x31\xbe\x25\x61\x94\xec\x53\xf8\x34\x5c\x07\x87\x96\x1d\xfe\x7a\x8b\x0d\xbe\x9e\x51\x66\xb1\x05\xb3\x28\xf4\x70\x83\xf7\x4b\xba\x6c\xe7\x5f\x2a\xeb\x84\x9c\x91\xa8\xed\x85\x7b\x12\x4e\xad\x3a\x68\x96\x0d\x76\x83\x6b\x76\xb1\xf3\xab\x09\x7b\x44\xff\xad\x5c\x53\x0b\x1d\x71\x55\x4c\xa0\xd3\x24\xc6\x91\x05\x32\x28\x1d\xc6\x42\x07\x9e\x6f\x5b\x6e\xf7\x59\x3c\xdd\x5e\x22\xd6\xca\x4a\x23\x62\x8e\xdb\x73\xc4\x10\xe3\x4b\xea\x8d\x37\xc8\x47\x9f\x9c\x17\x92\xa0\x58\xbd\x9b\xbd\xfd\x27\x3b\x8e\x6c\x69\x9c\xf8\x06\x3f\xef\xd5\x69\xfd\x31\xbd\x2a\xb2\x62\xb5\x3a\x8b\x71\x27\xec\x77\x92\x20\xbc\x67\x61\xed\xa7\x60\x96\x7b\x17\xbe\xe7\x09\xbd\x96\x26\xca\x3e\xbf\x19\xe6\xac\xdf\x6f\x86\x0a\xca\xd5\x59\xa6\xdb\x5b\xf4\xa4\x55\x95\x5e\xdc\x85\xf5\xd5\xc6\x21\x56\x79\x9d\x7d\xa2\xbe\x88\x56\xcf\x31\x38\x9f\xb8\x1a\x1c\xe3\x69\xf6\xf7\x1b\x12\xb6\x4a\xc2\x3c\xe6\x3c\x59\x15\x9a\xf3\x83\x8f\xdf\xc2\x69\xfa\x82\x34\xff\x89\xf7\x32\xff\x13\xd0\xed\x98\x6b\x7b\xf9\x32\xe5\x45\xc7\x6b\xb6\x4e\xcc\xe3\x78\x6d\xc4\x7a\x4e\xf0\x2f\x00\x00\xff\xff\x3d\x2e\xaf\xd5\x36\x04\x00\x00"

func burn_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_burn_tokensCdc,
		"burn_tokens.cdc",
	)
}

func burn_tokensCdc() (*asset, error) {
	bytes, err := burn_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "burn_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x83, 0xa3, 0xc7, 0xfb, 0x73, 0xb8, 0x3a, 0x20, 0x22, 0x21, 0xfa, 0x98, 0x3f, 0xd5, 0xe6, 0xa8, 0x7d, 0x40, 0xf1, 0x7d, 0x97, 0x1f, 0xdc, 0x5c, 0xa2, 0xa9, 0xde, 0x4c, 0x1d, 0xfa, 0x93}}
	return a, nil
}

var _create_forwarderCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x36\x10\xbd\xf3\x57\x4c\xf7\xd0\x75\x02\x47\x4e\xb3\x1f\x58\x18\xd9\x2e\x16\x29\x52\xf4\x52\x14\x6d\xd0\x6b\x77\x4c\x8d\xcc\xe9\xca\xa4\x40\x8e\xac\x1a\x8b\xfc\xf7\x82\xa4\x4c\x49\x6e\xb7\x40\x7d\x8a\xc8\xf9\x78\xf3\xde\x1b\x66\x73\x7d\xad\xd4\x93\xe1\x00\xe2\xd1\x06\xd4\xc2\xce\x02\x07\x40\x10\x3a\x74\x2d\x0a\x41\xe3\x7c\xfc\x9c\xdd\x8b\x41\x01\xed\xfa\xb6\x86\x1d\x41\x1f\xa8\x56\xe2\x20\x90\x40\xdf\x01\x5a\x40\xad\x5d\x6f\x05\xc4\xc5\xe4\x01\x7d\x0d\x35\x75\x2e\xb0\x50\x0d\xe2\x3e\x93\x0d\xf1\x0e\xad\x13\x43\x1e\x3c\x69\xe2\x23\xf9\x4a\xa9\x9f\x1a\x40\x7b\x72\x96\x20\x90\xad\xc3\x3c\x38\xf6\xf1\x2f\x03\x3c\xe6\x8a\xe4\xe1\xd7\x31\x6f\xad\xc4\x50\xf9\x82\x81\xdb\x16\xfe\xec\x83\x94\xe6\x62\x5c\xa0\x59\xad\x18\xfe\x3b\xf6\xad\xe4\x49\x0c\x06\xd8\x11\x59\x15\x27\xc0\x90\xae\x3d\x69\xee\x98\xac\x00\xda\x1a\xe8\xc0\xf1\x0f\xa0\x63\x3c\x49\x49\x6c\x6b\xd6\x28\x14\xd4\x60\x58\x9b\x84\xee\xdc\x30\x4e\x69\xce\x0d\xab\x91\xe0\x01\x4f\x6b\xe0\x38\x1f\xb8\xa6\xb9\xd1\x06\xd9\x42\x20\x7f\x64\x4d\x30\xa0\x95\x04\xed\xe0\x2c\x8b\xf3\x30\x18\x17\x65\x18\x0b\xb2\xdd\xab\x09\x3e\xcb\x1a\x58\x40\xa3\x85\x01\x45\x9b\x0c\x2b\x5d\x05\x22\x18\x0c\x79\x9a\x01\x00\x8d\x07\x82\xc6\xbb\x43\xa5\xd4\x6f\x42\xdd\x18\x99\xd5\xca\x52\x05\x18\x58\x4c\x4e\x28\x53\xf8\xad\x52\xdf\x55\xf0\x64\x08\x1e\x7b\xbb\xe7\x5d\x4b\xf0\x94\x22\xb4\xb3\xe2\x51\x47\x16\x84\x7c\x83\x9a\x20\x98\xe4\x07\x6c\x3d\x61\x7d\x8a\xbe\xa8\xa9\x6b\xdd\x89\x6a\x08\xee\x40\x09\x94\xba\xcb\xd5\xb0\xeb\x5a\xd6\x18\xeb\xc9\xb2\xde\x58\x65\x96\x5d\xa9\x57\x39\x69\xa6\xc8\x68\xaf\x31\xd8\xe0\x91\x00\x47\x41\xa3\x59\x25\xf9\x39\x17\xf6\x84\x42\xb5\x02\x80\x24\x64\x10\xe7\xa9\x06\xb6\xc0\x12\xd2\x17\xee\x29\xcf\x8e\xd0\xf5\xbb\x96\x83\xa1\xba\x78\x49\xbd\xae\xe0\x87\x04\x24\xf1\xf9\x29\x4d\xff\x58\x34\xa9\x74\xad\x3f\x4d\xe0\x93\x4b\x6b\x6e\x1a\xf2\x33\x98\xea\x4d\x15\x3d\x0b\x08\x96\x06\xf8\x98\x0f\xb7\xf0\x90\x90\xa5\xb2\xe7\x79\xac\xf3\x07\x6c\xdb\xd3\x3a\xc1\x15\x43\x16\x7c\x6f\x73\xe7\x3c\xc8\x1f\x45\x9a\xdc\x7a\xb6\x94\x39\x69\x4f\x22\x6c\xf7\xb0\x58\x88\x28\xfd\xa2\x51\x36\xf0\x85\xd1\x2b\x75\xbd\x51\x8a\x0f\x9d\xf3\x52\xf4\xce\x72\xa7\x02\xb7\x7f\x11\xbd\xbb\x7b\xf7\xe6\xed\xae\xb9\xbb\xa5\x3b\xc4\xb7\x25\xb8\x75\xc3\x22\xf0\xf6\xd5\xf9\xea\x82\xb0\x12\xf0\x5a\xa9\xf9\x83\xf2\x45\x25\xf4\x9d\xa7\x0e\x3d\xad\x02\xef\x2d\xf9\x2d\x7c\xec\xc5\x8c\x84\x5d\x9d\x63\xe2\xaf\x25\x99\xd9\xe1\x7d\x9c\x7a\x0c\x5b\xc5\xda\x57\x53\xe4\x66\x03\x3f\xc6\xa5\x9e\xc8\xf0\x94\xe4\xd1\x34\x5a\xe5\x82\x95\xf4\x78\xec\xe8\xe2\x0d\x70\x4d\x3a\x98\xad\x77\xda\xac\xaf\x20\x2a\xbd\xde\x4f\x67\x25\x32\xfe\xaa\x3d\xc9\x03\x76\xb8\xe3\x96\xe5\xb4\xda\x24\xe3\xe9\x4d\x73\xe6\xf1\x5c\xe0\xea\x9b\x65\xda\xce\x79\xef\x86\xfb\x6f\x0b\xe1\x55\x32\xfd\x97\x85\x5a\xd5\x39\xfb\xf9\xfb\xd5\xd5\x22\xff\xc3\x07\xe8\xd0\xb2\x5e\xbd\x78\x48\x8b\x63\x9d\x40\x2e\x59\x9e\xe0\x39\x3d\x67\xd7\xe8\x82\xf4\xc5\x92\xd9\xd1\xc2\xd9\xd8\xd3\xb3\xec\x29\xb8\xde\x6b\x9a\x16\x2e\xbe\x56\x9c\x8d\x9c\xa5\x7d\x59\x76\x6f\xc1\x60\x71\x37\xdc\xdf\x5c\x5a\xa7\xca\x1b\xf0\x33\x0d\xa5\xd3\xaa\xb0\xbb\xfd\x27\xf9\xd3\xe8\xb9\x65\x15\xf0\x48\xab\xfb\x9b\xd2\x63\x0d\xe2\xb6\xb0\x19\x71\xfc\x0b\xf9\x8b\x59\x7f\xc9\x6f\xc3\xdc\x49\x13\x2f\xc5\x4a\xb9\xd5\x1a\xf2\xbf\x04\x0e\xd0\xb2\xfd\x9c\xec\x92\xae\x0b\xf2\x4b\x6c\x31\xec\x7f\xc8\xba\x50\xf5\xab\xee\x59\x2f\xc2\x04\xfd\x9e\xe4\xbf\x06\x2e\xe1\x99\xba\x67\xf5\xac\xe0\xef\x00\x00\x00\xff\xff\x1f\x8a\xcf\x9a\x20\x08\x00\x00"

func create_forwarderCdcBytes() ([]byte, error) {
	return bindataRead(
		_create_forwarderCdc,
		"create_forwarder.cdc",
	)
}

func create_forwarderCdc() (*asset, error) {
	bytes, err := create_forwarderCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create_forwarder.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x33, 0xf5, 0x1a, 0x54, 0x9a, 0x52, 0xa, 0x51, 0xa3, 0xd4, 0x98, 0xd9, 0xed, 0x84, 0x66, 0x32, 0x53, 0xc0, 0xd3, 0xd4, 0xb5, 0x6b, 0x9, 0xb1, 0x4, 0x6d, 0xe3, 0xa6, 0x49, 0x85, 0xa8}}
	return a, nil
}

var _mint_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\xa6\x39\x54\x70\x08\xd0\x8f\x93\xe5\x24\xb2\xaa\xf6\xd6\x1e\xda\xb4\xf7\x01\xc6\x78\xd5\x65\x17\xcd\x0e\xb5\xad\x28\xff\xbd\x9a\x05\x1c\xec\x46\xae\x2f\x16\xec\x7b\x6f\xde\x9b\xb7\x24\x45\x01\x8f\x3b\x13\x40\x18\x5d\xc0\x5a\x8c\x77\x60\x02\x20\x08\x75\xbd\x45\x21\xd8\x7a\xd6\xc7\xc5\xb9\xec\x50\x94\x58\xfb\xc1\x36\x50\x11\x0c\x81\x1a\xa8\x8e\x20\x3b\x02\x6c\x3a\xe3\x00\xeb\xda\x0f\x4e\x40\x3c\x74\xc6\x09\x38\xda\x83\xf8\xdf\xe4\x82\x12\xd1\x35\xd0\x50\xef\x83\x11\xe5\x74\xa0\x0c\xe7\x65\x47\x3c\x33\x93\xa2\x18\xbd\x51\x14\x30\xae\x05\xec\xa2\xa4\x92\xe3\xa0\x69\xc4\x96\x7d\x07\x2d\xc9\xe6\x44\x84\xfd\x6c\x4c\x71\x3d\x32\x76\x24\xc4\x41\xdd\xe8\x9b\x45\x96\x24\x31\x5d\xef\x59\xe0\xcb\xe0\x5a\x53\x59\x7a\x54\x93\xa3\x66\x79\x28\xdf\xcf\xc7\x9f\x0f\xd8\xf5\x97\xa7\x1f\x92\x64\xb9\x96\xa7\x04\x00\xc0\x92\x8c\x49\x37\xba\x88\x15\xbc\x5d\x52\xf3\xf8\xd2\x04\x61\x14\xcf\xe7\xf8\xef\x54\x93\xf9\x43\x7c\x49\xf9\x85\x83\x95\xa7\x33\x7f\xf9\x8c\x7d\x4e\xa2\x46\xcf\xd4\x23\x53\x1a\x4c\xeb\x54\x60\x33\xc8\x6e\x5a\x47\x36\xd9\xd2\x5f\x20\xbb\xcd\x5f\xbc\xc1\x1d\x8c\x84\x13\x20\xaf\x3c\xb3\xdf\xaf\xaf\x78\xbe\x4f\x35\xfd\x0a\x8a\x20\x9e\xb1\xa5\x82\x16\xd0\x88\xcc\xe0\xa4\xf7\xf0\x00\x3d\x3a\x53\xa7\x37\x3f\xe2\x20\xbd\x59\xce\xcb\x58\x42\x5c\x65\xbc\x2d\x37\x59\xf2\x8a\xc7\x39\x23\xdc\x2d\xda\x4d\xcb\x43\xf9\x31\x7b\x31\xdc\x92\x7c\xc2\x1e\x2b\x63\x8d\x1c\xd3\xa2\x1f\x2a\x6b\xea\x33\x4f\xb3\x4c\xf6\xe6\x3f\x31\xaf\xee\xf9\x3e\xcd\x5e\x49\xf5\xd3\x61\x65\x35\x0a\x8c\x8a\xc0\xb3\x67\xa6\x2d\x31\xb9\x9a\x6e\x46\xde\x54\x14\x1d\xa8\x1e\x84\x16\x9d\x68\xfd\x7a\xc1\x89\x61\x7d\x7b\xd9\x50\x5e\x33\xa1\xd0\x37\xda\x7f\x8d\x90\x14\xad\xf5\x7b\x6a\x36\xf1\x4b\x58\xc1\xbb\xb2\xcc\xcb\xec\x5f\xad\x26\x66\x51\xc1\x51\x3a\xd7\xbf\x98\x28\xa4\x78\xe2\x5e\xdd\x7a\x3e\x7d\x9f\x53\xdd\xeb\xdb\x85\xf0\x82\xd8\x50\x10\xf6\xc7\x69\xce\x14\xf5\x39\x81\xbf\x01\x00\x00\xff\xff\x1f\xaa\xab\x5e\x58\x04\x00\x00"

func mint_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_mint_tokensCdc,
		"mint_tokens.cdc",
	)
}

func mint_tokensCdc() (*asset, error) {
	bytes, err := mint_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mint_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x12, 0x7a, 0xca, 0x3c, 0x4b, 0x14, 0x91, 0x37, 0xd5, 0xd5, 0xdd, 0x1e, 0x3, 0x1f, 0x1b, 0x51, 0x2e, 0xa2, 0x15, 0xa5, 0xbe, 0x13, 0xb9, 0x92, 0x3f, 0x3a, 0xb0, 0x84, 0xac, 0x9b, 0xfc}}
	return a, nil
}

var _setup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\xa6\x97\xc2\x06\x52\x2b\x68\x6f\x41\x1a\x20\x2d\xd2\x0f\x28\x82\xde\x57\xd4\x4a\x22\x42\x91\x04\xb9\x4c\x6c\x18\xfe\xf7\x82\x7a\xa4\x56\x9b\x06\x3d\xa4\x3c\x18\x26\x67\x76\x76\x76\x56\xaa\xaa\x70\xdf\x9b\x04\x89\xe4\x12\x69\x31\xde\xc1\x24\x10\x84\x87\x60\x49\x18\xad\x8f\xe5\xfa\x0b\x2f\x35\xe2\x41\x4d\x03\xc2\x0f\xca\x56\x10\x39\xf9\x1c\x35\x97\x77\xe9\xd9\x44\x90\xd6\x3e\x3b\x29\xdc\x54\xde\x48\x0a\x70\x80\x26\x87\x9c\xb8\x5c\xc0\x7b\x1a\x82\xe5\x7b\xff\xc0\x4e\x29\x33\x04\x1f\x05\xdf\xb2\xeb\x4c\x3d\xbf\xa2\x8d\x7e\xc0\xe5\xfe\xf2\xe3\x02\xdf\x9d\xd5\x3c\xa3\x9f\x94\x3a\xf7\x7f\x54\x0a\x00\x42\xe4\x40\x91\x37\xc9\x74\x8e\xe3\x15\x6e\xb3\xf4\xb7\x93\xad\xed\xc2\x29\xc7\xb4\x98\x28\xbb\xda\xc7\xe8\x9f\xae\xdf\x9f\x37\xd9\x8d\x13\xde\x6c\x4a\xaf\x2b\x54\x49\x7c\xa4\x8e\xab\x73\xef\x23\x63\x8b\x77\x9f\xe1\x8c\xc5\xf1\x59\xb8\x9c\xaa\xc2\xd7\xc8\x25\x47\x82\xe3\xa7\xd5\xcc\x73\x78\xe4\x1a\x84\x2c\x30\x02\xe3\x30\x37\x58\x89\xcc\xf6\x12\x3d\xf2\xe6\xfa\xc3\xca\x9d\x1e\xc5\xef\x86\x20\x87\x51\x6d\xb3\xbd\x80\xf8\x57\x8d\xaa\xbf\x1a\x0c\xb9\xb6\x46\x43\x53\xa0\xda\x58\x23\x87\x79\x9f\xb3\xd1\x71\x8b\xde\xd9\x03\x78\x1f\x7c\xe2\xf4\xbb\x50\xa1\x36\x1c\x7c\x32\x82\x36\xbb\x69\x1b\xd2\x47\x9f\xbb\x7e\x04\xbf\xb3\x66\xf3\xc8\x11\xc6\x09\xc7\x96\xf4\x8b\x73\x5a\xe3\x1e\x5e\x5a\xc2\x71\xf5\x6d\xec\x16\xb1\xd3\xcd\x66\xa5\x32\x9a\x99\x46\x59\x4d\xbf\xf0\x2f\xfe\x60\x0b\xc5\x8e\xe5\xb5\xd0\x56\x25\xff\x39\xc1\x9a\x2c\x39\xcd\x68\x0d\xdb\x66\x15\xdf\x97\x19\x79\x8b\xf4\x66\xad\x7f\x0d\x6f\xa6\xbf\x41\x76\xcb\xbf\x93\x9a\x7e\x4f\x0a\x3f\x03\x00\x00\xff\xff\xd4\x0a\x9c\x66\x86\x04\x00\x00"

func setup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_accountCdc,
		"setup_account.cdc",
	)
}

func setup_accountCdc() (*asset, error) {
	bytes, err := setup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x91, 0x63, 0xb0, 0x20, 0x73, 0xee, 0xc8, 0x17, 0x58, 0x73, 0x8a, 0x96, 0xfd, 0xe3, 0x2c, 0xcb, 0xa3, 0xe6, 0xeb, 0x2e, 0x6f, 0x63, 0x90, 0xf1, 0xbf, 0xbf, 0xbc, 0xfc, 0x7e, 0x2a, 0xee}}
	return a, nil
}

var _transfer_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\xdb\x3c\x10\x3c\x47\x4f\xb1\xc9\xe1\x8b\x0c\x7c\x91\x82\xa0\x0d\x02\x23\x3f\x35\xf2\xd3\x43\x81\x16\x48\xd2\xf6\x4c\x49\x23\x8b\xad\x4c\x0a\xe4\x2a\x76\x10\xf8\xdd\x0b\x92\x92\x2a\x39\x45\xd3\x93\xa1\xf5\xec\xec\xec\xcc\x32\x4d\xe9\xb1\x92\x96\xd8\x08\x65\x45\xce\x52\x2b\x92\x96\x04\x31\x56\x4d\x2d\x18\x54\x6a\xe3\x3e\x47\xff\x73\x25\x38\x4a\x53\xca\x75\x5b\x17\x94\x81\x5a\x8b\x82\xb2\x67\x12\xea\x59\x2b\x10\x6b\xb2\x50\x05\xb1\xfe\x09\x65\xdd\xa7\x50\x9a\x2b\x18\x12\x79\xae\x5b\xe5\x9b\x1d\x09\x55\xc2\x52\x06\x28\xb2\x60\x6a\x1b\x07\x35\xc8\x21\x9f\xd0\x35\x27\x51\x9a\x46\x5e\x23\x68\x2d\xb9\x2a\x8c\x58\x93\x58\x39\x12\x12\x6e\x44\x85\x9e\x94\x4a\xa3\x57\xb4\x04\x2f\x7e\x0f\x59\xf7\x0a\x1d\xae\x11\x46\xac\xc0\x30\x5e\x92\xab\x8c\x96\x8a\x22\xb9\x6a\xb4\x61\xba\x6b\xd5\x52\x66\x35\x1e\xdd\xfc\xc0\x79\xbc\x01\xce\x4e\xce\xde\x9f\x66\xe5\xc9\x31\x4e\x84\x38\xed\xc1\xb7\x1b\xb1\x6a\x76\xb0\x8f\x5f\x3e\xdd\x7e\x5e\xdc\xdc\xdc\xdf\x3e\x3c\x44\xd1\x68\x44\x1c\x74\xcf\xe9\xeb\x9d\xdc\x9c\xbe\xfb\x9f\x58\xcf\x69\x51\x14\x06\xd6\xce\xe8\x25\x8a\x88\x88\xba\x5d\xbf\x89\xb6\x66\x32\xb0\xba\x35\x39\x3a\xb3\x74\x5d\xd8\xa0\xbb\x33\xd6\x55\x85\x01\x65\x90\x6a\x19\xb6\x29\x61\x0c\x0a\x4f\x55\x83\x5d\x0e\xec\xb9\xe6\xf4\x61\xb2\x59\xe2\xab\x61\x66\x63\xd0\x08\x83\xd8\xca\xa5\x82\x99\xd3\xa2\xe5\xaa\x33\x71\xd0\xd5\x69\xfb\x08\x26\x41\x06\x25\x0c\x54\x8e\xde\xc8\xd0\x79\x68\xc9\xb2\x36\x28\xe8\xc9\x93\xf7\x7d\x4e\x88\xaf\xdc\xa3\xa4\x8b\x0e\x9c\x64\xda\x18\xbd\x3e\xff\x6f\xec\x61\x50\x75\x19\x3b\x2b\xe7\x94\x3a\x36\xb1\x44\x8a\x11\xc4\x23\x66\xd1\xde\xde\xde\xd5\x15\x35\x42\xc9\x3c\x3e\xb8\xf6\x31\x2b\xcd\x14\x48\x5f\x0b\xd4\xeb\xa0\xcf\x77\xef\x1f\xcc\x26\x4b\x7d\xef\x0f\xab\xf3\xd5\x07\xf9\xf6\x5a\x16\x75\x99\x0c\x06\xd3\xf9\xd1\xb0\x64\xd2\x9f\xea\x10\x79\xf8\x9d\xf9\xde\x6d\x18\x8e\x0d\xf2\x96\xf1\x07\x83\xdd\x68\x83\x5c\x36\x12\x8a\x0f\x2d\x35\x6d\x56\xcb\x7c\xb8\x73\x9d\xfd\x40\x3e\x75\x77\x40\xd3\xc5\xe8\x05\xc4\xac\x67\xff\x92\xde\x78\xd6\x7d\x78\x7e\x66\x97\xde\x17\x43\x7e\x03\x3c\x59\x82\xaf\x45\x23\x32\x59\x4b\x7e\x8e\xd3\xa0\x73\x92\x56\x4f\x37\xdb\x1f\xf2\x7e\x99\xde\x61\x8f\xd8\x5e\xc6\x6f\xa7\x1a\xa0\x7f\xdf\xc0\xa7\xb1\x93\xf0\x0d\x1a\x6d\x65\x70\xb6\xcf\x46\xf5\x71\x4b\xf5\x8a\xc3\xec\xba\x30\x72\x20\x29\x02\x59\x77\xa4\xe7\x47\xd3\x3b\xe8\x33\xde\x46\xf4\x2b\x00\x00\xff\xff\x2b\xfa\x4d\xe8\x5c\x05\x00\x00"

func transfer_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_tokensCdc,
		"transfer_tokens.cdc",
	)
}

func transfer_tokensCdc() (*asset, error) {
	bytes, err := transfer_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0xbb, 0x48, 0x84, 0x42, 0x4b, 0xd7, 0xae, 0xcd, 0x5, 0x17, 0xd6, 0xb5, 0x4a, 0x35, 0x4, 0xf7, 0x80, 0x86, 0x5a, 0x3d, 0x62, 0x1a, 0x1c, 0xed, 0x7d, 0xd2, 0xaa, 0x2e, 0x2a, 0x90, 0x60}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"burn_tokens.cdc":      burn_tokensCdc,
	"create_forwarder.cdc": create_forwarderCdc,
	"mint_tokens.cdc":      mint_tokensCdc,
	"setup_account.cdc":    setup_accountCdc,
	"transfer_tokens.cdc":  transfer_tokensCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"burn_tokens.cdc":      &bintree{burn_tokensCdc, map[string]*bintree{}},
	"create_forwarder.cdc": &bintree{create_forwarderCdc, map[string]*bintree{}},
	"mint_tokens.cdc":      &bintree{mint_tokensCdc, map[string]*bintree{}},
	"setup_account.cdc":    &bintree{setup_accountCdc, map[string]*bintree{}},
	"transfer_tokens.cdc":  &bintree{transfer_tokensCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
